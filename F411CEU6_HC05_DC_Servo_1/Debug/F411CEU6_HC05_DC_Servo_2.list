
F411CEU6_HC05_DC_Servo_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008260  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080083f8  080083f8  000183f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008620  08008620  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008628  08008628  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08008630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200000b0  080086e0  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  080086e0  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df52  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce9  00000000  00000000  0002e075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a30  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016442  00000000  00000000  00031478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea5c  00000000  00000000  000478ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e84e  00000000  00000000  00056316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f84  00000000  00000000  000e4b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e8ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080083e0 	.word	0x080083e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	080083e0 	.word	0x080083e0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b970 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14a      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4694      	mov	ip, r2
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0xe2>
 8000c26:	fab2 f382 	clz	r3, r2
 8000c2a:	b143      	cbz	r3, 8000c3e <__udivmoddi4+0x2e>
 8000c2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c30:	f1c3 0220 	rsb	r2, r3, #32
 8000c34:	409f      	lsls	r7, r3
 8000c36:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3a:	4317      	orrs	r7, r2
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c42:	fa1f f58c 	uxth.w	r5, ip
 8000c46:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4a:	0c22      	lsrs	r2, r4, #16
 8000c4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	fb01 f005 	mul.w	r0, r1, r5
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x62>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c64:	f080 811c 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f240 8119 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4462      	add	r2, ip
 8000c72:	1a12      	subs	r2, r2, r0
 8000c74:	b2a4      	uxth	r4, r4
 8000c76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	fb00 f505 	mul.w	r5, r0, r5
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x90>
 8000c8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x294>
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x294>
 8000c9c:	4464      	add	r4, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11e      	cbz	r6, 8000cb2 <__udivmoddi4+0xa2>
 8000caa:	40dc      	lsrs	r4, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0xbc>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80ed 	beq.w	8000e9a <__udivmoddi4+0x28a>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d149      	bne.n	8000d68 <__udivmoddi4+0x158>
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	d302      	bcc.n	8000cde <__udivmoddi4+0xce>
 8000cd8:	4282      	cmp	r2, r0
 8000cda:	f200 80f8 	bhi.w	8000ece <__udivmoddi4+0x2be>
 8000cde:	1a84      	subs	r4, r0, r2
 8000ce0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d0e2      	beq.n	8000cb2 <__udivmoddi4+0xa2>
 8000cec:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf0:	e7df      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xe6>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d00:	1a8a      	subs	r2, r1, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d10:	fb07 2015 	mls	r0, r7, r5, r2
 8000d14:	0c22      	lsrs	r2, r4, #16
 8000d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1a:	fb0e f005 	mul.w	r0, lr, r5
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d22:	eb1c 0202 	adds.w	r2, ip, r2
 8000d26:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2b8>
 8000d32:	4645      	mov	r5, r8
 8000d34:	1a12      	subs	r2, r2, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d3c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x14e>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x14c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2c2>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d66:	e79f      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000d68:	f1c1 0720 	rsb	r7, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7e:	40fd      	lsrs	r5, r7
 8000d80:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d84:	4323      	orrs	r3, r4
 8000d86:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d92:	0c1c      	lsrs	r4, r3, #16
 8000d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d98:	fb08 f50e 	mul.w	r5, r8, lr
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	fa00 f001 	lsl.w	r0, r0, r1
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2b4>
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2b4>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4464      	add	r4, ip
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	b29d      	uxth	r5, r3
 8000dc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dcc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2ac>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2ac>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dee:	fba3 9502 	umull	r9, r5, r3, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46ae      	mov	lr, r5
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x29c>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x298>
 8000e00:	b156      	cbz	r6, 8000e18 <__udivmoddi4+0x208>
 8000e02:	ebb0 0208 	subs.w	r2, r0, r8
 8000e06:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0e:	40ca      	lsrs	r2, r1
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	4317      	orrs	r7, r2
 8000e14:	e9c6 7400 	strd	r7, r4, [r6]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	f1c3 0120 	rsb	r1, r3, #32
 8000e24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e28:	fa20 f201 	lsr.w	r2, r0, r1
 8000e2c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e30:	409d      	lsls	r5, r3
 8000e32:	432a      	orrs	r2, r5
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e40:	fb07 1510 	mls	r5, r7, r0, r1
 8000e44:	0c11      	lsrs	r1, r2, #16
 8000e46:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4e:	428d      	cmp	r5, r1
 8000e50:	fa04 f403 	lsl.w	r4, r4, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x258>
 8000e56:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e60:	428d      	cmp	r5, r1
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	1b49      	subs	r1, r1, r5
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e70:	fb07 1115 	mls	r1, r7, r5, r1
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	fb05 f10e 	mul.w	r1, r5, lr
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x282>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a52      	subs	r2, r2, r1
 8000e94:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0xfc>
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	e6e6      	b.n	8000c72 <__udivmoddi4+0x62>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x90>
 8000ea8:	4548      	cmp	r0, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb8:	4645      	mov	r5, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x282>
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x258>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec8:	3d02      	subs	r5, #2
 8000eca:	4462      	add	r2, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e70a      	b.n	8000ce8 <__udivmoddi4+0xd8>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x14e>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f001 fee2 	bl	8002ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f876 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fb5c 	bl	80015a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eec:	f000 fb24 	bl	8001538 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ef0:	f000 f8d8 	bl	80010a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f95a 	bl	80011ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ef8:	f000 f9b0 	bl	800125c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000efc:	f000 fa02 	bl	8001304 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f00:	f000 fa54 	bl	80013ac <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000f04:	f000 fac4 	bl	8001490 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f08:	f000 faec 	bl	80014e4 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000f0c:	f000 fa9c 	bl	8001448 <MX_TIM10_Init>
  void Bit_converter_to_direction(uint8_t Hex);
  float Average_5_times(float Var, float Temp[20]);
  void Controller(uint8_t Direction, float WR, float WL);
  void Direction_Wheles(uint8_t Tien_lui);
  void Bit_converter_to_direction(uint8_t Hex);
  HAL_TIM_Base_Start_IT(&htim5);
 8000f10:	4822      	ldr	r0, [pc, #136]	; (8000f9c <main+0xc0>)
 8000f12:	f003 fa0f 	bl	8004334 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000f16:	2104      	movs	r1, #4
 8000f18:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <main+0xc4>)
 8000f1a:	f003 fc13 	bl	8004744 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000f1e:	2104      	movs	r1, #4
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <main+0xc8>)
 8000f22:	f003 fc0f 	bl	8004744 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <main+0xcc>)
 8000f2a:	f003 fab5 	bl	8004498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	481e      	ldr	r0, [pc, #120]	; (8000fac <main+0xd0>)
 8000f32:	f003 fab1 	bl	8004498 <HAL_TIM_PWM_Start>


  // Gán giá trị PID
	PID_A -> Kp = 0.0671641791;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <main+0xd4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <main+0xd8>)
 8000f3c:	601a      	str	r2, [r3, #0]
	PID_A -> Ki = 129.9951014957;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <main+0xd4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <main+0xdc>)
 8000f44:	605a      	str	r2, [r3, #4]
	PID_A -> Kd = 0;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <main+0xd4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
	PID_B -> Kp = 0.0671641791;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <main+0xe0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <main+0xd8>)
 8000f56:	601a      	str	r2, [r3, #0]
	PID_B -> Ki = 129.9951014957;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <main+0xe0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <main+0xdc>)
 8000f5e:	605a      	str	r2, [r3, #4]
	PID_B -> Kd = 0;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <main+0xe0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]


	Kinematic_Matlab_A->theta = 0.5;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <main+0xe4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000f72:	615a      	str	r2, [r3, #20]
	Kinematic_Matlab_A->b = 0.00001;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <main+0xe4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <main+0xe8>)
 8000f7a:	61da      	str	r2, [r3, #28]
	Kinematic_Matlab_A->Ratio_WR_WL = 1;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <main+0xe4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart1, &Data_Received[0], 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	490f      	ldr	r1, [pc, #60]	; (8000fc8 <main+0xec>)
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <main+0xf0>)
 8000f8c:	f004 fb0f 	bl	80055ae <HAL_UART_Receive_IT>
	  Direction_Wheles(Var);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <main+0xf4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fd8f 	bl	8001ab8 <Direction_Wheles>
	  HAL_UART_Receive_IT(&huart1, &Data_Received[0], 1);
 8000f9a:	e7f4      	b.n	8000f86 <main+0xaa>
 8000f9c:	200001ec 	.word	0x200001ec
 8000fa0:	2000015c 	.word	0x2000015c
 8000fa4:	200001a4 	.word	0x200001a4
 8000fa8:	200000cc 	.word	0x200000cc
 8000fac:	20000114 	.word	0x20000114
 8000fb0:	20000020 	.word	0x20000020
 8000fb4:	3d898d60 	.word	0x3d898d60
 8000fb8:	4301febf 	.word	0x4301febf
 8000fbc:	20000024 	.word	0x20000024
 8000fc0:	20000040 	.word	0x20000040
 8000fc4:	3727c5ac 	.word	0x3727c5ac
 8000fc8:	200003d4 	.word	0x200003d4
 8000fcc:	2000033c 	.word	0x2000033c
 8000fd0:	200003d0 	.word	0x200003d0

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fa0e 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <SystemClock_Config+0xc8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <SystemClock_Config+0xc8>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <SystemClock_Config+0xc8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SystemClock_Config+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <SystemClock_Config+0xcc>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <SystemClock_Config+0xcc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001044:	230c      	movs	r3, #12
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fcc3 	bl	80039e4 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001064:	f001 fb06 	bl	8002674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2103      	movs	r1, #3
 8001084:	4618      	mov	r0, r3
 8001086:	f002 ff25 	bl	8003ed4 <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001090:	f001 faf0 	bl	8002674 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	; 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b092      	sub	sp, #72	; 0x48
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2220      	movs	r2, #32
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 f998 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010d6:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <MX_TIM1_Init+0x104>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010dc:	2213      	movs	r2, #19
 80010de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001102:	f003 f979 	bl	80043f8 <HAL_TIM_PWM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800110c:	f001 fab2 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111c:	4619      	mov	r1, r3
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001120:	f004 f924 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800112a:	f001 faa3 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001154:	f003 fc8c 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800115e:	f001 fa89 	bl	8002674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001186:	f004 f95f 	bl	8005448 <HAL_TIMEx_ConfigBreakDeadTime>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001190:	f001 fa70 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001196:	f001 fc03 	bl	80029a0 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3748      	adds	r7, #72	; 0x48
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000cc 	.word	0x200000cc
 80011a8:	40010000 	.word	0x40010000

080011ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_TIM2_Init+0xac>)
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_TIM2_Init+0xac>)
 80011d8:	2213      	movs	r2, #19
 80011da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM2_Init+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM2_Init+0xac>)
 80011e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_TIM2_Init+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM2_Init+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <MX_TIM2_Init+0xac>)
 80011f8:	f003 f8fe 	bl	80043f8 <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001202:	f001 fa37 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4619      	mov	r1, r3
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <MX_TIM2_Init+0xac>)
 8001216:	f004 f8a9 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001220:	f001 fa28 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM2_Init+0xac>)
 800123c:	f003 fc18 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001246:	f001 fa15 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM2_Init+0xac>)
 800124c:	f001 fba8 	bl	80029a0 <HAL_TIM_MspPostInit>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000114 	.word	0x20000114

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f005 f8ca 	bl	8006404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_TIM3_Init+0xa0>)
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_TIM3_Init+0xa4>)
 800127c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM3_Init+0xa0>)
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_TIM3_Init+0xa0>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129e:	2303      	movs	r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012a2:	2302      	movs	r3, #2
 80012a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM3_Init+0xa0>)
 80012ca:	f003 f995 	bl	80045f8 <HAL_TIM_Encoder_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f001 f9ce 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM3_Init+0xa0>)
 80012e6:	f004 f841 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012f0:	f001 f9c0 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000015c 	.word	0x2000015c
 8001300:	40000400 	.word	0x40000400

08001304 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f005 f876 	bl	8006404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <MX_TIM4_Init+0xa4>)
 8001324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM4_Init+0xa0>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM4_Init+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001346:	2303      	movs	r3, #3
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800134e:	2301      	movs	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001372:	f003 f941 	bl	80045f8 <HAL_TIM_Encoder_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800137c:	f001 f97a 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM4_Init+0xa0>)
 800138e:	f003 ffed 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001398:	f001 f96c 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001a4 	.word	0x200001a4
 80013a8:	40000800 	.word	0x40000800

080013ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM5_Init+0x94>)
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <MX_TIM5_Init+0x98>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 499;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM5_Init+0x94>)
 80013d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80013d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM5_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM5_Init+0x94>)
 80013de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_TIM5_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_TIM5_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_TIM5_Init+0x94>)
 80013f2:	f002 ff4f 	bl	8004294 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013fc:	f001 f93a 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_TIM5_Init+0x94>)
 800140e:	f003 fbf1 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001418:	f001 f92c 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_TIM5_Init+0x94>)
 800142a:	f003 ff9f 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001434:	f001 f91e 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200001ec 	.word	0x200001ec
 8001444:	40000c00 	.word	0x40000c00

08001448 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_TIM10_Init+0x40>)
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <MX_TIM10_Init+0x44>)
 8001450:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <MX_TIM10_Init+0x40>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_TIM10_Init+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_TIM10_Init+0x40>)
 8001460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001464:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_TIM10_Init+0x40>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_TIM10_Init+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_TIM10_Init+0x40>)
 8001474:	f002 ff0e 	bl	8004294 <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800147e:	f001 f8f9 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000234 	.word	0x20000234
 800148c:	40014400 	.word	0x40014400

08001490 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_USART1_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c8:	f004 f824 	bl	8005514 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f001 f8cf 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000033c 	.word	0x2000033c
 80014e0:	40011000 	.word	0x40011000

080014e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_USART2_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 800151c:	f003 fffa 	bl	8005514 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f001 f8a5 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000380 	.word	0x20000380
 8001534:	40004400 	.word	0x40004400

08001538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_DMA_Init+0x68>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <MX_DMA_Init+0x68>)
 8001548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_DMA_Init+0x68>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_DMA_Init+0x68>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <MX_DMA_Init+0x68>)
 8001564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_DMA_Init+0x68>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2010      	movs	r0, #16
 800157c:	f001 fce1 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001580:	2010      	movs	r0, #16
 8001582:	f001 fcfa 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2039      	movs	r0, #57	; 0x39
 800158c:	f001 fcd9 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001590:	2039      	movs	r0, #57	; 0x39
 8001592:	f001 fcf2 	bl	8002f7a <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <MX_GPIO_Init+0xbc>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_GPIO_Init+0xbc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Test_TIM_5_Pin|IN4_Pin|IN3_Pin|IN2_Pin
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001616:	f002 f9cb 	bl	80039b0 <HAL_GPIO_WritePin>
                          |IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Test_TIM_5_Pin */
  GPIO_InitStruct.Pin = Test_TIM_5_Pin;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Test_TIM_5_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001634:	f002 f838 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001638:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800163c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001652:	f002 f829 	bl	80036a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <Forward_Kinematic>:
//xP=v*cos(th);
//yP=v*sin(th);
//thP=w;
//////////////////////////////////////////////
void Forward_Kinematic(float RPM_R, float RPM_L, struct Kinematic_Matlab* Kinematic_Matlab_A)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001672:	edc7 0a02 	vstr	s1, [r7, #8]
 8001676:	6078      	str	r0, [r7, #4]
	RPM_R = RPM_R * 0.10471975512;
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7fe ff11 	bl	80004a0 <__aeabi_f2d>
 800167e:	a353      	add	r3, pc, #332	; (adr r3, 80017cc <Forward_Kinematic+0x164>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ff64 	bl	8000550 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa56 	bl	8000b40 <__aeabi_d2f>
 8001694:	4603      	mov	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]
	RPM_L = RPM_L * 0.10471975512;
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f7fe ff01 	bl	80004a0 <__aeabi_f2d>
 800169e:	a34b      	add	r3, pc, #300	; (adr r3, 80017cc <Forward_Kinematic+0x164>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ff54 	bl	8000550 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa46 	bl	8000b40 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	60bb      	str	r3, [r7, #8]
	Kinematic_Matlab_A->vel_Real = (RPM_R+RPM_L) * R_Wheles/2;
 80016b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <Forward_Kinematic+0x158>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	Kinematic_Matlab_A->w_Real = ((RPM_R-RPM_L)*Kinematic_Matlab_A->Ratio_WR_WL*R_Wheles)/(2*Khoang_cach_hai_banh);
 80016dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <Forward_Kinematic+0x158>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Forward_Kinematic+0x15c>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	Kinematic_Matlab_A->theta = Kinematic_Matlab_A->theta + Kinematic_Matlab_A->w_Real *Time_Interrupt;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	ed93 7a05 	vldr	s14, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <Forward_Kinematic+0x160>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edc3 7a05 	vstr	s15, [r3, #20]
	Kinematic_Matlab_A->x_dot_Real = Kinematic_Matlab_A->vel_Real * cos(Kinematic_Matlab_A->theta);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe feb3 	bl	80004a0 <__aeabi_f2d>
 800173a:	4604      	mov	r4, r0
 800173c:	460d      	mov	r5, r1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feac 	bl	80004a0 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	ec43 2b10 	vmov	d0, r2, r3
 8001750:	f004 ff26 	bl	80065a0 <cos>
 8001754:	ec53 2b10 	vmov	r2, r3, d0
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fef8 	bl	8000550 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9ea 	bl	8000b40 <__aeabi_d2f>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	651a      	str	r2, [r3, #80]	; 0x50
	Kinematic_Matlab_A->y_dot_Real = Kinematic_Matlab_A->vel_Real * sin(Kinematic_Matlab_A->theta);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe92 	bl	80004a0 <__aeabi_f2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe8b 	bl	80004a0 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	ec43 2b10 	vmov	d0, r2, r3
 8001792:	f004 ff59 	bl	8006648 <sin>
 8001796:	ec53 2b10 	vmov	r2, r3, d0
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe fed7 	bl	8000550 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f9c9 	bl	8000b40 <__aeabi_d2f>
 80017ae:	4602      	mov	r2, r0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	f3af 8000 	nop.w
 80017c0:	20000010 	.word	0x20000010
 80017c4:	20000014 	.word	0x20000014
 80017c8:	2000001c 	.word	0x2000001c
 80017cc:	f37c4b99 	.word	0xf37c4b99
 80017d0:	3fbacee9 	.word	0x3fbacee9

080017d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_UART_RxCpltCallback+0x80>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d131      	bne.n	800184a <HAL_UART_RxCpltCallback+0x76>
	{
		if(Data_Received[0] == 'F')
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0x84>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b46      	cmp	r3, #70	; 0x46
 80017ec:	d106      	bne.n	80017fc <HAL_UART_RxCpltCallback+0x28>
		{
			SP_RPM_A = 30;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_UART_RxCpltCallback+0x88>)
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_UART_RxCpltCallback+0x8c>)
 80017f2:	601a      	str	r2, [r3, #0]
			SP_RPM_B = 30;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_UART_RxCpltCallback+0x90>)
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_UART_RxCpltCallback+0x8c>)
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e021      	b.n	8001840 <HAL_UART_RxCpltCallback+0x6c>
		}
		else if(Data_Received[0] == 'R')
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_UART_RxCpltCallback+0x84>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b52      	cmp	r3, #82	; 0x52
 8001802:	d106      	bne.n	8001812 <HAL_UART_RxCpltCallback+0x3e>
		{
			SP_RPM_A = 30;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_UART_RxCpltCallback+0x88>)
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_UART_RxCpltCallback+0x8c>)
 8001808:	601a      	str	r2, [r3, #0]
			SP_RPM_B = 12;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_UART_RxCpltCallback+0x90>)
 800180c:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0x94>)
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e016      	b.n	8001840 <HAL_UART_RxCpltCallback+0x6c>
		}
		else if(Data_Received[0] == 'L')
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_UART_RxCpltCallback+0x84>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b4c      	cmp	r3, #76	; 0x4c
 8001818:	d106      	bne.n	8001828 <HAL_UART_RxCpltCallback+0x54>
		{
			SP_RPM_A = 12;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0x88>)
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <HAL_UART_RxCpltCallback+0x94>)
 800181e:	601a      	str	r2, [r3, #0]
			SP_RPM_B = 30;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_UART_RxCpltCallback+0x90>)
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_UART_RxCpltCallback+0x8c>)
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00b      	b.n	8001840 <HAL_UART_RxCpltCallback+0x6c>
		}
		else if(Data_Received[0] == 'S')
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_UART_RxCpltCallback+0x84>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b53      	cmp	r3, #83	; 0x53
 800182e:	d107      	bne.n	8001840 <HAL_UART_RxCpltCallback+0x6c>
		{
			SP_RPM_A = 0;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_UART_RxCpltCallback+0x88>)
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
			SP_RPM_B = 0;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_UART_RxCpltCallback+0x90>)
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, &Data_Received[0], 1);
 8001840:	2201      	movs	r2, #1
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <HAL_UART_RxCpltCallback+0x84>)
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <HAL_UART_RxCpltCallback+0x98>)
 8001846:	f003 feb2 	bl	80055ae <HAL_UART_Receive_IT>

	}

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40011000 	.word	0x40011000
 8001858:	200003d4 	.word	0x200003d4
 800185c:	200005ac 	.word	0x200005ac
 8001860:	41f00000 	.word	0x41f00000
 8001864:	200005b0 	.word	0x200005b0
 8001868:	41400000 	.word	0x41400000
 800186c:	2000033c 	.word	0x2000033c

08001870 <Inverse_Kinematic>:
//// Calculate wheel velocities
//WR = v/R + (L*w)/R;
//WL = v/R - (L*w)/R;
//////////////////////////////////////////////////////////////
void Inverse_Kinematic(float SP_WL, float SP_WR, struct Kinematic_Matlab* Kinematic_Matlab_A, struct PID_Ver_1* PID_X, struct PID_Ver_1* PID_Y)
{
 8001870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	ed87 0a05 	vstr	s0, [r7, #20]
 800187c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	Kinematic_Matlab_A -> vel = sqrt(pow(Kinematic_Matlab_A->x_dot, 2) + pow(Kinematic_Matlab_A->y_dot, 2));
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe08 	bl	80004a0 <__aeabi_f2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001a10 <Inverse_Kinematic+0x1a0>
 8001898:	ec43 2b10 	vmov	d0, r2, r3
 800189c:	f004 fde4 	bl	8006468 <pow>
 80018a0:	ec55 4b10 	vmov	r4, r5, d0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fdf9 	bl	80004a0 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8001a10 <Inverse_Kinematic+0x1a0>
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	f004 fdd5 	bl	8006468 <pow>
 80018be:	ec53 2b10 	vmov	r2, r3, d0
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fc8d 	bl	80001e4 <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	ec43 2b17 	vmov	d7, r2, r3
 80018d2:	eeb0 0a47 	vmov.f32	s0, s14
 80018d6:	eef0 0a67 	vmov.f32	s1, s15
 80018da:	f004 fe35 	bl	8006548 <sqrt>
 80018de:	ec53 2b10 	vmov	r2, r3, d0
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f92b 	bl	8000b40 <__aeabi_d2f>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]
	Kinematic_Matlab_A -> theta_dot = (1 / Kinematic_Matlab_A -> b) + PID_X->Out_PWM * cos(Kinematic_Matlab_A->theta) - PID_Y->Out_PWM * sin(Kinematic_Matlab_A->theta);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80018f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018fe:	ee16 0a90 	vmov	r0, s13
 8001902:	f7fe fdcd 	bl	80004a0 <__aeabi_f2d>
 8001906:	4604      	mov	r4, r0
 8001908:	460d      	mov	r5, r1
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fdb4 	bl	800047c <__aeabi_i2d>
 8001914:	4680      	mov	r8, r0
 8001916:	4689      	mov	r9, r1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fdbf 	bl	80004a0 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ec43 2b10 	vmov	d0, r2, r3
 800192a:	f004 fe39 	bl	80065a0 <cos>
 800192e:	ec53 2b10 	vmov	r2, r3, d0
 8001932:	4640      	mov	r0, r8
 8001934:	4649      	mov	r1, r9
 8001936:	f7fe fe0b 	bl	8000550 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	f7fe fc4f 	bl	80001e4 <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4690      	mov	r8, r2
 800194c:	4699      	mov	r9, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd92 	bl	800047c <__aeabi_i2d>
 8001958:	4604      	mov	r4, r0
 800195a:	460d      	mov	r5, r1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fd9d 	bl	80004a0 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ec43 2b10 	vmov	d0, r2, r3
 800196e:	f004 fe6b 	bl	8006648 <sin>
 8001972:	ec53 2b10 	vmov	r2, r3, d0
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fde9 	bl	8000550 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4640      	mov	r0, r8
 8001984:	4649      	mov	r1, r9
 8001986:	f7fe fc2b 	bl	80001e0 <__aeabi_dsub>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f8d5 	bl	8000b40 <__aeabi_d2f>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	619a      	str	r2, [r3, #24]
	SP_WR = (Kinematic_Matlab_A -> vel / R_Wheles) + (Khoang_cach_hai_banh*Kinematic_Matlab_A -> theta_dot)/R_Wheles;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 6a00 	vldr	s13, [r3]
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <Inverse_Kinematic+0x1a8>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <Inverse_Kinematic+0x1ac>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <Inverse_Kinematic+0x1a8>)
 80019be:	edd3 6a00 	vldr	s13, [r3]
 80019c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ca:	edc7 7a04 	vstr	s15, [r7, #16]
	SP_WL = (Kinematic_Matlab_A -> vel / R_Wheles) - (Khoang_cach_hai_banh*Kinematic_Matlab_A -> theta_dot)/R_Wheles;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <Inverse_Kinematic+0x1a8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <Inverse_Kinematic+0x1ac>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <Inverse_Kinematic+0x1a8>)
 80019f0:	edd3 6a00 	vldr	s13, [r3]
 80019f4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	edc7 7a05 	vstr	s15, [r7, #20]
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40000000 	.word	0x40000000
 8001a18:	20000010 	.word	0x20000010
 8001a1c:	20000014 	.word	0x20000014

08001a20 <Bit_converter_to_direction>:
// Chuyen tien lui thanh bit
// Bit IN1 IN2 IN3 IN4 la cac chan In cua Driver để xác định chi�?u động cơ lần lượt là Array 0 1 2 3
// Nhập vào mã hex để ra luôn giá trị các chi�?u quay của xe
// Các mã và hướng {Tiến 1010 = 0x0A ;Lùi 0101 = 0x05)
void Bit_converter_to_direction(uint8_t Hex)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
	uint8_t Ma_code = 0x01;  // Mã code để (and) ra giá trị 0x01
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 4; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	e031      	b.n	8001a98 <Bit_converter_to_direction+0x78>
	{
		// Mỗi lần chuyển giá trị sẽ dịch trái 1 bit
		CODE[i] = (Hex & Ma_code);
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <Bit_converter_to_direction+0x88>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if((Hex & Ma_code) == 0)
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <Bit_converter_to_direction+0x50>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_Array[i], SET);
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <Bit_converter_to_direction+0x8c>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <Bit_converter_to_direction+0x90>)
 8001a60:	f001 ffa6 	bl	80039b0 <HAL_GPIO_WritePin>
			Array_1[i] = 0;
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <Bit_converter_to_direction+0x94>)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e00d      	b.n	8001a8c <Bit_converter_to_direction+0x6c>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_Array[i], RESET);
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <Bit_converter_to_direction+0x8c>)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <Bit_converter_to_direction+0x90>)
 8001a7e:	f001 ff97 	bl	80039b0 <HAL_GPIO_WritePin>
			Array_1[i] = 1;
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <Bit_converter_to_direction+0x94>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4413      	add	r3, r2
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
		}

		Ma_code <<= 1;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 4; i++)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	ddca      	ble.n	8001a34 <Bit_converter_to_direction+0x14>


	}
}
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200003c8 	.word	0x200003c8
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	200003c4 	.word	0x200003c4

08001ab8 <Direction_Wheles>:

// Chi�?u quay của xe
// Tiến là 0 ; Lùi là 1
void Direction_Wheles(uint8_t Tien_lui)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	if(Tien_lui == 0)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <Direction_Wheles+0x18>
	{
		Bit_converter_to_direction(0x0A);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f7ff ffa9 	bl	8001a20 <Bit_converter_to_direction>
	else if(Tien_lui == 1)
	{
		Bit_converter_to_direction(0x05);
	}

}
 8001ace:	e005      	b.n	8001adc <Direction_Wheles+0x24>
	else if(Tien_lui == 1)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <Direction_Wheles+0x24>
		Bit_converter_to_direction(0x05);
 8001ad6:	2005      	movs	r0, #5
 8001ad8:	f7ff ffa2 	bl	8001a20 <Bit_converter_to_direction>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <Average_5_times>:



// Tinh trung binh RPM
float Average_5_times(float Var, float Temp[20])
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aee:	6038      	str	r0, [r7, #0]
    float sum = 0, Out_Average_Var; // Initialize sum to 0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 19; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e019      	b.n	8001b30 <Average_5_times+0x4c>
    {
        Temp[i] = Temp[i + 1];  // gán giá trị hiện tại vào giá trị trước
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	3301      	adds	r3, #1
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	441a      	add	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	440b      	add	r3, r1
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	601a      	str	r2, [r3, #0]
        sum += Temp[i];        // Cộng dần các giá trị vừa lưu
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < 19; i++)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	dde2      	ble.n	8001afc <Average_5_times+0x18>
    }
    // Gán giá trị mới nhất
    Temp[19] = Var;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	334c      	adds	r3, #76	; 0x4c
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
    sum += Temp[19] ;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	334c      	adds	r3, #76	; 0x4c
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4e:	edc7 7a05 	vstr	s15, [r7, #20]
    // Tính trung bình
    Out_Average_Var = sum / 20;
 8001b52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b56:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	edc7 7a03 	vstr	s15, [r7, #12]
    return Out_Average_Var;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	ee07 3a90 	vmov	s15, r3
}
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <Anti_Windup>:


// Bộ antiwidup để tắt khâu tích luỹ khi nó vượt ngưỡng
float Anti_Windup(float Out_PWM, uint16_t HIGH_Limit, uint16_t LOW_Limit, float Kb)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b8a:	817b      	strh	r3, [r7, #10]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	813b      	strh	r3, [r7, #8]
    float e_reset = 0;
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
    float Ui_anti;

    if (Out_PWM > HIGH_Limit)
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	dd0b      	ble.n	8001bc6 <Anti_Windup+0x4e>
    {
        e_reset = (HIGH_Limit - Out_PWM );
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bc4:	e01a      	b.n	8001bfc <Anti_Windup+0x84>
    }
    else if (Out_PWM < LOW_Limit)
 8001bc6:	893b      	ldrh	r3, [r7, #8]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d50b      	bpl.n	8001bf6 <Anti_Windup+0x7e>
    {
        e_reset = (LOW_Limit - Out_PWM);
 8001bde:	893b      	ldrh	r3, [r7, #8]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bf4:	e002      	b.n	8001bfc <Anti_Windup+0x84>
    }
    else
    {
        e_reset = 0;
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
//    if (e_reset> pow(10,6))
//    {
//        Ui_anti = pow(10,6);  // or set to a default value
//    }

        Ui_anti = Time_Interrupt * e_reset * Kb;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <Anti_Windup+0xb4>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	edc7 7a04 	vstr	s15, [r7, #16]


    return Ui_anti;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	ee07 3a90 	vmov	s15, r3
}
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000001c 	.word	0x2000001c

08001c30 <HAL_TIM_PeriodElapsedCallback>:

// Ngat Timer PID
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM5)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4aad      	ldr	r2, [pc, #692]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	f040 84fd 	bne.w	8002640 <HAL_TIM_PeriodElapsedCallback+0xa10>
	{
		// �?�?c Encoder B
		Encoder_B = __HAL_TIM_GET_COUNTER(&htim4);
 8001c46:	4bac      	ldr	r3, [pc, #688]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	4aab      	ldr	r2, [pc, #684]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001c4e:	6013      	str	r3, [r2, #0]
		// Lấy chênh lệch 2 khoảng Encoder
		delta_B = abs(Encoder_B - Encoder_B_Pre);
 8001c50:	4baa      	ldr	r3, [pc, #680]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4baa      	ldr	r3, [pc, #680]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bfb8      	it	lt
 8001c5e:	425b      	neglt	r3, r3
 8001c60:	4aa8      	ldr	r2, [pc, #672]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001c62:	6013      	str	r3, [r2, #0]
		// Nếu giá trị chênh lẹch lớn hơn nữa số xung nữa vòng là vô lý nên lấy giá trị tràn trừ cho chênh lệch
		if (delta_B  >= __HAL_TIM_GET_AUTORELOAD(&htim4) / 2)
 8001c64:	4ba4      	ldr	r3, [pc, #656]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	4aa5      	ldr	r2, [pc, #660]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d808      	bhi.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			delta_B = __HAL_TIM_GET_AUTORELOAD(&htim4) - delta_B;
 8001c74:	4ba0      	ldr	r3, [pc, #640]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	4aa2      	ldr	r2, [pc, #648]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4ba0      	ldr	r3, [pc, #640]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001c84:	601a      	str	r2, [r3, #0]
		}
		//Tính giá trị RPM hiện tại
		RPM_Avg_B = (delta_B) / (Pulse_Per_Round * 4 * Time_Interrupt) * 60;
 8001c86:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c92:	4b9d      	ldr	r3, [pc, #628]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca0:	4b9a      	ldr	r3, [pc, #616]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cae:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001f10 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb6:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001cb8:	edc3 7a00 	vstr	s15, [r3]
		// Tính trung bình
		RPM_B = Average_5_times(RPM_Avg_B, sum_B);
 8001cbc:	4b95      	ldr	r3, [pc, #596]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	4895      	ldr	r0, [pc, #596]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	f7ff ff0c 	bl	8001ae4 <Average_5_times>
 8001ccc:	ee10 3a10 	vmov	r3, s0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fbe5 	bl	80004a0 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4990      	ldr	r1, [pc, #576]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]


		// �?�?c Encoder A
		Encoder_A = __HAL_TIM_GET_COUNTER(&htim3);
 8001ce0:	4b8f      	ldr	r3, [pc, #572]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	4a8f      	ldr	r2, [pc, #572]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ce8:	6013      	str	r3, [r2, #0]
		// Lấy chênh lệch 2 khoảng Encoder
		delta_A = abs(Encoder_A - Encoder_A_Pre);
 8001cea:	4b8e      	ldr	r3, [pc, #568]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b8e      	ldr	r3, [pc, #568]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bfb8      	it	lt
 8001cf8:	425b      	neglt	r3, r3
 8001cfa:	4a8c      	ldr	r2, [pc, #560]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001cfc:	6013      	str	r3, [r2, #0]
		// Nếu giá trị chênh lẹch lớn hơn nữa số xung nữa vòng là vô lý nên lấy giá trị tràn trừ cho chênh lệch
		if (delta_A  >= __HAL_TIM_GET_AUTORELOAD(&htim3) / 2)
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	4a89      	ldr	r2, [pc, #548]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d808      	bhi.n	8001d20 <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
			delta_A = __HAL_TIM_GET_AUTORELOAD(&htim3) - delta_A;
 8001d0e:	4b84      	ldr	r3, [pc, #528]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	4a85      	ldr	r2, [pc, #532]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001d1e:	601a      	str	r2, [r3, #0]
		}
		//Tính giá trị RPM hiện tại
		RPM_Avg_A = (delta_A) / (Pulse_Per_Round * 4 * Time_Interrupt) * 60;
 8001d20:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d2c:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3a:	4b74      	ldr	r3, [pc, #464]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d48:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001f10 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001d52:	edc3 7a00 	vstr	s15, [r3]
		// Tính trung bình
		RPM_A = Average_5_times(RPM_Avg_A, sum_A);
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	4875      	ldr	r0, [pc, #468]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	f7ff febf 	bl	8001ae4 <Average_5_times>
 8001d66:	ee10 3a10 	vmov	r3, s0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fb98 	bl	80004a0 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4970      	ldr	r1, [pc, #448]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d76:	e9c1 2300 	strd	r2, r3, [r1]


		// PID controller
		Error_A -> ek = (SP_RPM_A - RPM_A);
 8001d7a:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb8e 	bl	80004a0 <__aeabi_f2d>
 8001d84:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fa29 	bl	80001e0 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	496b      	ldr	r1, [pc, #428]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001d94:	680c      	ldr	r4, [r1, #0]
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe fed1 	bl	8000b40 <__aeabi_d2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6023      	str	r3, [r4, #0]
		Error_B -> ek = (SP_RPM_B - RPM_B);
 8001da2:	4b68      	ldr	r3, [pc, #416]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fb7a 	bl	80004a0 <__aeabi_f2d>
 8001dac:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fa15 	bl	80001e0 <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4963      	ldr	r1, [pc, #396]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001dbc:	680c      	ldr	r4, [r1, #0]
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe febd 	bl	8000b40 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6023      	str	r3, [r4, #0]

		// Kenh A
		PID_A -> Up =  PID_A -> Kp * Error_A -> ek;
 8001dca:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	edc3 7a03 	vstr	s15, [r3, #12]
		PID_A -> Ui = PID_A -> Ui_1 + PID_A -> Ki * Error_A -> ek_1 * Time_Interrupt + PID_A -> Ui_Antiwindup;
 8001de6:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001df6:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	ee17 0a90 	vmov	r0, s15
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe f9e2 	bl	80001e4 <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e30:	4c46      	ldr	r4, [pc, #280]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e32:	6824      	ldr	r4, [r4, #0]
 8001e34:	f7fe f9d6 	bl	80001e4 <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
		PID_A -> Ud = PID_A -> Ud_1 * (Error_A -> ek - Error_A -> ek_1);
 8001e40:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	edd3 6a00 	vldr	s13, [r3]
 8001e50:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e64:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// Antiwindup
		PID_A -> Ui_Antiwindup = Anti_Windup(PID_A -> Temp_PWM, HIGH_Limit_PWM, LOW_Limit_PWM, Kb);
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe fe64 	bl	8000b40 <__aeabi_d2f>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	4a35      	ldr	r2, [pc, #212]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001e80:	8812      	ldrh	r2, [r2, #0]
 8001e82:	4935      	ldr	r1, [pc, #212]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001e84:	edd1 7a00 	vldr	s15, [r1]
 8001e88:	eef0 0a67 	vmov.f32	s1, s15
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	ee00 4a10 	vmov	s0, r4
 8001e94:	f7ff fe70 	bl	8001b78 <Anti_Windup>
 8001e98:	ee10 2a10 	vmov	r2, s0
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e9e:	681c      	ldr	r4, [r3, #0]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7fe fafd 	bl	80004a0 <__aeabi_f2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
		PID_A -> Temp_PWM = PID_A -> Up + PID_A -> Ui + PID_A -> Ud;
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe faf3 	bl	80004a0 <__aeabi_f2d>
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ec2:	f7fe f98f 	bl	80001e4 <__adddf3>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4690      	mov	r8, r2
 8001ecc:	4699      	mov	r9, r3
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	491b      	ldr	r1, [pc, #108]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001ee0:	680c      	ldr	r4, [r1, #0]
 8001ee2:	4640      	mov	r0, r8
 8001ee4:	4649      	mov	r1, r9
 8001ee6:	f7fe f97d 	bl	80001e4 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8001ef2:	e033      	b.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x32c>
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	200001a4 	.word	0x200001a4
 8001efc:	200003f8 	.word	0x200003f8
 8001f00:	200003fc 	.word	0x200003fc
 8001f04:	20000664 	.word	0x20000664
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	2000001c 	.word	0x2000001c
 8001f10:	42700000 	.word	0x42700000
 8001f14:	2000065c 	.word	0x2000065c
 8001f18:	20000608 	.word	0x20000608
 8001f1c:	200003e8 	.word	0x200003e8
 8001f20:	2000015c 	.word	0x2000015c
 8001f24:	200003f0 	.word	0x200003f0
 8001f28:	200003f4 	.word	0x200003f4
 8001f2c:	20000660 	.word	0x20000660
 8001f30:	20000658 	.word	0x20000658
 8001f34:	200005b8 	.word	0x200005b8
 8001f38:	200003e0 	.word	0x200003e0
 8001f3c:	200005ac 	.word	0x200005ac
 8001f40:	20000028 	.word	0x20000028
 8001f44:	200005b0 	.word	0x200005b0
 8001f48:	2000002c 	.word	0x2000002c
 8001f4c:	20000020 	.word	0x20000020
 8001f50:	20000018 	.word	0x20000018
 8001f54:	200005b4 	.word	0x200005b4
 8001f58:	20000008 	.word	0x20000008

		PID_A -> Out_PWM = round(PID_A -> Temp_PWM);
 8001f5c:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	f004 fcaa 	bl	80068c4 <round>
 8001f70:	ec51 0b10 	vmov	r0, r1, d0
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001f76:	681c      	ldr	r4, [r3, #0]
 8001f78:	f7fe fdc2 	bl	8000b00 <__aeabi_d2uiz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8723      	strh	r3, [r4, #56]	; 0x38

			if(PID_A -> Out_PWM >= 999)
 8001f82:	4b65      	ldr	r3, [pc, #404]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f88:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d905      	bls.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0x36c>
			{
				PID_A -> Out_PWM = 999;
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f98:	871a      	strh	r2, [r3, #56]	; 0x38
 8001f9a:	e008      	b.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x37e>
			}
			else if (PID_A -> Out_PWM <=0 )
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x37e>
			{
				PID_A -> Out_PWM = 0;
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	871a      	strh	r2, [r3, #56]	; 0x38
			}


		// Kenh B
		PID_B -> Up =  PID_B -> Kp * Error_B -> ek;
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	ed93 7a00 	vldr	s14, [r3]
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	edc3 7a03 	vstr	s15, [r3, #12]
		PID_B -> Ui = PID_B -> Ui_1 + PID_B -> Ki * Error_B -> ek_1 * Time_Interrupt + PID_B -> Ui_Antiwindup;
 8001fca:	4b54      	ldr	r3, [pc, #336]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001fd2:	4b52      	ldr	r3, [pc, #328]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fda:	4b51      	ldr	r3, [pc, #324]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	ee17 0a90 	vmov	r0, s15
 8001ff4:	f7fe fa54 	bl	80004a0 <__aeabi_f2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe f8f0 	bl	80001e4 <__adddf3>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002014:	4c41      	ldr	r4, [pc, #260]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8002016:	6824      	ldr	r4, [r4, #0]
 8002018:	f7fe f8e4 	bl	80001e4 <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	e9c4 2306 	strd	r2, r3, [r4, #24]
		PID_B -> Ud = PID_B -> Ud_1 * (Error_B -> ek - Error_B -> ek_1);
 8002024:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800202c:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	edd3 6a00 	vldr	s13, [r3]
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	edd3 7a01 	vldr	s15, [r3, #4]
 800203c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002040:	4b36      	ldr	r3, [pc, #216]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002048:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		PID_B -> Temp_PWM = PID_B -> Up + PID_B -> Ui + PID_B -> Ud;
 800204c:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa24 	bl	80004a0 <__aeabi_f2d>
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002060:	f7fe f8c0 	bl	80001e4 <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4690      	mov	r8, r2
 800206a:	4699      	mov	r9, r3
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa14 	bl	80004a0 <__aeabi_f2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4927      	ldr	r1, [pc, #156]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800207e:	680c      	ldr	r4, [r1, #0]
 8002080:	4640      	mov	r0, r8
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe f8ae 	bl	80001e4 <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
		// Antiwindup
		PID_B -> Ui_Antiwindup = Anti_Windup(PID_B -> Temp_PWM, HIGH_Limit_PWM, LOW_Limit_PWM, Kb);
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd50 	bl	8000b40 <__aeabi_d2f>
 80020a0:	4604      	mov	r4, r0
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	4a21      	ldr	r2, [pc, #132]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80020a8:	8812      	ldrh	r2, [r2, #0]
 80020aa:	4921      	ldr	r1, [pc, #132]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80020ac:	edd1 7a00 	vldr	s15, [r1]
 80020b0:	eef0 0a67 	vmov.f32	s1, s15
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	ee00 4a10 	vmov	s0, r4
 80020bc:	f7ff fd5c 	bl	8001b78 <Anti_Windup>
 80020c0:	ee10 2a10 	vmov	r2, s0
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80020c6:	681c      	ldr	r4, [r3, #0]
 80020c8:	4610      	mov	r0, r2
 80020ca:	f7fe f9e9 	bl	80004a0 <__aeabi_f2d>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
		PID_B -> Out_PWM = round(PID_B -> Temp_PWM);
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80020de:	eeb0 0a47 	vmov.f32	s0, s14
 80020e2:	eef0 0a67 	vmov.f32	s1, s15
 80020e6:	f004 fbed 	bl	80068c4 <round>
 80020ea:	ec51 0b10 	vmov	r0, r1, d0
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80020f0:	681c      	ldr	r4, [r3, #0]
 80020f2:	f7fe fd05 	bl	8000b00 <__aeabi_d2uiz>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8723      	strh	r3, [r4, #56]	; 0x38

			if(PID_B -> Out_PWM >= 999)
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002102:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002106:	4293      	cmp	r3, r2
 8002108:	d914      	bls.n	8002134 <HAL_TIM_PeriodElapsedCallback+0x504>
			{
				PID_B -> Out_PWM = 999;
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002112:	871a      	strh	r2, [r3, #56]	; 0x38
 8002114:	e017      	b.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x516>
 8002116:	bf00      	nop
 8002118:	20000020 	.word	0x20000020
 800211c:	20000024 	.word	0x20000024
 8002120:	2000002c 	.word	0x2000002c
 8002124:	2000001c 	.word	0x2000001c
 8002128:	20000018 	.word	0x20000018
 800212c:	200005b4 	.word	0x200005b4
 8002130:	20000008 	.word	0x20000008
			}
			else if (PID_B -> Out_PWM <=0 )
 8002134:	4ba5      	ldr	r3, [pc, #660]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x516>
			{
				PID_B -> Out_PWM = 0;
 800213e:	4ba3      	ldr	r3, [pc, #652]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	871a      	strh	r2, [r3, #56]	; 0x38
			}

			// Gan lai gia tri
			Error_A -> ek_1 = Error_A -> ek;
 8002146:	4ba2      	ldr	r3, [pc, #648]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4ba1      	ldr	r3, [pc, #644]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	605a      	str	r2, [r3, #4]
			Error_B -> ek_1 = Error_B -> ek;
 8002152:	4ba0      	ldr	r3, [pc, #640]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b9f      	ldr	r3, [pc, #636]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	605a      	str	r2, [r3, #4]
			PID_A -> Ui_1 = PID_A -> Ui;
 800215e:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a9d      	ldr	r2, [pc, #628]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002164:	6811      	ldr	r1, [r2, #0]
 8002166:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800216a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PID_B -> Ui_1 = PID_B -> Ui;
 800216e:	4b97      	ldr	r3, [pc, #604]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8002174:	6811      	ldr	r1, [r2, #0]
 8002176:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800217a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PID_A -> Ud_1 = PID_A -> Ud;
 800217e:	4b96      	ldr	r3, [pc, #600]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b95      	ldr	r3, [pc, #596]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
			PID_B -> Ud_1 = PID_B -> Ud;
 800218a:	4b90      	ldr	r3, [pc, #576]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b8f      	ldr	r3, [pc, #572]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c

			Encoder_A_Pre = Encoder_A;
 8002196:	4b91      	ldr	r3, [pc, #580]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a91      	ldr	r2, [pc, #580]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 800219c:	6013      	str	r3, [r2, #0]
			Encoder_B_Pre = Encoder_B;
 800219e:	4b91      	ldr	r3, [pc, #580]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a91      	ldr	r2, [pc, #580]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80021a4:	6013      	str	r3, [r2, #0]


//			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)Output_PWM_A, 1);
//			HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)Output_PWM_B, 1);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PID_A -> Out_PWM);
 80021a6:	4b8c      	ldr	r3, [pc, #560]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80021ac:	4b8f      	ldr	r3, [pc, #572]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,PID_B -> Out_PWM);
 80021b2:	4b86      	ldr	r3, [pc, #536]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80021b8:	4b8d      	ldr	r3, [pc, #564]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
//			Kinematic_Matlab_A->w1 = ((Kinematic_Matlab_A->ay1*Kinematic_Matlab_A->x_dot) - (Kinematic_Matlab_A->ax1*Kinematic_Matlab_A->y1_dot))/(pow(Kinematic_Matlab_A->x_dot, 2)+pow(Kinematic_Matlab_A->y_dot, 2));
//			Kinematic_Matlab_A->x1_dot = Kinematic_Matlab_A->x_dot - Kinematic_Matlab_A->b*Kinematic_Matlab_A->w1*sin(Kinematic_Matlab_A->theta);
//			Kinematic_Matlab_A->y1_dot = Kinematic_Matlab_A->y_dot + Kinematic_Matlab_A->b*Kinematic_Matlab_A->w1*cos(Kinematic_Matlab_A->theta);

			// PID X,Y,Theta controller
			Error_X -> ek = (Kinematic_Matlab_A->x_QH_welding - Kinematic_Matlab_A->x_Real);
 80021be:	4b8d      	ldr	r3, [pc, #564]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80021ce:	4b8a      	ldr	r3, [pc, #552]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d6:	edc3 7a00 	vstr	s15, [r3]
			Error_Y -> ek = (Kinematic_Matlab_A->y_QH_welding - Kinematic_Matlab_A->y_Real);
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80021e2:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80021ea:	4b84      	ldr	r3, [pc, #528]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f2:	edc3 7a00 	vstr	s15, [r3]
			// Toạ độ X
			PID_X -> Up =  PID_X -> Kp * Error_X -> ek;
 80021f6:	4b82      	ldr	r3, [pc, #520]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	4b7e      	ldr	r3, [pc, #504]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	edc3 7a03 	vstr	s15, [r3, #12]
			PID_X -> Ui = PID_X -> Ui_1 + PID_X -> Ki * Error_X -> ek_1 * Time_Interrupt + PID_X -> Ui_Antiwindup;
 8002212:	4b7b      	ldr	r3, [pc, #492]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800221a:	4b79      	ldr	r3, [pc, #484]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002222:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	edd3 7a01 	vldr	s15, [r3, #4]
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002238:	ee17 0a90 	vmov	r0, s15
 800223c:	f7fe f930 	bl	80004a0 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fd ffcc 	bl	80001e4 <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800225c:	4c68      	ldr	r4, [pc, #416]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800225e:	6824      	ldr	r4, [r4, #0]
 8002260:	f7fd ffc0 	bl	80001e4 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	e9c4 2306 	strd	r2, r3, [r4, #24]
			PID_X -> Ud = PID_X -> Ud_1 * (Error_X -> ek - Error_X -> ek_1);
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002274:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	edd3 6a00 	vldr	s13, [r3]
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	edd3 7a01 	vldr	s15, [r3, #4]
 8002284:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002288:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002290:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			// Antiwindup
			PID_X -> Ui_Antiwindup = Anti_Windup(PID_X -> Temp_PWM, HIGH_Limit_PWM, LOW_Limit_PWM, Kb);
 8002294:	4b5a      	ldr	r3, [pc, #360]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc4e 	bl	8000b40 <__aeabi_d2f>
 80022a4:	4604      	mov	r4, r0
 80022a6:	4b58      	ldr	r3, [pc, #352]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 80022ac:	8812      	ldrh	r2, [r2, #0]
 80022ae:	4958      	ldr	r1, [pc, #352]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 80022b0:	edd1 7a00 	vldr	s15, [r1]
 80022b4:	eef0 0a67 	vmov.f32	s1, s15
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	ee00 4a10 	vmov	s0, r4
 80022c0:	f7ff fc5a 	bl	8001b78 <Anti_Windup>
 80022c4:	ee10 2a10 	vmov	r2, s0
 80022c8:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 80022ca:	681c      	ldr	r4, [r3, #0]
 80022cc:	4610      	mov	r0, r2
 80022ce:	f7fe f8e7 	bl	80004a0 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
			PID_X -> Temp_PWM = PID_X -> Up + PID_X -> Ui + PID_X -> Ud;
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f8dd 	bl	80004a0 <__aeabi_f2d>
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022ee:	f7fd ff79 	bl	80001e4 <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4690      	mov	r8, r2
 80022f8:	4699      	mov	r9, r3
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8cd 	bl	80004a0 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	493d      	ldr	r1, [pc, #244]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800230c:	680c      	ldr	r4, [r1, #0]
 800230e:	4640      	mov	r0, r8
 8002310:	4649      	mov	r1, r9
 8002312:	f7fd ff67 	bl	80001e4 <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
			PID_X -> Out_PWM = round(PID_X -> Temp_PWM);
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002326:	eeb0 0a47 	vmov.f32	s0, s14
 800232a:	eef0 0a67 	vmov.f32	s1, s15
 800232e:	f004 fac9 	bl	80068c4 <round>
 8002332:	ec51 0b10 	vmov	r0, r1, d0
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002338:	681c      	ldr	r4, [r3, #0]
 800233a:	f7fe fbe1 	bl	8000b00 <__aeabi_d2uiz>
 800233e:	4603      	mov	r3, r0
 8002340:	b29b      	uxth	r3, r3
 8002342:	8723      	strh	r3, [r4, #56]	; 0x38
			// Toạ độ Y
			PID_Y -> Up =  PID_Y -> Kp * Error_Y -> ek;
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235c:	edc3 7a03 	vstr	s15, [r3, #12]
			PID_Y -> Ui = PID_Y -> Ui_1 + PID_Y -> Ki * Error_Y -> ek_1 * Time_Interrupt + PID_Y -> Ui_Antiwindup;
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	edd3 7a01 	vldr	s15, [r3, #4]
 8002378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	ee17 0a90 	vmov	r0, s15
 800238a:	f7fe f889 	bl	80004a0 <__aeabi_f2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f7fd ff25 	bl	80001e4 <__adddf3>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80023aa:	4c1a      	ldr	r4, [pc, #104]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 80023ac:	6824      	ldr	r4, [r4, #0]
 80023ae:	f7fd ff19 	bl	80001e4 <__adddf3>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	e9c4 2306 	strd	r2, r3, [r4, #24]
			PID_Y -> Ud = PID_Y -> Ud_1 * (Error_Y -> ek - Error_Y -> ek_1);
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	edd3 6a00 	vldr	s13, [r3]
 80023ca:	e025      	b.n	8002418 <HAL_TIM_PeriodElapsedCallback+0x7e8>
 80023cc:	20000024 	.word	0x20000024
 80023d0:	20000028 	.word	0x20000028
 80023d4:	2000002c 	.word	0x2000002c
 80023d8:	20000020 	.word	0x20000020
 80023dc:	200003f0 	.word	0x200003f0
 80023e0:	200003f4 	.word	0x200003f4
 80023e4:	200003f8 	.word	0x200003f8
 80023e8:	200003fc 	.word	0x200003fc
 80023ec:	200000cc 	.word	0x200000cc
 80023f0:	20000114 	.word	0x20000114
 80023f4:	20000040 	.word	0x20000040
 80023f8:	20000030 	.word	0x20000030
 80023fc:	20000034 	.word	0x20000034
 8002400:	20000038 	.word	0x20000038
 8002404:	2000001c 	.word	0x2000001c
 8002408:	20000018 	.word	0x20000018
 800240c:	200005b4 	.word	0x200005b4
 8002410:	20000008 	.word	0x20000008
 8002414:	2000003c 	.word	0x2000003c
 8002418:	4b8c      	ldr	r3, [pc, #560]	; (800264c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002420:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002424:	4b8a      	ldr	r3, [pc, #552]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			// Antiwindup
			PID_Y -> Ui_Antiwindup = Anti_Windup(PID_Y -> Temp_PWM, HIGH_Limit_PWM, LOW_Limit_PWM, Kb);
 8002430:	4b87      	ldr	r3, [pc, #540]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fb80 	bl	8000b40 <__aeabi_d2f>
 8002440:	4604      	mov	r4, r0
 8002442:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	4a84      	ldr	r2, [pc, #528]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	4984      	ldr	r1, [pc, #528]	; (800265c <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 800244c:	edd1 7a00 	vldr	s15, [r1]
 8002450:	eef0 0a67 	vmov.f32	s1, s15
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	ee00 4a10 	vmov	s0, r4
 800245c:	f7ff fb8c 	bl	8001b78 <Anti_Windup>
 8002460:	ee10 2a10 	vmov	r2, s0
 8002464:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8002466:	681c      	ldr	r4, [r3, #0]
 8002468:	4610      	mov	r0, r2
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
			PID_Y -> Temp_PWM = PID_Y -> Up + PID_Y -> Ui + PID_Y -> Ud;
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f80f 	bl	80004a0 <__aeabi_f2d>
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800248a:	f7fd feab 	bl	80001e4 <__adddf3>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4690      	mov	r8, r2
 8002494:	4699      	mov	r9, r3
 8002496:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd ffff 	bl	80004a0 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	496a      	ldr	r1, [pc, #424]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 80024a8:	680c      	ldr	r4, [r1, #0]
 80024aa:	4640      	mov	r0, r8
 80024ac:	4649      	mov	r1, r9
 80024ae:	f7fd fe99 	bl	80001e4 <__adddf3>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
			PID_Y -> Out_PWM = round(PID_Y -> Temp_PWM);
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80024c2:	eeb0 0a47 	vmov.f32	s0, s14
 80024c6:	eef0 0a67 	vmov.f32	s1, s15
 80024ca:	f004 f9fb 	bl	80068c4 <round>
 80024ce:	ec51 0b10 	vmov	r0, r1, d0
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 80024d4:	681c      	ldr	r4, [r3, #0]
 80024d6:	f7fe fb13 	bl	8000b00 <__aeabi_d2uiz>
 80024da:	4603      	mov	r3, r0
 80024dc:	b29b      	uxth	r3, r3
 80024de:	8723      	strh	r3, [r4, #56]	; 0x38

			Inverse_Kinematic(RPM_A, RPM_B, Kinematic_Matlab_A, PID_X, PID_Y);
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fb29 	bl	8000b40 <__aeabi_d2f>
 80024ee:	4604      	mov	r4, r0
 80024f0:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe fb21 	bl	8000b40 <__aeabi_d2f>
 80024fe:	4605      	mov	r5, r0
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a59      	ldr	r2, [pc, #356]	; (800266c <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002506:	6811      	ldr	r1, [r2, #0]
 8002508:	4a51      	ldr	r2, [pc, #324]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	ee00 5a90 	vmov	s1, r5
 8002512:	ee00 4a10 	vmov	s0, r4
 8002516:	f7ff f9ab 	bl	8001870 <Inverse_Kinematic>
			Forward_Kinematic(RPM_A, RPM_B, Kinematic_Matlab_A);
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb0c 	bl	8000b40 <__aeabi_d2f>
 8002528:	4604      	mov	r4, r0
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb04 	bl	8000b40 <__aeabi_d2f>
 8002538:	4602      	mov	r2, r0
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	ee00 2a90 	vmov	s1, r2
 8002544:	ee00 4a10 	vmov	s0, r4
 8002548:	f7ff f88e 	bl	8001668 <Forward_Kinematic>
			// Cập nhật giá trị mới
			Kinematic_Matlab_A->x_dot_Real = Kinematic_Matlab_A->vel_Real*cos(Kinematic_Matlab_A->theta);
 800254c:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ffa4 	bl	80004a0 <__aeabi_f2d>
 8002558:	4604      	mov	r4, r0
 800255a:	460d      	mov	r5, r1
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ff9c 	bl	80004a0 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	ec43 2b10 	vmov	d0, r2, r3
 8002570:	f004 f816 	bl	80065a0 <cos>
 8002574:	ec53 2b10 	vmov	r2, r3, d0
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fd ffe8 	bl	8000550 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4938      	ldr	r1, [pc, #224]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002586:	680c      	ldr	r4, [r1, #0]
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fad8 	bl	8000b40 <__aeabi_d2f>
 8002590:	4603      	mov	r3, r0
 8002592:	6523      	str	r3, [r4, #80]	; 0x50
			Kinematic_Matlab_A->y_dot_Real = Kinematic_Matlab_A->vel_Real*sin(Kinematic_Matlab_A->theta);
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd ff80 	bl	80004a0 <__aeabi_f2d>
 80025a0:	4604      	mov	r4, r0
 80025a2:	460d      	mov	r5, r1
 80025a4:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff78 	bl	80004a0 <__aeabi_f2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	ec43 2b10 	vmov	d0, r2, r3
 80025b8:	f004 f846 	bl	8006648 <sin>
 80025bc:	ec53 2b10 	vmov	r2, r3, d0
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	f7fd ffc4 	bl	8000550 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4926      	ldr	r1, [pc, #152]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80025ce:	680c      	ldr	r4, [r1, #0]
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fab4 	bl	8000b40 <__aeabi_d2f>
 80025d8:	4603      	mov	r3, r0
 80025da:	6563      	str	r3, [r4, #84]	; 0x54
			// Cập nhật giá trị theo tích phân
			Kinematic_Matlab_A->x_Real = Kinematic_Matlab_A->x_Real + Kinematic_Matlab_A->x_dot_Real * Time_Interrupt;
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			Kinematic_Matlab_A->y_Real = Kinematic_Matlab_A->y_Real  + Kinematic_Matlab_A->y_dot_Real * Time_Interrupt;
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			// Cập nhật x_dot, y_dot
			Kinematic_Matlab_A->x_dot = Kinematic_Matlab_A->x_dot_Real;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002632:	605a      	str	r2, [r3, #4]
			Kinematic_Matlab_A->y_dot = Kinematic_Matlab_A->y_dot_Real;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800263e:	609a      	str	r2, [r3, #8]
//		Kinematic_Matlab_A->y_Real = Kinematic_Matlab_A->y_dot_Real * Time_Interrupt;
//		// Cập nhật giá trị đầu hàn
//		Kinematic_Matlab_A->x_welding_Real = Kinematic_Matlab_A->x_Real + Kinematic_Matlab_A->b*cos(Kinematic_Matlab_A->theta);
//		Kinematic_Matlab_A->y_welding_Real = Kinematic_Matlab_A->y_Real + Kinematic_Matlab_A->b*sin(Kinematic_Matlab_A->theta);
	//}
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800264a:	bf00      	nop
 800264c:	20000034 	.word	0x20000034
 8002650:	2000003c 	.word	0x2000003c
 8002654:	20000018 	.word	0x20000018
 8002658:	200005b4 	.word	0x200005b4
 800265c:	20000008 	.word	0x20000008
 8002660:	200003e0 	.word	0x200003e0
 8002664:	200003e8 	.word	0x200003e8
 8002668:	20000040 	.word	0x20000040
 800266c:	20000038 	.word	0x20000038
 8002670:	2000001c 	.word	0x2000001c

08002674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800267c:	e7fe      	b.n	800267c <Error_Handler+0x8>
	...

08002680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_MspInit+0x4c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_MspInit+0x4c>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_MspInit+0x4c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <HAL_MspInit+0x4c>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a44      	ldr	r2, [pc, #272]	; (80027f0 <HAL_TIM_PWM_MspInit+0x120>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d13e      	bne.n	8002760 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_TIM_PWM_MspInit+0x124>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_TIM_PWM_MspInit+0x124>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_TIM_PWM_MspInit+0x124>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80026fe:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002700:	4a3e      	ldr	r2, [pc, #248]	; (80027fc <HAL_TIM_PWM_MspInit+0x12c>)
 8002702:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002704:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002706:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800270a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 800271a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002726:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002728:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 800272a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002742:	482d      	ldr	r0, [pc, #180]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002744:	f000 fc34 	bl	8002fb0 <HAL_DMA_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800274e:	f7ff ff91 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
 8002758:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <HAL_TIM_PWM_MspInit+0x128>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800275e:	e042      	b.n	80027e6 <HAL_TIM_PWM_MspInit+0x116>
  else if(htim_pwm->Instance==TIM2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d13d      	bne.n	80027e6 <HAL_TIM_PWM_MspInit+0x116>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_TIM_PWM_MspInit+0x124>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_TIM_PWM_MspInit+0x124>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_TIM_PWM_MspInit+0x124>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 8002788:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_TIM_PWM_MspInit+0x134>)
 800278a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 800278e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002792:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 8002796:	2240      	movs	r2, #64	; 0x40
 8002798:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027cc:	f000 fbf0 	bl	8002fb0 <HAL_DMA_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 80027d6:	f7ff ff4d 	bl	8002674 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_TIM_PWM_MspInit+0x130>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40023800 	.word	0x40023800
 80027f8:	2000027c 	.word	0x2000027c
 80027fc:	40026428 	.word	0x40026428
 8002800:	200002dc 	.word	0x200002dc
 8002804:	40026088 	.word	0x40026088

08002808 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_TIM_Encoder_MspInit+0x108>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d134      	bne.n	8002894 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a31      	ldr	r2, [pc, #196]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A1_Pin|Encoder_A2_Pin;
 8002862:	23c0      	movs	r3, #192	; 0xc0
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002872:	2302      	movs	r3, #2
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4826      	ldr	r0, [pc, #152]	; (8002918 <HAL_TIM_Encoder_MspInit+0x110>)
 800287e:	f000 ff13 	bl	80036a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	201d      	movs	r0, #29
 8002888:	f000 fb5b 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800288c:	201d      	movs	r0, #29
 800288e:	f000 fb74 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002892:	e038      	b.n	8002906 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_TIM_Encoder_MspInit+0x114>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d133      	bne.n	8002906 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_B1_Pin|Encoder_B2_Pin;
 80028d6:	23c0      	movs	r3, #192	; 0xc0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028de:	2301      	movs	r3, #1
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028e6:	2302      	movs	r3, #2
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4619      	mov	r1, r3
 80028f0:	480b      	ldr	r0, [pc, #44]	; (8002920 <HAL_TIM_Encoder_MspInit+0x118>)
 80028f2:	f000 fed9 	bl	80036a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201e      	movs	r0, #30
 80028fc:	f000 fb21 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002900:	201e      	movs	r0, #30
 8002902:	f000 fb3a 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3730      	adds	r7, #48	; 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40000400 	.word	0x40000400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000
 800291c:	40000800 	.word	0x40000800
 8002920:	40020400 	.word	0x40020400

08002924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_TIM_Base_MspInit+0x70>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d116      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_TIM_Base_MspInit+0x74>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_TIM_Base_MspInit+0x74>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_TIM_Base_MspInit+0x74>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2032      	movs	r0, #50	; 0x32
 8002958:	f000 faf3 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800295c:	2032      	movs	r0, #50	; 0x32
 800295e:	f000 fb0c 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002962:	e012      	b.n	800298a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_TIM_Base_MspInit+0x78>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10d      	bne.n	800298a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_TIM_Base_MspInit+0x74>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_TIM_Base_MspInit+0x74>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_TIM_Base_MspInit+0x74>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40023800 	.word	0x40023800
 800299c:	40014400 	.word	0x40014400

080029a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_TIM_MspPostInit+0xb0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d11f      	bne.n	8002a02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_TIM_MspPostInit+0xb4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_TIM_MspPostInit+0xb4>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_TIM_MspPostInit+0xb4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_A_Pin;
 80029de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_A_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4817      	ldr	r0, [pc, #92]	; (8002a58 <HAL_TIM_MspPostInit+0xb8>)
 80029fc:	f000 fe54 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a00:	e022      	b.n	8002a48 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d11d      	bne.n	8002a48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_TIM_MspPostInit+0xb4>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_TIM_MspPostInit+0xb4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_TIM_MspPostInit+0xb4>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_B_Pin;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <HAL_TIM_MspPostInit+0xb8>)
 8002a44:	f000 fe30 	bl	80036a8 <HAL_GPIO_Init>
}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <HAL_UART_MspInit+0xf8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d135      	bne.n	8002aea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a34      	ldr	r2, [pc, #208]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002a88:	f043 0310 	orr.w	r3, r3, #16
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ab6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4822      	ldr	r0, [pc, #136]	; (8002b5c <HAL_UART_MspInit+0x100>)
 8002ad4:	f000 fde8 	bl	80036a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	2025      	movs	r0, #37	; 0x25
 8002ade:	f000 fa30 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ae2:	2025      	movs	r0, #37	; 0x25
 8002ae4:	f000 fa49 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ae8:	e030      	b.n	8002b4c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_UART_MspInit+0x104>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d12b      	bne.n	8002b4c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	4619      	mov	r1, r3
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <HAL_UART_MspInit+0x100>)
 8002b48:	f000 fdae 	bl	80036a8 <HAL_GPIO_Init>
}
 8002b4c:	bf00      	nop
 8002b4e:	3730      	adds	r7, #48	; 0x30
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40011000 	.word	0x40011000
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40004400 	.word	0x40004400

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <NMI_Handler+0x4>

08002b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <HardFault_Handler+0x4>

08002b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <MemManage_Handler+0x4>

08002b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <BusFault_Handler+0x4>

08002b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <UsageFault_Handler+0x4>

08002b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb0:	f000 f8cc 	bl	8002d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <DMA1_Stream5_IRQHandler+0x10>)
 8002bbe:	f000 fb37 	bl	8003230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200002dc 	.word	0x200002dc

08002bcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <TIM3_IRQHandler+0x10>)
 8002bd2:	f001 fe45 	bl	8004860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000015c 	.word	0x2000015c

08002be0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <TIM4_IRQHandler+0x10>)
 8002be6:	f001 fe3b 	bl	8004860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200001a4 	.word	0x200001a4

08002bf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <USART1_IRQHandler+0x10>)
 8002bfa:	f002 fd09 	bl	8005610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000033c 	.word	0x2000033c

08002c08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <TIM5_IRQHandler+0x10>)
 8002c0e:	f001 fe27 	bl	8004860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200001ec 	.word	0x200001ec

08002c1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <DMA2_Stream1_IRQHandler+0x10>)
 8002c22:	f000 fb05 	bl	8003230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000027c 	.word	0x2000027c

08002c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <SystemInit+0x20>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SystemInit+0x20>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c5a:	490e      	ldr	r1, [pc, #56]	; (8002c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c60:	e002      	b.n	8002c68 <LoopCopyDataInit>

08002c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c66:	3304      	adds	r3, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c6c:	d3f9      	bcc.n	8002c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c70:	4c0b      	ldr	r4, [pc, #44]	; (8002ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c74:	e001      	b.n	8002c7a <LoopFillZerobss>

08002c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c78:	3204      	adds	r2, #4

08002c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c7c:	d3fb      	bcc.n	8002c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c7e:	f7ff ffd7 	bl	8002c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c82:	f003 fbcd 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c86:	f7fe f929 	bl	8000edc <main>
  bx  lr    
 8002c8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c94:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002c98:	08008630 	.word	0x08008630
  ldr r2, =_sbss
 8002c9c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002ca0:	200007a4 	.word	0x200007a4

08002ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <ADC_IRQHandler>
	...

08002ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <HAL_Init+0x40>)
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_Init+0x40>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_Init+0x40>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 f92b 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd6:	200f      	movs	r0, #15
 8002cd8:	f000 f808 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cdc:	f7ff fcd0 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x54>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f943 	bl	8002f96 <HAL_SYSTICK_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00e      	b.n	8002d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d80a      	bhi.n	8002d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f000 f90b 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d2c:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_InitTick+0x5c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000044 	.word	0x20000044
 8002d44:	2000004c 	.word	0x2000004c
 8002d48:	20000048 	.word	0x20000048

08002d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x20>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x24>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_IncTick+0x24>)
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000004c 	.word	0x2000004c
 8002d70:	20000668 	.word	0x20000668

08002d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_GetTick+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000668 	.word	0x20000668

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <__NVIC_EnableIRQ+0x38>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff29 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff3e 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff31 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff feda 	bl	8002d74 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e099      	b.n	8003100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	e00f      	b.n	800300e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7ff fec1 	bl	8002d74 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d908      	bls.n	800300e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e078      	b.n	8003100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e8      	bne.n	8002fee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <HAL_DMA_Init+0x158>)
 8003028:	4013      	ands	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b04      	cmp	r3, #4
 8003066:	d107      	bne.n	8003078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	4313      	orrs	r3, r2
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0307 	bic.w	r3, r3, #7
 800308e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d117      	bne.n	80030d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fa7b 	bl	80035b0 <DMA_CheckFifoParam>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ce:	2301      	movs	r3, #1
 80030d0:	e016      	b.n	8003100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa32 	bl	8003544 <DMA_CalcBaseAndBitshift>
 80030e0:	4603      	mov	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	223f      	movs	r2, #63	; 0x3f
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	f010803f 	.word	0xf010803f

0800310c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800311a:	f7ff fe2b 	bl	8002d74 <HAL_GetTick>
 800311e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d008      	beq.n	800313e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e052      	b.n	80031e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0216 	bic.w	r2, r2, #22
 800314c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_DMA_Abort+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318e:	e013      	b.n	80031b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003190:	f7ff fdf0 	bl	8002d74 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b05      	cmp	r3, #5
 800319c:	d90c      	bls.n	80031b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2203      	movs	r2, #3
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e015      	b.n	80031e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e4      	bne.n	8003190 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	223f      	movs	r2, #63	; 0x3f
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00c      	b.n	8003224 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800323c:	4b8e      	ldr	r3, [pc, #568]	; (8003478 <HAL_DMA_IRQHandler+0x248>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a8e      	ldr	r2, [pc, #568]	; (800347c <HAL_DMA_IRQHandler+0x24c>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2208      	movs	r2, #8
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01a      	beq.n	800329c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0204 	bic.w	r2, r2, #4
 8003282:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	2208      	movs	r2, #8
 800328a:	409a      	lsls	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	2201      	movs	r2, #1
 80032c0:	409a      	lsls	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	2204      	movs	r2, #4
 80032f6:	409a      	lsls	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2210      	movs	r2, #16
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d043      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03c      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2210      	movs	r2, #16
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d018      	beq.n	8003372 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d024      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
 800335e:	e01f      	b.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e016      	b.n	80033a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0208 	bic.w	r2, r2, #8
 800338e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2220      	movs	r2, #32
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 808f 	beq.w	80034d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8087 	beq.w	80034d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2220      	movs	r2, #32
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d136      	bne.n	8003448 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0216 	bic.w	r2, r2, #22
 80033e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <HAL_DMA_IRQHandler+0x1da>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0208 	bic.w	r2, r2, #8
 8003418:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	223f      	movs	r2, #63	; 0x3f
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	2b00      	cmp	r3, #0
 800343c:	d07e      	beq.n	800353c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
        }
        return;
 8003446:	e079      	b.n	800353c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01d      	beq.n	8003492 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	2b00      	cmp	r3, #0
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e02c      	b.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
 8003476:	bf00      	nop
 8003478:	20000044 	.word	0x20000044
 800347c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d023      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
 8003490:	e01e      	b.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0210 	bic.w	r2, r2, #16
 80034ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d032      	beq.n	800353e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d022      	beq.n	800352a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2205      	movs	r2, #5
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	3301      	adds	r3, #1
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	d307      	bcc.n	8003518 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f2      	bne.n	80034fc <HAL_DMA_IRQHandler+0x2cc>
 8003516:	e000      	b.n	800351a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003518:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
 800353a:	e000      	b.n	800353e <HAL_DMA_IRQHandler+0x30e>
        return;
 800353c:	bf00      	nop
    }
  }
}
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3b10      	subs	r3, #16
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <DMA_CalcBaseAndBitshift+0x68>)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d909      	bls.n	8003586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	1d1a      	adds	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	; 0x58
 8003584:	e007      	b.n	8003596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	aaaaaaab 	.word	0xaaaaaaab
 80035ac:	08008410 	.word	0x08008410

080035b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11f      	bne.n	800360a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d856      	bhi.n	800367e <DMA_CheckFifoParam+0xce>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <DMA_CheckFifoParam+0x28>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	080035fb 	.word	0x080035fb
 80035e0:	080035e9 	.word	0x080035e9
 80035e4:	0800367f 	.word	0x0800367f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d046      	beq.n	8003682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f8:	e043      	b.n	8003682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003602:	d140      	bne.n	8003686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003608:	e03d      	b.n	8003686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	d121      	bne.n	8003658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d837      	bhi.n	800368a <DMA_CheckFifoParam+0xda>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <DMA_CheckFifoParam+0x70>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003631 	.word	0x08003631
 8003624:	08003637 	.word	0x08003637
 8003628:	08003631 	.word	0x08003631
 800362c:	08003649 	.word	0x08003649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e030      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d025      	beq.n	800368e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003646:	e022      	b.n	800368e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003650:	d11f      	bne.n	8003692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003656:	e01c      	b.n	8003692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d903      	bls.n	8003666 <DMA_CheckFifoParam+0xb6>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d003      	beq.n	800366c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003664:	e018      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      break;
 800366a:	e015      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e00b      	b.n	8003696 <DMA_CheckFifoParam+0xe6>
      break;
 800367e:	bf00      	nop
 8003680:	e00a      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 8003682:	bf00      	nop
 8003684:	e008      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 8003686:	bf00      	nop
 8003688:	e006      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 800368a:	bf00      	nop
 800368c:	e004      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e002      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;   
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
    }
  } 
  
  return status; 
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e159      	b.n	8003978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036c4:	2201      	movs	r2, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f040 8148 	bne.w	8003972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d005      	beq.n	80036fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d130      	bne.n	800375c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 0201 	and.w	r2, r3, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d017      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d123      	bne.n	80037ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	220f      	movs	r2, #15
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a2 	beq.w	8003972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4b57      	ldr	r3, [pc, #348]	; (8003990 <HAL_GPIO_Init+0x2e8>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_GPIO_Init+0x2e8>)
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b54      	ldr	r3, [pc, #336]	; (8003990 <HAL_GPIO_Init+0x2e8>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800384a:	4a52      	ldr	r2, [pc, #328]	; (8003994 <HAL_GPIO_Init+0x2ec>)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	3302      	adds	r3, #2
 8003852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	220f      	movs	r2, #15
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a49      	ldr	r2, [pc, #292]	; (8003998 <HAL_GPIO_Init+0x2f0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x202>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a48      	ldr	r2, [pc, #288]	; (800399c <HAL_GPIO_Init+0x2f4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x1fe>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_GPIO_Init+0x2f8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x1fa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_GPIO_Init+0x2fc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x1f6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a45      	ldr	r2, [pc, #276]	; (80039a8 <HAL_GPIO_Init+0x300>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x1f2>
 8003896:	2304      	movs	r3, #4
 8003898:	e008      	b.n	80038ac <HAL_GPIO_Init+0x204>
 800389a:	2307      	movs	r3, #7
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x204>
 800389e:	2303      	movs	r3, #3
 80038a0:	e004      	b.n	80038ac <HAL_GPIO_Init+0x204>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_Init+0x204>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_GPIO_Init+0x204>
 80038aa:	2300      	movs	r3, #0
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f002 0203 	and.w	r2, r2, #3
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	4093      	lsls	r3, r2
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038bc:	4935      	ldr	r1, [pc, #212]	; (8003994 <HAL_GPIO_Init+0x2ec>)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_GPIO_Init+0x304>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <HAL_GPIO_Init+0x304>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_GPIO_Init+0x304>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_GPIO_Init+0x304>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_GPIO_Init+0x304>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_GPIO_Init+0x304>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_GPIO_Init+0x304>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800396c:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <HAL_GPIO_Init+0x304>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	f67f aea2 	bls.w	80036c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	40013800 	.word	0x40013800
 8003998:	40020000 	.word	0x40020000
 800399c:	40020400 	.word	0x40020400
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40013c00 	.word	0x40013c00

080039b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
 80039bc:	4613      	mov	r3, r2
 80039be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c0:	787b      	ldrb	r3, [r7, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039cc:	e003      	b.n	80039d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	619a      	str	r2, [r3, #24]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e267      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d075      	beq.n	8003aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4b7e      	ldr	r3, [pc, #504]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05b      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e242      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x74>
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x98>
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6f      	ldr	r2, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6c      	ldr	r2, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a68      	ldr	r2, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b66      	ldr	r3, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7ff f96a 	bl	8002d74 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7ff f966 	bl	8002d74 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e207      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7ff f956 	bl	8002d74 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7ff f952 	bl	8002d74 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1f3      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afa:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1c7      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4937      	ldr	r1, [pc, #220]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7ff f90b 	bl	8002d74 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b62:	f7ff f907 	bl	8002d74 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1a8      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4925      	ldr	r1, [pc, #148]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7ff f8ea 	bl	8002d74 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7ff f8e6 	bl	8002d74 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e187      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d036      	beq.n	8003c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7ff f8ca 	bl	8002d74 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7ff f8c6 	bl	8002d74 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e167      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x200>
 8003c02:	e01b      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7ff f8b3 	bl	8002d74 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e00e      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7ff f8af 	bl	8002d74 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d907      	bls.n	8003c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e150      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470000 	.word	0x42470000
 8003c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ea      	bne.n	8003c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8097 	beq.w	8003d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b81      	ldr	r3, [pc, #516]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b7d      	ldr	r3, [pc, #500]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a7c      	ldr	r2, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b7a      	ldr	r3, [pc, #488]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b77      	ldr	r3, [pc, #476]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b74      	ldr	r3, [pc, #464]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a73      	ldr	r2, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7ff f86f 	bl	8002d74 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7ff f86b 	bl	8002d74 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e10c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x2ea>
 8003cc0:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x30c>
 8003cd6:	4b5f      	ldr	r3, [pc, #380]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a5e      	ldr	r2, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a5b      	ldr	r2, [pc, #364]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6713      	str	r3, [r2, #112]	; 0x70
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 0304 	bic.w	r3, r3, #4
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7ff f830 	bl	8002d74 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7ff f82c 	bl	8002d74 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0cb      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4b49      	ldr	r3, [pc, #292]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ee      	beq.n	8003d18 <HAL_RCC_OscConfig+0x334>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7ff f81a 	bl	8002d74 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7ff f816 	bl	8002d74 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0b5      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ee      	bne.n	8003d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a1 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d82:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d05c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d141      	bne.n	8003e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe ffea 	bl	8002d74 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe ffe6 	bl	8002d74 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e087      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	491b      	ldr	r1, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe ffbf 	bl	8002d74 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe ffbb 	bl	8002d74 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e05c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x416>
 8003e18:	e054      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe ffa8 	bl	8002d74 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe ffa4 	bl	8002d74 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e045      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x444>
 8003e46:	e03d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e038      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d028      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d121      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d11a      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fed6 	bl	8002d74 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fe fed2 	bl	8002d74 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fe36 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	080083f8 	.word	0x080083f8
 8004098:	20000044 	.word	0x20000044
 800409c:	20000048 	.word	0x20000048

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b090      	sub	sp, #64	; 0x40
 80040a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	2300      	movs	r3, #0
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	2300      	movs	r3, #0
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d00d      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x40>
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	f200 80a1 	bhi.w	800420c <HAL_RCC_GetSysClockFreq+0x16c>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d003      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x3a>
 80040d2:	e09b      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_GetSysClockFreq+0x184>)
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040d8:	e09b      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_GetSysClockFreq+0x188>)
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040de:	e098      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4b4d      	ldr	r3, [pc, #308]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d028      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b4a      	ldr	r3, [pc, #296]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	2200      	movs	r2, #0
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	627a      	str	r2, [r7, #36]	; 0x24
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004108:	2100      	movs	r1, #0
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_GetSysClockFreq+0x188>)
 800410c:	fb03 f201 	mul.w	r2, r3, r1
 8004110:	2300      	movs	r3, #0
 8004112:	fb00 f303 	mul.w	r3, r0, r3
 8004116:	4413      	add	r3, r2
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_RCC_GetSysClockFreq+0x188>)
 800411a:	fba0 1202 	umull	r1, r2, r0, r2
 800411e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004120:	460a      	mov	r2, r1
 8004122:	62ba      	str	r2, [r7, #40]	; 0x28
 8004124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004126:	4413      	add	r3, r2
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	2200      	movs	r2, #0
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	61fa      	str	r2, [r7, #28]
 8004132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800413a:	f7fc fd51 	bl	8000be0 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4613      	mov	r3, r2
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004146:	e053      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004148:	4b35      	ldr	r3, [pc, #212]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	2200      	movs	r2, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	617a      	str	r2, [r7, #20]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800415a:	f04f 0b00 	mov.w	fp, #0
 800415e:	4652      	mov	r2, sl
 8004160:	465b      	mov	r3, fp
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	0159      	lsls	r1, r3, #5
 800416c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004170:	0150      	lsls	r0, r2, #5
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	ebb2 080a 	subs.w	r8, r2, sl
 800417a:	eb63 090b 	sbc.w	r9, r3, fp
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800418a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800418e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004192:	ebb2 0408 	subs.w	r4, r2, r8
 8004196:	eb63 0509 	sbc.w	r5, r3, r9
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	00eb      	lsls	r3, r5, #3
 80041a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a8:	00e2      	lsls	r2, r4, #3
 80041aa:	4614      	mov	r4, r2
 80041ac:	461d      	mov	r5, r3
 80041ae:	eb14 030a 	adds.w	r3, r4, sl
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	eb45 030b 	adc.w	r3, r5, fp
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c6:	4629      	mov	r1, r5
 80041c8:	028b      	lsls	r3, r1, #10
 80041ca:	4621      	mov	r1, r4
 80041cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d0:	4621      	mov	r1, r4
 80041d2:	028a      	lsls	r2, r1, #10
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	2200      	movs	r2, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	60fa      	str	r2, [r7, #12]
 80041e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e4:	f7fc fcfc 	bl	8000be0 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4613      	mov	r3, r2
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	3301      	adds	r3, #1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	fbb2 f3f3 	udiv	r3, r2, r3
 8004208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800420a:	e002      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetSysClockFreq+0x184>)
 800420e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004214:	4618      	mov	r0, r3
 8004216:	3740      	adds	r7, #64	; 0x40
 8004218:	46bd      	mov	sp, r7
 800421a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	00f42400 	.word	0x00f42400
 8004228:	017d7840 	.word	0x017d7840

0800422c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_RCC_GetHCLKFreq+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000044 	.word	0x20000044

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004248:	f7ff fff0 	bl	800422c <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4903      	ldr	r1, [pc, #12]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	08008408 	.word	0x08008408

0800426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004270:	f7ff ffdc 	bl	800422c <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0b5b      	lsrs	r3, r3, #13
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	08008408 	.word	0x08008408

08004294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e041      	b.n	800432a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe fb32 	bl	8002924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f000 fd7e 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e044      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d018      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d013      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_TIM_Base_Start_IT+0xb8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d010      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	e007      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40014000 	.word	0x40014000

080043f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e041      	b.n	800448e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fe f956 	bl	80026d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f000 fccc 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_TIM_PWM_Start+0x24>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e022      	b.n	8004502 <HAL_TIM_PWM_Start+0x6a>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d109      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x3e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e015      	b.n	8004502 <HAL_TIM_PWM_Start+0x6a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d109      	bne.n	80044f0 <HAL_TIM_PWM_Start+0x58>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e008      	b.n	8004502 <HAL_TIM_PWM_Start+0x6a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e068      	b.n	80045dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Start+0x82>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	e013      	b.n	8004542 <HAL_TIM_PWM_Start+0xaa>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d104      	bne.n	800452a <HAL_TIM_PWM_Start+0x92>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004528:	e00b      	b.n	8004542 <HAL_TIM_PWM_Start+0xaa>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d104      	bne.n	800453a <HAL_TIM_PWM_Start+0xa2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004538:	e003      	b.n	8004542 <HAL_TIM_PWM_Start+0xaa>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fee8 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_TIM_PWM_Start+0x14c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d107      	bne.n	800456a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <HAL_TIM_PWM_Start+0x14c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x10e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d013      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x10e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_TIM_PWM_Start+0x150>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x10e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_TIM_PWM_Start+0x154>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x10e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_TIM_PWM_Start+0x158>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_TIM_PWM_Start+0x10e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_TIM_PWM_Start+0x15c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d111      	bne.n	80045ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b06      	cmp	r3, #6
 80045b6:	d010      	beq.n	80045da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c8:	e007      	b.n	80045da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40014000 	.word	0x40014000

080045f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e097      	b.n	800473c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fe f8f1 	bl	8002808 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800463c:	f023 0307 	bic.w	r3, r3, #7
 8004640:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f000 fbc1 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	4313      	orrs	r3, r2
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004698:	f023 030c 	bic.w	r3, r3, #12
 800469c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	4313      	orrs	r3, r2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	031b      	lsls	r3, r3, #12
 80046c8:	4313      	orrs	r3, r2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	4313      	orrs	r3, r2
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004754:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800475c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004764:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800476c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d110      	bne.n	8004796 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d102      	bne.n	8004780 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800477a:	7b7b      	ldrb	r3, [r7, #13]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e069      	b.n	8004858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004794:	e031      	b.n	80047fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d110      	bne.n	80047be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800479c:	7bbb      	ldrb	r3, [r7, #14]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d102      	bne.n	80047a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a2:	7b3b      	ldrb	r3, [r7, #12]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d001      	beq.n	80047ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e055      	b.n	8004858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047bc:	e01d      	b.n	80047fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d108      	bne.n	80047d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ca:	7b7b      	ldrb	r3, [r7, #13]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d102      	bne.n	80047d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047d0:	7b3b      	ldrb	r3, [r7, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d001      	beq.n	80047da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e03e      	b.n	8004858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_TIM_Encoder_Start+0xc4>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d008      	beq.n	8004818 <HAL_TIM_Encoder_Start+0xd4>
 8004806:	e00f      	b.n	8004828 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd85 	bl	8005320 <TIM_CCxChannelCmd>
      break;
 8004816:	e016      	b.n	8004846 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	2104      	movs	r1, #4
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fd7d 	bl	8005320 <TIM_CCxChannelCmd>
      break;
 8004826:	e00e      	b.n	8004846 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fd75 	bl	8005320 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	2104      	movs	r1, #4
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fd6e 	bl	8005320 <TIM_CCxChannelCmd>
      break;
 8004844:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0202 	mvn.w	r2, #2
 800488c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa77 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa69 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa7a 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0204 	mvn.w	r2, #4
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa4d 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa3f 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa50 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b08      	cmp	r3, #8
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0208 	mvn.w	r2, #8
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa23 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa15 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa26 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d122      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b10      	cmp	r3, #16
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2208      	movs	r2, #8
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9f9 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9eb 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f9fc 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0201 	mvn.w	r2, #1
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd f926 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fd78 	bl	8005500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9c1 	bl	8004dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0220 	mvn.w	r2, #32
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fd42 	bl	80054ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0ae      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	f200 809f 	bhi.w	8004bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004bdd 	.word	0x08004bdd
 8004aac:	08004bdd 	.word	0x08004bdd
 8004ab0:	08004bdd 	.word	0x08004bdd
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004bdd 	.word	0x08004bdd
 8004abc:	08004bdd 	.word	0x08004bdd
 8004ac0:	08004bdd 	.word	0x08004bdd
 8004ac4:	08004b5b 	.word	0x08004b5b
 8004ac8:	08004bdd 	.word	0x08004bdd
 8004acc:	08004bdd 	.word	0x08004bdd
 8004ad0:	08004bdd 	.word	0x08004bdd
 8004ad4:	08004b9b 	.word	0x08004b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f9f8 	bl	8004ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
      break;
 8004b16:	e064      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa3e 	bl	8004fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	619a      	str	r2, [r3, #24]
      break;
 8004b58:	e043      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa89 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0204 	bic.w	r2, r2, #4
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	61da      	str	r2, [r3, #28]
      break;
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fad3 	bl	800514c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	021a      	lsls	r2, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	61da      	str	r2, [r3, #28]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_ConfigClockSource+0x1c>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0b4      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x186>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c48:	d03e      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4e:	f200 8087 	bhi.w	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	f000 8086 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x172>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5e:	d87f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b70      	cmp	r3, #112	; 0x70
 8004c62:	d01a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xa6>
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d87b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b60      	cmp	r3, #96	; 0x60
 8004c6a:	d050      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x11a>
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d877      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b50      	cmp	r3, #80	; 0x50
 8004c72:	d03c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xfa>
 8004c74:	2b50      	cmp	r3, #80	; 0x50
 8004c76:	d873      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d058      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x13a>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d86f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b30      	cmp	r3, #48	; 0x30
 8004c82:	d064      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d86b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d060      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d867      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d05a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	e062      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f000 fb19 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e04f      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f000 fb02 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cea:	609a      	str	r2, [r3, #8]
      break;
 8004cec:	e03c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 fa76 	bl	80051ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2150      	movs	r1, #80	; 0x50
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 facf 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e02c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 fa95 	bl	800524a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2160      	movs	r1, #96	; 0x60
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fabf 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e01c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 fa56 	bl	80051ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 faaf 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 faa6 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e003      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a34      	ldr	r2, [pc, #208]	; (8004eb8 <TIM_Base_SetConfig+0xe4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <TIM_Base_SetConfig+0xe8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <TIM_Base_SetConfig+0xec>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a2f      	ldr	r2, [pc, #188]	; (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <TIM_Base_SetConfig+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <TIM_Base_SetConfig+0xe8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <TIM_Base_SetConfig+0xec>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <TIM_Base_SetConfig+0xf4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <TIM_Base_SetConfig+0xf8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <TIM_Base_SetConfig+0xfc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <TIM_Base_SetConfig+0xe4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d103      	bne.n	8004ea4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0302 	bic.w	r3, r3, #2
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10c      	bne.n	8004f4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0308 	bic.w	r3, r3, #8
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d111      	bne.n	8004f76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000

08004fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0210 	bic.w	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0320 	bic.w	r3, r3, #32
 8004fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <TIM_OC2_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10d      	bne.n	800501c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <TIM_OC2_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010000 	.word	0x40010000

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10d      	bne.n	80050f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a14      	ldr	r2, [pc, #80]	; (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d113      	bne.n	8005122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <TIM_OC4_SetConfig+0x9c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d109      	bne.n	80051c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 030a 	bic.w	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0210 	bic.w	r2, r3, #16
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f043 0307 	orr.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e050      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a15      	ldr	r2, [pc, #84]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005460:	2302      	movs	r3, #2
 8005462:	e03d      	b.n	80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e03f      	b.n	80055a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fd fa8e 	bl	8002a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	; 0x24
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fcdf 	bl	8005f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d11d      	bne.n	8005604 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Receive_IT+0x26>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e016      	b.n	8005606 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Receive_IT+0x38>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e00f      	b.n	8005606 <HAL_UART_Receive_IT+0x58>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	461a      	mov	r2, r3
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fab6 	bl	8005b6c <UART_Start_Receive_IT>
 8005600:	4603      	mov	r3, r0
 8005602:	e000      	b.n	8005606 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b0ba      	sub	sp, #232	; 0xe8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005636:	2300      	movs	r3, #0
 8005638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800564e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_UART_IRQHandler+0x66>
 8005662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fb99 	bl	8005da6 <UART_Receive_IT>
      return;
 8005674:	e256      	b.n	8005b24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80de 	beq.w	800583c <HAL_UART_IRQHandler+0x22c>
 8005680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005690:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80d1 	beq.w	800583c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_UART_IRQHandler+0xae>
 80056a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_UART_IRQHandler+0xd2>
 80056ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f043 0202 	orr.w	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <HAL_UART_IRQHandler+0xf6>
 80056ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <HAL_UART_IRQHandler+0x126>
 8005712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d105      	bne.n	800572a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800571e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0208 	orr.w	r2, r3, #8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 81ed 	beq.w	8005b1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_UART_IRQHandler+0x14e>
 800574c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb24 	bl	8005da6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <HAL_UART_IRQHandler+0x17a>
 8005782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d04f      	beq.n	800582a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa2c 	bl	8005be8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d141      	bne.n	8005822 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1d9      	bne.n	800579e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	4a7d      	ldr	r2, [pc, #500]	; (80059ec <HAL_UART_IRQHandler+0x3dc>)
 80057f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fd fcf4 	bl	80031ec <HAL_DMA_Abort_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e00e      	b.n	8005838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f990 	bl	8005b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e00a      	b.n	8005838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f98c 	bl	8005b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e006      	b.n	8005838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f988 	bl	8005b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005836:	e170      	b.n	8005b1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	bf00      	nop
    return;
 800583a:	e16e      	b.n	8005b1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 814a 	bne.w	8005ada <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8143 	beq.w	8005ada <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 813c 	beq.w	8005ada <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	f040 80b4 	bne.w	80059f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8140 	beq.w	8005b1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f080 8139 	bcs.w	8005b1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058be:	f000 8088 	beq.w	80059d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1d9      	bne.n	80058c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800591e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3314      	adds	r3, #20
 800592e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005932:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005936:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800593a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e1      	bne.n	800590e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800595a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800595c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800596e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005970:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800597c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e3      	bne.n	800594a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a2:	f023 0310 	bic.w	r3, r3, #16
 80059a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80059b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fd fb9d 	bl	800310c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8b6 	bl	8005b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059e8:	e099      	b.n	8005b1e <HAL_UART_IRQHandler+0x50e>
 80059ea:	bf00      	nop
 80059ec:	08005caf 	.word	0x08005caf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 808b 	beq.w	8005b22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8086 	beq.w	8005b22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a3a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e3      	bne.n	8005a16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3314      	adds	r3, #20
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a72:	633a      	str	r2, [r7, #48]	; 0x30
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e3      	bne.n	8005a4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0310 	bic.w	r3, r3, #16
 8005aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ab8:	61fa      	str	r2, [r7, #28]
 8005aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	69b9      	ldr	r1, [r7, #24]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e3      	bne.n	8005a94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f83e 	bl	8005b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ad8:	e023      	b.n	8005b22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_UART_IRQHandler+0x4ea>
 8005ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8ef 	bl	8005cd6 <UART_Transmit_IT>
    return;
 8005af8:	e014      	b.n	8005b24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00e      	beq.n	8005b24 <HAL_UART_IRQHandler+0x514>
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f92f 	bl	8005d76 <UART_EndTransmit_IT>
    return;
 8005b18:	e004      	b.n	8005b24 <HAL_UART_IRQHandler+0x514>
    return;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_UART_IRQHandler+0x514>
      return;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_UART_IRQHandler+0x514>
      return;
 8005b22:	bf00      	nop
  }
}
 8005b24:	37e8      	adds	r7, #232	; 0xe8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2222      	movs	r2, #34	; 0x22
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695a      	ldr	r2, [r3, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0220 	orr.w	r2, r2, #32
 8005bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b095      	sub	sp, #84	; 0x54
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c10:	643a      	str	r2, [r7, #64]	; 0x40
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e5      	bne.n	8005bf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d119      	bne.n	8005c94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f023 0310 	bic.w	r3, r3, #16
 8005c76:	647b      	str	r3, [r7, #68]	; 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c80:	61ba      	str	r2, [r7, #24]
 8005c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6979      	ldr	r1, [r7, #20]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ca2:	bf00      	nop
 8005ca4:	3754      	adds	r7, #84	; 0x54
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff ff39 	bl	8005b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b21      	cmp	r3, #33	; 0x21
 8005ce8:	d13e      	bne.n	8005d68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d114      	bne.n	8005d1e <UART_Transmit_IT+0x48>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d110      	bne.n	8005d1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	621a      	str	r2, [r3, #32]
 8005d1c:	e008      	b.n	8005d30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6211      	str	r1, [r2, #32]
 8005d28:	781a      	ldrb	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10f      	bne.n	8005d64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e000      	b.n	8005d6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fec8 	bl	8005b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08c      	sub	sp, #48	; 0x30
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b22      	cmp	r3, #34	; 0x22
 8005db8:	f040 80ab 	bne.w	8005f12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	d117      	bne.n	8005df6 <UART_Receive_IT+0x50>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d113      	bne.n	8005df6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	1c9a      	adds	r2, r3, #2
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28
 8005df4:	e026      	b.n	8005e44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e08:	d007      	beq.n	8005e1a <UART_Receive_IT+0x74>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <UART_Receive_IT+0x82>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e008      	b.n	8005e3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4619      	mov	r1, r3
 8005e52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d15a      	bne.n	8005f0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0220 	bic.w	r2, r2, #32
 8005e66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d135      	bne.n	8005f04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	613b      	str	r3, [r7, #16]
   return(result);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f023 0310 	bic.w	r3, r3, #16
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebe:	623a      	str	r2, [r7, #32]
 8005ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e5      	bne.n	8005e9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d10a      	bne.n	8005ef6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff fe29 	bl	8005b54 <HAL_UARTEx_RxEventCallback>
 8005f02:	e002      	b.n	8005f0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fb fc65 	bl	80017d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e002      	b.n	8005f14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e000      	b.n	8005f14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3730      	adds	r7, #48	; 0x30
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f20:	b0c0      	sub	sp, #256	; 0x100
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	68d9      	ldr	r1, [r3, #12]
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	ea40 0301 	orr.w	r3, r0, r1
 8005f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f74:	f021 010c 	bic.w	r1, r1, #12
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f82:	430b      	orrs	r3, r1
 8005f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f96:	6999      	ldr	r1, [r3, #24]
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	ea40 0301 	orr.w	r3, r0, r1
 8005fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b8f      	ldr	r3, [pc, #572]	; (80061e8 <UART_SetConfig+0x2cc>)
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d005      	beq.n	8005fbc <UART_SetConfig+0xa0>
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b8d      	ldr	r3, [pc, #564]	; (80061ec <UART_SetConfig+0x2d0>)
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d104      	bne.n	8005fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fbc:	f7fe f956 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8005fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fc4:	e003      	b.n	8005fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fc6:	f7fe f93d 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 8005fca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd8:	f040 810c 	bne.w	80061f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fee:	4622      	mov	r2, r4
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	1891      	adds	r1, r2, r2
 8005ff4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ff6:	415b      	adcs	r3, r3
 8005ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ffe:	4621      	mov	r1, r4
 8006000:	eb12 0801 	adds.w	r8, r2, r1
 8006004:	4629      	mov	r1, r5
 8006006:	eb43 0901 	adc.w	r9, r3, r1
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800601a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800601e:	4690      	mov	r8, r2
 8006020:	4699      	mov	r9, r3
 8006022:	4623      	mov	r3, r4
 8006024:	eb18 0303 	adds.w	r3, r8, r3
 8006028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800602c:	462b      	mov	r3, r5
 800602e:	eb49 0303 	adc.w	r3, r9, r3
 8006032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006042:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800604a:	460b      	mov	r3, r1
 800604c:	18db      	adds	r3, r3, r3
 800604e:	653b      	str	r3, [r7, #80]	; 0x50
 8006050:	4613      	mov	r3, r2
 8006052:	eb42 0303 	adc.w	r3, r2, r3
 8006056:	657b      	str	r3, [r7, #84]	; 0x54
 8006058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800605c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006060:	f7fa fdbe 	bl	8000be0 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b61      	ldr	r3, [pc, #388]	; (80061f0 <UART_SetConfig+0x2d4>)
 800606a:	fba3 2302 	umull	r2, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	011c      	lsls	r4, r3, #4
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006076:	2200      	movs	r2, #0
 8006078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800607c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	1891      	adds	r1, r2, r2
 800608a:	64b9      	str	r1, [r7, #72]	; 0x48
 800608c:	415b      	adcs	r3, r3
 800608e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006094:	4641      	mov	r1, r8
 8006096:	eb12 0a01 	adds.w	sl, r2, r1
 800609a:	4649      	mov	r1, r9
 800609c:	eb43 0b01 	adc.w	fp, r3, r1
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060b4:	4692      	mov	sl, r2
 80060b6:	469b      	mov	fp, r3
 80060b8:	4643      	mov	r3, r8
 80060ba:	eb1a 0303 	adds.w	r3, sl, r3
 80060be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060c2:	464b      	mov	r3, r9
 80060c4:	eb4b 0303 	adc.w	r3, fp, r3
 80060c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060e0:	460b      	mov	r3, r1
 80060e2:	18db      	adds	r3, r3, r3
 80060e4:	643b      	str	r3, [r7, #64]	; 0x40
 80060e6:	4613      	mov	r3, r2
 80060e8:	eb42 0303 	adc.w	r3, r2, r3
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060f6:	f7fa fd73 	bl	8000be0 <__aeabi_uldivmod>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	4b3b      	ldr	r3, [pc, #236]	; (80061f0 <UART_SetConfig+0x2d4>)
 8006102:	fba3 2301 	umull	r2, r3, r3, r1
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2264      	movs	r2, #100	; 0x64
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	1acb      	subs	r3, r1, r3
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006116:	4b36      	ldr	r3, [pc, #216]	; (80061f0 <UART_SetConfig+0x2d4>)
 8006118:	fba3 2302 	umull	r2, r3, r3, r2
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006124:	441c      	add	r4, r3
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006130:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	1891      	adds	r1, r2, r2
 800613e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006140:	415b      	adcs	r3, r3
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006148:	4641      	mov	r1, r8
 800614a:	1851      	adds	r1, r2, r1
 800614c:	6339      	str	r1, [r7, #48]	; 0x30
 800614e:	4649      	mov	r1, r9
 8006150:	414b      	adcs	r3, r1
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006160:	4659      	mov	r1, fp
 8006162:	00cb      	lsls	r3, r1, #3
 8006164:	4651      	mov	r1, sl
 8006166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800616a:	4651      	mov	r1, sl
 800616c:	00ca      	lsls	r2, r1, #3
 800616e:	4610      	mov	r0, r2
 8006170:	4619      	mov	r1, r3
 8006172:	4603      	mov	r3, r0
 8006174:	4642      	mov	r2, r8
 8006176:	189b      	adds	r3, r3, r2
 8006178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800617c:	464b      	mov	r3, r9
 800617e:	460a      	mov	r2, r1
 8006180:	eb42 0303 	adc.w	r3, r2, r3
 8006184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006194:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800619c:	460b      	mov	r3, r1
 800619e:	18db      	adds	r3, r3, r3
 80061a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a2:	4613      	mov	r3, r2
 80061a4:	eb42 0303 	adc.w	r3, r2, r3
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061b2:	f7fa fd15 	bl	8000be0 <__aeabi_uldivmod>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4b0d      	ldr	r3, [pc, #52]	; (80061f0 <UART_SetConfig+0x2d4>)
 80061bc:	fba3 1302 	umull	r1, r3, r3, r2
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	2164      	movs	r1, #100	; 0x64
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	3332      	adds	r3, #50	; 0x32
 80061ce:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <UART_SetConfig+0x2d4>)
 80061d0:	fba2 2303 	umull	r2, r3, r2, r3
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	f003 0207 	and.w	r2, r3, #7
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4422      	add	r2, r4
 80061e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061e4:	e106      	b.n	80063f4 <UART_SetConfig+0x4d8>
 80061e6:	bf00      	nop
 80061e8:	40011000 	.word	0x40011000
 80061ec:	40011400 	.word	0x40011400
 80061f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006206:	4642      	mov	r2, r8
 8006208:	464b      	mov	r3, r9
 800620a:	1891      	adds	r1, r2, r2
 800620c:	6239      	str	r1, [r7, #32]
 800620e:	415b      	adcs	r3, r3
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006216:	4641      	mov	r1, r8
 8006218:	1854      	adds	r4, r2, r1
 800621a:	4649      	mov	r1, r9
 800621c:	eb43 0501 	adc.w	r5, r3, r1
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	00eb      	lsls	r3, r5, #3
 800622a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800622e:	00e2      	lsls	r2, r4, #3
 8006230:	4614      	mov	r4, r2
 8006232:	461d      	mov	r5, r3
 8006234:	4643      	mov	r3, r8
 8006236:	18e3      	adds	r3, r4, r3
 8006238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800623c:	464b      	mov	r3, r9
 800623e:	eb45 0303 	adc.w	r3, r5, r3
 8006242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006262:	4629      	mov	r1, r5
 8006264:	008b      	lsls	r3, r1, #2
 8006266:	4621      	mov	r1, r4
 8006268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800626c:	4621      	mov	r1, r4
 800626e:	008a      	lsls	r2, r1, #2
 8006270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006274:	f7fa fcb4 	bl	8000be0 <__aeabi_uldivmod>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4b60      	ldr	r3, [pc, #384]	; (8006400 <UART_SetConfig+0x4e4>)
 800627e:	fba3 2302 	umull	r2, r3, r3, r2
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	011c      	lsls	r4, r3, #4
 8006286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006290:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	1891      	adds	r1, r2, r2
 800629e:	61b9      	str	r1, [r7, #24]
 80062a0:	415b      	adcs	r3, r3
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a8:	4641      	mov	r1, r8
 80062aa:	1851      	adds	r1, r2, r1
 80062ac:	6139      	str	r1, [r7, #16]
 80062ae:	4649      	mov	r1, r9
 80062b0:	414b      	adcs	r3, r1
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062c0:	4659      	mov	r1, fp
 80062c2:	00cb      	lsls	r3, r1, #3
 80062c4:	4651      	mov	r1, sl
 80062c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ca:	4651      	mov	r1, sl
 80062cc:	00ca      	lsls	r2, r1, #3
 80062ce:	4610      	mov	r0, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	4642      	mov	r2, r8
 80062d6:	189b      	adds	r3, r3, r2
 80062d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062dc:	464b      	mov	r3, r9
 80062de:	460a      	mov	r2, r1
 80062e0:	eb42 0303 	adc.w	r3, r2, r3
 80062e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80062f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006300:	4649      	mov	r1, r9
 8006302:	008b      	lsls	r3, r1, #2
 8006304:	4641      	mov	r1, r8
 8006306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800630a:	4641      	mov	r1, r8
 800630c:	008a      	lsls	r2, r1, #2
 800630e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006312:	f7fa fc65 	bl	8000be0 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4611      	mov	r1, r2
 800631c:	4b38      	ldr	r3, [pc, #224]	; (8006400 <UART_SetConfig+0x4e4>)
 800631e:	fba3 2301 	umull	r2, r3, r3, r1
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2264      	movs	r2, #100	; 0x64
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	3332      	adds	r3, #50	; 0x32
 8006330:	4a33      	ldr	r2, [pc, #204]	; (8006400 <UART_SetConfig+0x4e4>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800633c:	441c      	add	r4, r3
 800633e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006342:	2200      	movs	r2, #0
 8006344:	673b      	str	r3, [r7, #112]	; 0x70
 8006346:	677a      	str	r2, [r7, #116]	; 0x74
 8006348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	1891      	adds	r1, r2, r2
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	415b      	adcs	r3, r3
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800635c:	4641      	mov	r1, r8
 800635e:	1851      	adds	r1, r2, r1
 8006360:	6039      	str	r1, [r7, #0]
 8006362:	4649      	mov	r1, r9
 8006364:	414b      	adcs	r3, r1
 8006366:	607b      	str	r3, [r7, #4]
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006374:	4659      	mov	r1, fp
 8006376:	00cb      	lsls	r3, r1, #3
 8006378:	4651      	mov	r1, sl
 800637a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637e:	4651      	mov	r1, sl
 8006380:	00ca      	lsls	r2, r1, #3
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	4603      	mov	r3, r0
 8006388:	4642      	mov	r2, r8
 800638a:	189b      	adds	r3, r3, r2
 800638c:	66bb      	str	r3, [r7, #104]	; 0x68
 800638e:	464b      	mov	r3, r9
 8006390:	460a      	mov	r2, r1
 8006392:	eb42 0303 	adc.w	r3, r2, r3
 8006396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	663b      	str	r3, [r7, #96]	; 0x60
 80063a2:	667a      	str	r2, [r7, #100]	; 0x64
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063b0:	4649      	mov	r1, r9
 80063b2:	008b      	lsls	r3, r1, #2
 80063b4:	4641      	mov	r1, r8
 80063b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ba:	4641      	mov	r1, r8
 80063bc:	008a      	lsls	r2, r1, #2
 80063be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063c2:	f7fa fc0d 	bl	8000be0 <__aeabi_uldivmod>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <UART_SetConfig+0x4e4>)
 80063cc:	fba3 1302 	umull	r1, r3, r3, r2
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	2164      	movs	r1, #100	; 0x64
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	3332      	adds	r3, #50	; 0x32
 80063de:	4a08      	ldr	r2, [pc, #32]	; (8006400 <UART_SetConfig+0x4e4>)
 80063e0:	fba2 2303 	umull	r2, r3, r2, r3
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f003 020f 	and.w	r2, r3, #15
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4422      	add	r2, r4
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063fa:	46bd      	mov	sp, r7
 80063fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006400:	51eb851f 	.word	0x51eb851f

08006404 <memset>:
 8006404:	4402      	add	r2, r0
 8006406:	4603      	mov	r3, r0
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	f803 1b01 	strb.w	r1, [r3], #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	2000009c 	.word	0x2000009c

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4d0d      	ldr	r5, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2600      	movs	r6, #0
 800642c:	42a6      	cmp	r6, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4d0b      	ldr	r5, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f001 ffd4 	bl	80083e0 <_init>
 8006438:	1b64      	subs	r4, r4, r5
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2600      	movs	r6, #0
 800643e:	42a6      	cmp	r6, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f855 3b04 	ldr.w	r3, [r5], #4
 8006448:	4798      	blx	r3
 800644a:	3601      	adds	r6, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006452:	4798      	blx	r3
 8006454:	3601      	adds	r6, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	08008628 	.word	0x08008628
 800645c:	08008628 	.word	0x08008628
 8006460:	08008628 	.word	0x08008628
 8006464:	0800862c 	.word	0x0800862c

08006468 <pow>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	ed2d 8b02 	vpush	{d8}
 800646e:	eeb0 8a40 	vmov.f32	s16, s0
 8006472:	eef0 8a60 	vmov.f32	s17, s1
 8006476:	ec55 4b11 	vmov	r4, r5, d1
 800647a:	f000 fbf5 	bl	8006c68 <__ieee754_pow>
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	ec57 6b10 	vmov	r6, r7, d0
 800648a:	f7fa fafb 	bl	8000a84 <__aeabi_dcmpun>
 800648e:	2800      	cmp	r0, #0
 8006490:	d13b      	bne.n	800650a <pow+0xa2>
 8006492:	ec51 0b18 	vmov	r0, r1, d8
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	f7fa fac1 	bl	8000a20 <__aeabi_dcmpeq>
 800649e:	b1b8      	cbz	r0, 80064d0 <pow+0x68>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa faba 	bl	8000a20 <__aeabi_dcmpeq>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d146      	bne.n	800653e <pow+0xd6>
 80064b0:	ec45 4b10 	vmov	d0, r4, r5
 80064b4:	f000 f920 	bl	80066f8 <finite>
 80064b8:	b338      	cbz	r0, 800650a <pow+0xa2>
 80064ba:	2200      	movs	r2, #0
 80064bc:	2300      	movs	r3, #0
 80064be:	4620      	mov	r0, r4
 80064c0:	4629      	mov	r1, r5
 80064c2:	f7fa fab7 	bl	8000a34 <__aeabi_dcmplt>
 80064c6:	b300      	cbz	r0, 800650a <pow+0xa2>
 80064c8:	f7ff ffa4 	bl	8006414 <__errno>
 80064cc:	2322      	movs	r3, #34	; 0x22
 80064ce:	e01b      	b.n	8006508 <pow+0xa0>
 80064d0:	ec47 6b10 	vmov	d0, r6, r7
 80064d4:	f000 f910 	bl	80066f8 <finite>
 80064d8:	b9e0      	cbnz	r0, 8006514 <pow+0xac>
 80064da:	eeb0 0a48 	vmov.f32	s0, s16
 80064de:	eef0 0a68 	vmov.f32	s1, s17
 80064e2:	f000 f909 	bl	80066f8 <finite>
 80064e6:	b1a8      	cbz	r0, 8006514 <pow+0xac>
 80064e8:	ec45 4b10 	vmov	d0, r4, r5
 80064ec:	f000 f904 	bl	80066f8 <finite>
 80064f0:	b180      	cbz	r0, 8006514 <pow+0xac>
 80064f2:	4632      	mov	r2, r6
 80064f4:	463b      	mov	r3, r7
 80064f6:	4630      	mov	r0, r6
 80064f8:	4639      	mov	r1, r7
 80064fa:	f7fa fac3 	bl	8000a84 <__aeabi_dcmpun>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d0e2      	beq.n	80064c8 <pow+0x60>
 8006502:	f7ff ff87 	bl	8006414 <__errno>
 8006506:	2321      	movs	r3, #33	; 0x21
 8006508:	6003      	str	r3, [r0, #0]
 800650a:	ecbd 8b02 	vpop	{d8}
 800650e:	ec47 6b10 	vmov	d0, r6, r7
 8006512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	f7fa fa80 	bl	8000a20 <__aeabi_dcmpeq>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0f2      	beq.n	800650a <pow+0xa2>
 8006524:	eeb0 0a48 	vmov.f32	s0, s16
 8006528:	eef0 0a68 	vmov.f32	s1, s17
 800652c:	f000 f8e4 	bl	80066f8 <finite>
 8006530:	2800      	cmp	r0, #0
 8006532:	d0ea      	beq.n	800650a <pow+0xa2>
 8006534:	ec45 4b10 	vmov	d0, r4, r5
 8006538:	f000 f8de 	bl	80066f8 <finite>
 800653c:	e7c3      	b.n	80064c6 <pow+0x5e>
 800653e:	4f01      	ldr	r7, [pc, #4]	; (8006544 <pow+0xdc>)
 8006540:	2600      	movs	r6, #0
 8006542:	e7e2      	b.n	800650a <pow+0xa2>
 8006544:	3ff00000 	.word	0x3ff00000

08006548 <sqrt>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	ed2d 8b02 	vpush	{d8}
 800654e:	ec55 4b10 	vmov	r4, r5, d0
 8006552:	f000 f8dd 	bl	8006710 <__ieee754_sqrt>
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	eeb0 8a40 	vmov.f32	s16, s0
 8006562:	eef0 8a60 	vmov.f32	s17, s1
 8006566:	f7fa fa8d 	bl	8000a84 <__aeabi_dcmpun>
 800656a:	b990      	cbnz	r0, 8006592 <sqrt+0x4a>
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7fa fa5e 	bl	8000a34 <__aeabi_dcmplt>
 8006578:	b158      	cbz	r0, 8006592 <sqrt+0x4a>
 800657a:	f7ff ff4b 	bl	8006414 <__errno>
 800657e:	2321      	movs	r3, #33	; 0x21
 8006580:	6003      	str	r3, [r0, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	4610      	mov	r0, r2
 8006588:	4619      	mov	r1, r3
 800658a:	f7fa f90b 	bl	80007a4 <__aeabi_ddiv>
 800658e:	ec41 0b18 	vmov	d8, r0, r1
 8006592:	eeb0 0a48 	vmov.f32	s0, s16
 8006596:	eef0 0a68 	vmov.f32	s1, s17
 800659a:	ecbd 8b02 	vpop	{d8}
 800659e:	bd38      	pop	{r3, r4, r5, pc}

080065a0 <cos>:
 80065a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065a2:	ec53 2b10 	vmov	r2, r3, d0
 80065a6:	4826      	ldr	r0, [pc, #152]	; (8006640 <cos+0xa0>)
 80065a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80065ac:	4281      	cmp	r1, r0
 80065ae:	dc06      	bgt.n	80065be <cos+0x1e>
 80065b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006638 <cos+0x98>
 80065b4:	b005      	add	sp, #20
 80065b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ba:	f000 b9cd 	b.w	8006958 <__kernel_cos>
 80065be:	4821      	ldr	r0, [pc, #132]	; (8006644 <cos+0xa4>)
 80065c0:	4281      	cmp	r1, r0
 80065c2:	dd09      	ble.n	80065d8 <cos+0x38>
 80065c4:	ee10 0a10 	vmov	r0, s0
 80065c8:	4619      	mov	r1, r3
 80065ca:	f7f9 fe09 	bl	80001e0 <__aeabi_dsub>
 80065ce:	ec41 0b10 	vmov	d0, r0, r1
 80065d2:	b005      	add	sp, #20
 80065d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80065d8:	4668      	mov	r0, sp
 80065da:	f001 f871 	bl	80076c0 <__ieee754_rem_pio2>
 80065de:	f000 0003 	and.w	r0, r0, #3
 80065e2:	2801      	cmp	r0, #1
 80065e4:	d00b      	beq.n	80065fe <cos+0x5e>
 80065e6:	2802      	cmp	r0, #2
 80065e8:	d016      	beq.n	8006618 <cos+0x78>
 80065ea:	b9e0      	cbnz	r0, 8006626 <cos+0x86>
 80065ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065f0:	ed9d 0b00 	vldr	d0, [sp]
 80065f4:	f000 f9b0 	bl	8006958 <__kernel_cos>
 80065f8:	ec51 0b10 	vmov	r0, r1, d0
 80065fc:	e7e7      	b.n	80065ce <cos+0x2e>
 80065fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006602:	ed9d 0b00 	vldr	d0, [sp]
 8006606:	f000 fa6f 	bl	8006ae8 <__kernel_sin>
 800660a:	ec53 2b10 	vmov	r2, r3, d0
 800660e:	ee10 0a10 	vmov	r0, s0
 8006612:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006616:	e7da      	b.n	80065ce <cos+0x2e>
 8006618:	ed9d 1b02 	vldr	d1, [sp, #8]
 800661c:	ed9d 0b00 	vldr	d0, [sp]
 8006620:	f000 f99a 	bl	8006958 <__kernel_cos>
 8006624:	e7f1      	b.n	800660a <cos+0x6a>
 8006626:	ed9d 1b02 	vldr	d1, [sp, #8]
 800662a:	ed9d 0b00 	vldr	d0, [sp]
 800662e:	2001      	movs	r0, #1
 8006630:	f000 fa5a 	bl	8006ae8 <__kernel_sin>
 8006634:	e7e0      	b.n	80065f8 <cos+0x58>
 8006636:	bf00      	nop
	...
 8006640:	3fe921fb 	.word	0x3fe921fb
 8006644:	7fefffff 	.word	0x7fefffff

08006648 <sin>:
 8006648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800664a:	ec53 2b10 	vmov	r2, r3, d0
 800664e:	4828      	ldr	r0, [pc, #160]	; (80066f0 <sin+0xa8>)
 8006650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006654:	4281      	cmp	r1, r0
 8006656:	dc07      	bgt.n	8006668 <sin+0x20>
 8006658:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80066e8 <sin+0xa0>
 800665c:	2000      	movs	r0, #0
 800665e:	b005      	add	sp, #20
 8006660:	f85d eb04 	ldr.w	lr, [sp], #4
 8006664:	f000 ba40 	b.w	8006ae8 <__kernel_sin>
 8006668:	4822      	ldr	r0, [pc, #136]	; (80066f4 <sin+0xac>)
 800666a:	4281      	cmp	r1, r0
 800666c:	dd09      	ble.n	8006682 <sin+0x3a>
 800666e:	ee10 0a10 	vmov	r0, s0
 8006672:	4619      	mov	r1, r3
 8006674:	f7f9 fdb4 	bl	80001e0 <__aeabi_dsub>
 8006678:	ec41 0b10 	vmov	d0, r0, r1
 800667c:	b005      	add	sp, #20
 800667e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006682:	4668      	mov	r0, sp
 8006684:	f001 f81c 	bl	80076c0 <__ieee754_rem_pio2>
 8006688:	f000 0003 	and.w	r0, r0, #3
 800668c:	2801      	cmp	r0, #1
 800668e:	d00c      	beq.n	80066aa <sin+0x62>
 8006690:	2802      	cmp	r0, #2
 8006692:	d011      	beq.n	80066b8 <sin+0x70>
 8006694:	b9f0      	cbnz	r0, 80066d4 <sin+0x8c>
 8006696:	ed9d 1b02 	vldr	d1, [sp, #8]
 800669a:	ed9d 0b00 	vldr	d0, [sp]
 800669e:	2001      	movs	r0, #1
 80066a0:	f000 fa22 	bl	8006ae8 <__kernel_sin>
 80066a4:	ec51 0b10 	vmov	r0, r1, d0
 80066a8:	e7e6      	b.n	8006678 <sin+0x30>
 80066aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066ae:	ed9d 0b00 	vldr	d0, [sp]
 80066b2:	f000 f951 	bl	8006958 <__kernel_cos>
 80066b6:	e7f5      	b.n	80066a4 <sin+0x5c>
 80066b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066bc:	ed9d 0b00 	vldr	d0, [sp]
 80066c0:	2001      	movs	r0, #1
 80066c2:	f000 fa11 	bl	8006ae8 <__kernel_sin>
 80066c6:	ec53 2b10 	vmov	r2, r3, d0
 80066ca:	ee10 0a10 	vmov	r0, s0
 80066ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066d2:	e7d1      	b.n	8006678 <sin+0x30>
 80066d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066d8:	ed9d 0b00 	vldr	d0, [sp]
 80066dc:	f000 f93c 	bl	8006958 <__kernel_cos>
 80066e0:	e7f1      	b.n	80066c6 <sin+0x7e>
 80066e2:	bf00      	nop
 80066e4:	f3af 8000 	nop.w
	...
 80066f0:	3fe921fb 	.word	0x3fe921fb
 80066f4:	7fefffff 	.word	0x7fefffff

080066f8 <finite>:
 80066f8:	b082      	sub	sp, #8
 80066fa:	ed8d 0b00 	vstr	d0, [sp]
 80066fe:	9801      	ldr	r0, [sp, #4]
 8006700:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006704:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006708:	0fc0      	lsrs	r0, r0, #31
 800670a:	b002      	add	sp, #8
 800670c:	4770      	bx	lr
	...

08006710 <__ieee754_sqrt>:
 8006710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	ec55 4b10 	vmov	r4, r5, d0
 8006718:	4e67      	ldr	r6, [pc, #412]	; (80068b8 <__ieee754_sqrt+0x1a8>)
 800671a:	43ae      	bics	r6, r5
 800671c:	ee10 0a10 	vmov	r0, s0
 8006720:	ee10 2a10 	vmov	r2, s0
 8006724:	4629      	mov	r1, r5
 8006726:	462b      	mov	r3, r5
 8006728:	d10d      	bne.n	8006746 <__ieee754_sqrt+0x36>
 800672a:	f7f9 ff11 	bl	8000550 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4620      	mov	r0, r4
 8006734:	4629      	mov	r1, r5
 8006736:	f7f9 fd55 	bl	80001e4 <__adddf3>
 800673a:	4604      	mov	r4, r0
 800673c:	460d      	mov	r5, r1
 800673e:	ec45 4b10 	vmov	d0, r4, r5
 8006742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006746:	2d00      	cmp	r5, #0
 8006748:	dc0b      	bgt.n	8006762 <__ieee754_sqrt+0x52>
 800674a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800674e:	4326      	orrs	r6, r4
 8006750:	d0f5      	beq.n	800673e <__ieee754_sqrt+0x2e>
 8006752:	b135      	cbz	r5, 8006762 <__ieee754_sqrt+0x52>
 8006754:	f7f9 fd44 	bl	80001e0 <__aeabi_dsub>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	f7fa f822 	bl	80007a4 <__aeabi_ddiv>
 8006760:	e7eb      	b.n	800673a <__ieee754_sqrt+0x2a>
 8006762:	1509      	asrs	r1, r1, #20
 8006764:	f000 808d 	beq.w	8006882 <__ieee754_sqrt+0x172>
 8006768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800676c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006774:	07c9      	lsls	r1, r1, #31
 8006776:	bf5c      	itt	pl
 8006778:	005b      	lslpl	r3, r3, #1
 800677a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800677e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006782:	bf58      	it	pl
 8006784:	0052      	lslpl	r2, r2, #1
 8006786:	2500      	movs	r5, #0
 8006788:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800678c:	1076      	asrs	r6, r6, #1
 800678e:	0052      	lsls	r2, r2, #1
 8006790:	f04f 0e16 	mov.w	lr, #22
 8006794:	46ac      	mov	ip, r5
 8006796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800679a:	eb0c 0001 	add.w	r0, ip, r1
 800679e:	4298      	cmp	r0, r3
 80067a0:	bfde      	ittt	le
 80067a2:	1a1b      	suble	r3, r3, r0
 80067a4:	eb00 0c01 	addle.w	ip, r0, r1
 80067a8:	186d      	addle	r5, r5, r1
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	f1be 0e01 	subs.w	lr, lr, #1
 80067b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80067b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80067b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80067bc:	d1ed      	bne.n	800679a <__ieee754_sqrt+0x8a>
 80067be:	4674      	mov	r4, lr
 80067c0:	2720      	movs	r7, #32
 80067c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80067c6:	4563      	cmp	r3, ip
 80067c8:	eb01 000e 	add.w	r0, r1, lr
 80067cc:	dc02      	bgt.n	80067d4 <__ieee754_sqrt+0xc4>
 80067ce:	d113      	bne.n	80067f8 <__ieee754_sqrt+0xe8>
 80067d0:	4290      	cmp	r0, r2
 80067d2:	d811      	bhi.n	80067f8 <__ieee754_sqrt+0xe8>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	eb00 0e01 	add.w	lr, r0, r1
 80067da:	da57      	bge.n	800688c <__ieee754_sqrt+0x17c>
 80067dc:	f1be 0f00 	cmp.w	lr, #0
 80067e0:	db54      	blt.n	800688c <__ieee754_sqrt+0x17c>
 80067e2:	f10c 0801 	add.w	r8, ip, #1
 80067e6:	eba3 030c 	sub.w	r3, r3, ip
 80067ea:	4290      	cmp	r0, r2
 80067ec:	bf88      	it	hi
 80067ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80067f2:	1a12      	subs	r2, r2, r0
 80067f4:	440c      	add	r4, r1
 80067f6:	46c4      	mov	ip, r8
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	3f01      	subs	r7, #1
 80067fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006800:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006804:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006808:	d1dd      	bne.n	80067c6 <__ieee754_sqrt+0xb6>
 800680a:	4313      	orrs	r3, r2
 800680c:	d01b      	beq.n	8006846 <__ieee754_sqrt+0x136>
 800680e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80068bc <__ieee754_sqrt+0x1ac>
 8006812:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80068c0 <__ieee754_sqrt+0x1b0>
 8006816:	e9da 0100 	ldrd	r0, r1, [sl]
 800681a:	e9db 2300 	ldrd	r2, r3, [fp]
 800681e:	f7f9 fcdf 	bl	80001e0 <__aeabi_dsub>
 8006822:	e9da 8900 	ldrd	r8, r9, [sl]
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7fa f90b 	bl	8000a48 <__aeabi_dcmple>
 8006832:	b140      	cbz	r0, 8006846 <__ieee754_sqrt+0x136>
 8006834:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006838:	e9da 0100 	ldrd	r0, r1, [sl]
 800683c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006840:	d126      	bne.n	8006890 <__ieee754_sqrt+0x180>
 8006842:	3501      	adds	r5, #1
 8006844:	463c      	mov	r4, r7
 8006846:	106a      	asrs	r2, r5, #1
 8006848:	0863      	lsrs	r3, r4, #1
 800684a:	07e9      	lsls	r1, r5, #31
 800684c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006850:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006854:	bf48      	it	mi
 8006856:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800685a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800685e:	461c      	mov	r4, r3
 8006860:	e76d      	b.n	800673e <__ieee754_sqrt+0x2e>
 8006862:	0ad3      	lsrs	r3, r2, #11
 8006864:	3815      	subs	r0, #21
 8006866:	0552      	lsls	r2, r2, #21
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0fa      	beq.n	8006862 <__ieee754_sqrt+0x152>
 800686c:	02dc      	lsls	r4, r3, #11
 800686e:	d50a      	bpl.n	8006886 <__ieee754_sqrt+0x176>
 8006870:	f1c1 0420 	rsb	r4, r1, #32
 8006874:	fa22 f404 	lsr.w	r4, r2, r4
 8006878:	1e4d      	subs	r5, r1, #1
 800687a:	408a      	lsls	r2, r1
 800687c:	4323      	orrs	r3, r4
 800687e:	1b41      	subs	r1, r0, r5
 8006880:	e772      	b.n	8006768 <__ieee754_sqrt+0x58>
 8006882:	4608      	mov	r0, r1
 8006884:	e7f0      	b.n	8006868 <__ieee754_sqrt+0x158>
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	3101      	adds	r1, #1
 800688a:	e7ef      	b.n	800686c <__ieee754_sqrt+0x15c>
 800688c:	46e0      	mov	r8, ip
 800688e:	e7aa      	b.n	80067e6 <__ieee754_sqrt+0xd6>
 8006890:	f7f9 fca8 	bl	80001e4 <__adddf3>
 8006894:	e9da 8900 	ldrd	r8, r9, [sl]
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f8c8 	bl	8000a34 <__aeabi_dcmplt>
 80068a4:	b120      	cbz	r0, 80068b0 <__ieee754_sqrt+0x1a0>
 80068a6:	1ca0      	adds	r0, r4, #2
 80068a8:	bf08      	it	eq
 80068aa:	3501      	addeq	r5, #1
 80068ac:	3402      	adds	r4, #2
 80068ae:	e7ca      	b.n	8006846 <__ieee754_sqrt+0x136>
 80068b0:	3401      	adds	r4, #1
 80068b2:	f024 0401 	bic.w	r4, r4, #1
 80068b6:	e7c6      	b.n	8006846 <__ieee754_sqrt+0x136>
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	200000a0 	.word	0x200000a0
 80068c0:	200000a8 	.word	0x200000a8

080068c4 <round>:
 80068c4:	ec53 2b10 	vmov	r2, r3, d0
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80068ce:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80068d2:	2813      	cmp	r0, #19
 80068d4:	ee10 5a10 	vmov	r5, s0
 80068d8:	4619      	mov	r1, r3
 80068da:	dc18      	bgt.n	800690e <round+0x4a>
 80068dc:	2800      	cmp	r0, #0
 80068de:	da09      	bge.n	80068f4 <round+0x30>
 80068e0:	3001      	adds	r0, #1
 80068e2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80068e6:	d103      	bne.n	80068f0 <round+0x2c>
 80068e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80068ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80068f0:	2300      	movs	r3, #0
 80068f2:	e02a      	b.n	800694a <round+0x86>
 80068f4:	4c16      	ldr	r4, [pc, #88]	; (8006950 <round+0x8c>)
 80068f6:	4104      	asrs	r4, r0
 80068f8:	ea03 0604 	and.w	r6, r3, r4
 80068fc:	4316      	orrs	r6, r2
 80068fe:	d011      	beq.n	8006924 <round+0x60>
 8006900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006904:	4103      	asrs	r3, r0
 8006906:	440b      	add	r3, r1
 8006908:	ea23 0104 	bic.w	r1, r3, r4
 800690c:	e7f0      	b.n	80068f0 <round+0x2c>
 800690e:	2833      	cmp	r0, #51	; 0x33
 8006910:	dd0b      	ble.n	800692a <round+0x66>
 8006912:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006916:	d105      	bne.n	8006924 <round+0x60>
 8006918:	ee10 0a10 	vmov	r0, s0
 800691c:	f7f9 fc62 	bl	80001e4 <__adddf3>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	ec43 2b10 	vmov	d0, r2, r3
 8006928:	bd70      	pop	{r4, r5, r6, pc}
 800692a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800692e:	f04f 34ff 	mov.w	r4, #4294967295
 8006932:	40f4      	lsrs	r4, r6
 8006934:	4214      	tst	r4, r2
 8006936:	d0f5      	beq.n	8006924 <round+0x60>
 8006938:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800693c:	2301      	movs	r3, #1
 800693e:	4083      	lsls	r3, r0
 8006940:	195b      	adds	r3, r3, r5
 8006942:	bf28      	it	cs
 8006944:	3101      	addcs	r1, #1
 8006946:	ea23 0304 	bic.w	r3, r3, r4
 800694a:	461a      	mov	r2, r3
 800694c:	460b      	mov	r3, r1
 800694e:	e7e9      	b.n	8006924 <round+0x60>
 8006950:	000fffff 	.word	0x000fffff
 8006954:	00000000 	.word	0x00000000

08006958 <__kernel_cos>:
 8006958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	ec57 6b10 	vmov	r6, r7, d0
 8006960:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006964:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006968:	ed8d 1b00 	vstr	d1, [sp]
 800696c:	da07      	bge.n	800697e <__kernel_cos+0x26>
 800696e:	ee10 0a10 	vmov	r0, s0
 8006972:	4639      	mov	r1, r7
 8006974:	f7fa f89c 	bl	8000ab0 <__aeabi_d2iz>
 8006978:	2800      	cmp	r0, #0
 800697a:	f000 8088 	beq.w	8006a8e <__kernel_cos+0x136>
 800697e:	4632      	mov	r2, r6
 8006980:	463b      	mov	r3, r7
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7f9 fde3 	bl	8000550 <__aeabi_dmul>
 800698a:	4b51      	ldr	r3, [pc, #324]	; (8006ad0 <__kernel_cos+0x178>)
 800698c:	2200      	movs	r2, #0
 800698e:	4604      	mov	r4, r0
 8006990:	460d      	mov	r5, r1
 8006992:	f7f9 fddd 	bl	8000550 <__aeabi_dmul>
 8006996:	a340      	add	r3, pc, #256	; (adr r3, 8006a98 <__kernel_cos+0x140>)
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	4682      	mov	sl, r0
 800699e:	468b      	mov	fp, r1
 80069a0:	4620      	mov	r0, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	f7f9 fdd4 	bl	8000550 <__aeabi_dmul>
 80069a8:	a33d      	add	r3, pc, #244	; (adr r3, 8006aa0 <__kernel_cos+0x148>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f7f9 fc19 	bl	80001e4 <__adddf3>
 80069b2:	4622      	mov	r2, r4
 80069b4:	462b      	mov	r3, r5
 80069b6:	f7f9 fdcb 	bl	8000550 <__aeabi_dmul>
 80069ba:	a33b      	add	r3, pc, #236	; (adr r3, 8006aa8 <__kernel_cos+0x150>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fc0e 	bl	80001e0 <__aeabi_dsub>
 80069c4:	4622      	mov	r2, r4
 80069c6:	462b      	mov	r3, r5
 80069c8:	f7f9 fdc2 	bl	8000550 <__aeabi_dmul>
 80069cc:	a338      	add	r3, pc, #224	; (adr r3, 8006ab0 <__kernel_cos+0x158>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f7f9 fc07 	bl	80001e4 <__adddf3>
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	f7f9 fdb9 	bl	8000550 <__aeabi_dmul>
 80069de:	a336      	add	r3, pc, #216	; (adr r3, 8006ab8 <__kernel_cos+0x160>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f7f9 fbfc 	bl	80001e0 <__aeabi_dsub>
 80069e8:	4622      	mov	r2, r4
 80069ea:	462b      	mov	r3, r5
 80069ec:	f7f9 fdb0 	bl	8000550 <__aeabi_dmul>
 80069f0:	a333      	add	r3, pc, #204	; (adr r3, 8006ac0 <__kernel_cos+0x168>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f7f9 fbf5 	bl	80001e4 <__adddf3>
 80069fa:	4622      	mov	r2, r4
 80069fc:	462b      	mov	r3, r5
 80069fe:	f7f9 fda7 	bl	8000550 <__aeabi_dmul>
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	f7f9 fda3 	bl	8000550 <__aeabi_dmul>
 8006a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a0e:	4604      	mov	r4, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	4630      	mov	r0, r6
 8006a14:	4639      	mov	r1, r7
 8006a16:	f7f9 fd9b 	bl	8000550 <__aeabi_dmul>
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7f9 fbdd 	bl	80001e0 <__aeabi_dsub>
 8006a26:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <__kernel_cos+0x17c>)
 8006a28:	4598      	cmp	r8, r3
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	460f      	mov	r7, r1
 8006a2e:	dc10      	bgt.n	8006a52 <__kernel_cos+0xfa>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4650      	mov	r0, sl
 8006a36:	4659      	mov	r1, fp
 8006a38:	f7f9 fbd2 	bl	80001e0 <__aeabi_dsub>
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4926      	ldr	r1, [pc, #152]	; (8006ad8 <__kernel_cos+0x180>)
 8006a40:	4602      	mov	r2, r0
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7f9 fbcc 	bl	80001e0 <__aeabi_dsub>
 8006a48:	ec41 0b10 	vmov	d0, r0, r1
 8006a4c:	b003      	add	sp, #12
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	4b22      	ldr	r3, [pc, #136]	; (8006adc <__kernel_cos+0x184>)
 8006a54:	4920      	ldr	r1, [pc, #128]	; (8006ad8 <__kernel_cos+0x180>)
 8006a56:	4598      	cmp	r8, r3
 8006a58:	bfcc      	ite	gt
 8006a5a:	4d21      	ldrgt	r5, [pc, #132]	; (8006ae0 <__kernel_cos+0x188>)
 8006a5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006a60:	2400      	movs	r4, #0
 8006a62:	4622      	mov	r2, r4
 8006a64:	462b      	mov	r3, r5
 8006a66:	2000      	movs	r0, #0
 8006a68:	f7f9 fbba 	bl	80001e0 <__aeabi_dsub>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	4680      	mov	r8, r0
 8006a70:	4689      	mov	r9, r1
 8006a72:	462b      	mov	r3, r5
 8006a74:	4650      	mov	r0, sl
 8006a76:	4659      	mov	r1, fp
 8006a78:	f7f9 fbb2 	bl	80001e0 <__aeabi_dsub>
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	f7f9 fbae 	bl	80001e0 <__aeabi_dsub>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	e7da      	b.n	8006a44 <__kernel_cos+0xec>
 8006a8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006ac8 <__kernel_cos+0x170>
 8006a92:	e7db      	b.n	8006a4c <__kernel_cos+0xf4>
 8006a94:	f3af 8000 	nop.w
 8006a98:	be8838d4 	.word	0xbe8838d4
 8006a9c:	bda8fae9 	.word	0xbda8fae9
 8006aa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006aa4:	3e21ee9e 	.word	0x3e21ee9e
 8006aa8:	809c52ad 	.word	0x809c52ad
 8006aac:	3e927e4f 	.word	0x3e927e4f
 8006ab0:	19cb1590 	.word	0x19cb1590
 8006ab4:	3efa01a0 	.word	0x3efa01a0
 8006ab8:	16c15177 	.word	0x16c15177
 8006abc:	3f56c16c 	.word	0x3f56c16c
 8006ac0:	5555554c 	.word	0x5555554c
 8006ac4:	3fa55555 	.word	0x3fa55555
 8006ac8:	00000000 	.word	0x00000000
 8006acc:	3ff00000 	.word	0x3ff00000
 8006ad0:	3fe00000 	.word	0x3fe00000
 8006ad4:	3fd33332 	.word	0x3fd33332
 8006ad8:	3ff00000 	.word	0x3ff00000
 8006adc:	3fe90000 	.word	0x3fe90000
 8006ae0:	3fd20000 	.word	0x3fd20000
 8006ae4:	00000000 	.word	0x00000000

08006ae8 <__kernel_sin>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	ed2d 8b04 	vpush	{d8-d9}
 8006af0:	eeb0 8a41 	vmov.f32	s16, s2
 8006af4:	eef0 8a61 	vmov.f32	s17, s3
 8006af8:	ec55 4b10 	vmov	r4, r5, d0
 8006afc:	b083      	sub	sp, #12
 8006afe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006b06:	9001      	str	r0, [sp, #4]
 8006b08:	da06      	bge.n	8006b18 <__kernel_sin+0x30>
 8006b0a:	ee10 0a10 	vmov	r0, s0
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f7f9 ffce 	bl	8000ab0 <__aeabi_d2iz>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d051      	beq.n	8006bbc <__kernel_sin+0xd4>
 8006b18:	4622      	mov	r2, r4
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 fd16 	bl	8000550 <__aeabi_dmul>
 8006b24:	4682      	mov	sl, r0
 8006b26:	468b      	mov	fp, r1
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7f9 fd0e 	bl	8000550 <__aeabi_dmul>
 8006b34:	a341      	add	r3, pc, #260	; (adr r3, 8006c3c <__kernel_sin+0x154>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	4689      	mov	r9, r1
 8006b3e:	4650      	mov	r0, sl
 8006b40:	4659      	mov	r1, fp
 8006b42:	f7f9 fd05 	bl	8000550 <__aeabi_dmul>
 8006b46:	a33f      	add	r3, pc, #252	; (adr r3, 8006c44 <__kernel_sin+0x15c>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fb48 	bl	80001e0 <__aeabi_dsub>
 8006b50:	4652      	mov	r2, sl
 8006b52:	465b      	mov	r3, fp
 8006b54:	f7f9 fcfc 	bl	8000550 <__aeabi_dmul>
 8006b58:	a33c      	add	r3, pc, #240	; (adr r3, 8006c4c <__kernel_sin+0x164>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fb41 	bl	80001e4 <__adddf3>
 8006b62:	4652      	mov	r2, sl
 8006b64:	465b      	mov	r3, fp
 8006b66:	f7f9 fcf3 	bl	8000550 <__aeabi_dmul>
 8006b6a:	a33a      	add	r3, pc, #232	; (adr r3, 8006c54 <__kernel_sin+0x16c>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fb36 	bl	80001e0 <__aeabi_dsub>
 8006b74:	4652      	mov	r2, sl
 8006b76:	465b      	mov	r3, fp
 8006b78:	f7f9 fcea 	bl	8000550 <__aeabi_dmul>
 8006b7c:	a337      	add	r3, pc, #220	; (adr r3, 8006c5c <__kernel_sin+0x174>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fb2f 	bl	80001e4 <__adddf3>
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	b9eb      	cbnz	r3, 8006bca <__kernel_sin+0xe2>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4650      	mov	r0, sl
 8006b94:	4659      	mov	r1, fp
 8006b96:	f7f9 fcdb 	bl	8000550 <__aeabi_dmul>
 8006b9a:	a325      	add	r3, pc, #148	; (adr r3, 8006c30 <__kernel_sin+0x148>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 fb1e 	bl	80001e0 <__aeabi_dsub>
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	f7f9 fcd2 	bl	8000550 <__aeabi_dmul>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fb16 	bl	80001e4 <__adddf3>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	ec45 4b10 	vmov	d0, r4, r5
 8006bc0:	b003      	add	sp, #12
 8006bc2:	ecbd 8b04 	vpop	{d8-d9}
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <__kernel_sin+0x150>)
 8006bcc:	ec51 0b18 	vmov	r0, r1, d8
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f7f9 fcbd 	bl	8000550 <__aeabi_dmul>
 8006bd6:	4632      	mov	r2, r6
 8006bd8:	ec41 0b19 	vmov	d9, r0, r1
 8006bdc:	463b      	mov	r3, r7
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 fcb5 	bl	8000550 <__aeabi_dmul>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	ec51 0b19 	vmov	r0, r1, d9
 8006bee:	f7f9 faf7 	bl	80001e0 <__aeabi_dsub>
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	f7f9 fcab 	bl	8000550 <__aeabi_dmul>
 8006bfa:	ec53 2b18 	vmov	r2, r3, d8
 8006bfe:	f7f9 faef 	bl	80001e0 <__aeabi_dsub>
 8006c02:	a30b      	add	r3, pc, #44	; (adr r3, 8006c30 <__kernel_sin+0x148>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4649      	mov	r1, r9
 8006c10:	f7f9 fc9e 	bl	8000550 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 fae2 	bl	80001e4 <__adddf3>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 fada 	bl	80001e0 <__aeabi_dsub>
 8006c2c:	e7c4      	b.n	8006bb8 <__kernel_sin+0xd0>
 8006c2e:	bf00      	nop
 8006c30:	55555549 	.word	0x55555549
 8006c34:	3fc55555 	.word	0x3fc55555
 8006c38:	3fe00000 	.word	0x3fe00000
 8006c3c:	5acfd57c 	.word	0x5acfd57c
 8006c40:	3de5d93a 	.word	0x3de5d93a
 8006c44:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c48:	3e5ae5e6 	.word	0x3e5ae5e6
 8006c4c:	57b1fe7d 	.word	0x57b1fe7d
 8006c50:	3ec71de3 	.word	0x3ec71de3
 8006c54:	19c161d5 	.word	0x19c161d5
 8006c58:	3f2a01a0 	.word	0x3f2a01a0
 8006c5c:	1110f8a6 	.word	0x1110f8a6
 8006c60:	3f811111 	.word	0x3f811111
 8006c64:	00000000 	.word	0x00000000

08006c68 <__ieee754_pow>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	ed2d 8b06 	vpush	{d8-d10}
 8006c70:	b089      	sub	sp, #36	; 0x24
 8006c72:	ed8d 1b00 	vstr	d1, [sp]
 8006c76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006c7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006c7e:	ea58 0102 	orrs.w	r1, r8, r2
 8006c82:	ec57 6b10 	vmov	r6, r7, d0
 8006c86:	d115      	bne.n	8006cb4 <__ieee754_pow+0x4c>
 8006c88:	19b3      	adds	r3, r6, r6
 8006c8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006c8e:	4152      	adcs	r2, r2
 8006c90:	4299      	cmp	r1, r3
 8006c92:	4b89      	ldr	r3, [pc, #548]	; (8006eb8 <__ieee754_pow+0x250>)
 8006c94:	4193      	sbcs	r3, r2
 8006c96:	f080 84d1 	bcs.w	800763c <__ieee754_pow+0x9d4>
 8006c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fa9f 	bl	80001e4 <__adddf3>
 8006ca6:	ec41 0b10 	vmov	d0, r0, r1
 8006caa:	b009      	add	sp, #36	; 0x24
 8006cac:	ecbd 8b06 	vpop	{d8-d10}
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	4b81      	ldr	r3, [pc, #516]	; (8006ebc <__ieee754_pow+0x254>)
 8006cb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	ee10 aa10 	vmov	sl, s0
 8006cc0:	463d      	mov	r5, r7
 8006cc2:	dc06      	bgt.n	8006cd2 <__ieee754_pow+0x6a>
 8006cc4:	d101      	bne.n	8006cca <__ieee754_pow+0x62>
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d1e7      	bne.n	8006c9a <__ieee754_pow+0x32>
 8006cca:	4598      	cmp	r8, r3
 8006ccc:	dc01      	bgt.n	8006cd2 <__ieee754_pow+0x6a>
 8006cce:	d10f      	bne.n	8006cf0 <__ieee754_pow+0x88>
 8006cd0:	b172      	cbz	r2, 8006cf0 <__ieee754_pow+0x88>
 8006cd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006cd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006cda:	ea55 050a 	orrs.w	r5, r5, sl
 8006cde:	d1dc      	bne.n	8006c9a <__ieee754_pow+0x32>
 8006ce0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ce4:	18db      	adds	r3, r3, r3
 8006ce6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006cea:	4152      	adcs	r2, r2
 8006cec:	429d      	cmp	r5, r3
 8006cee:	e7d0      	b.n	8006c92 <__ieee754_pow+0x2a>
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	da3b      	bge.n	8006d6c <__ieee754_pow+0x104>
 8006cf4:	4b72      	ldr	r3, [pc, #456]	; (8006ec0 <__ieee754_pow+0x258>)
 8006cf6:	4598      	cmp	r8, r3
 8006cf8:	dc51      	bgt.n	8006d9e <__ieee754_pow+0x136>
 8006cfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006cfe:	4598      	cmp	r8, r3
 8006d00:	f340 84ab 	ble.w	800765a <__ieee754_pow+0x9f2>
 8006d04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d0c:	2b14      	cmp	r3, #20
 8006d0e:	dd0f      	ble.n	8006d30 <__ieee754_pow+0xc8>
 8006d10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d14:	fa22 f103 	lsr.w	r1, r2, r3
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	f040 849c 	bne.w	800765a <__ieee754_pow+0x9f2>
 8006d22:	f001 0101 	and.w	r1, r1, #1
 8006d26:	f1c1 0302 	rsb	r3, r1, #2
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	b182      	cbz	r2, 8006d50 <__ieee754_pow+0xe8>
 8006d2e:	e05f      	b.n	8006df0 <__ieee754_pow+0x188>
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	d15b      	bne.n	8006dec <__ieee754_pow+0x184>
 8006d34:	f1c3 0314 	rsb	r3, r3, #20
 8006d38:	fa48 f103 	asr.w	r1, r8, r3
 8006d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d40:	4543      	cmp	r3, r8
 8006d42:	f040 8487 	bne.w	8007654 <__ieee754_pow+0x9ec>
 8006d46:	f001 0101 	and.w	r1, r1, #1
 8006d4a:	f1c1 0302 	rsb	r3, r1, #2
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	4b5c      	ldr	r3, [pc, #368]	; (8006ec4 <__ieee754_pow+0x25c>)
 8006d52:	4598      	cmp	r8, r3
 8006d54:	d132      	bne.n	8006dbc <__ieee754_pow+0x154>
 8006d56:	f1b9 0f00 	cmp.w	r9, #0
 8006d5a:	f280 8477 	bge.w	800764c <__ieee754_pow+0x9e4>
 8006d5e:	4959      	ldr	r1, [pc, #356]	; (8006ec4 <__ieee754_pow+0x25c>)
 8006d60:	4632      	mov	r2, r6
 8006d62:	463b      	mov	r3, r7
 8006d64:	2000      	movs	r0, #0
 8006d66:	f7f9 fd1d 	bl	80007a4 <__aeabi_ddiv>
 8006d6a:	e79c      	b.n	8006ca6 <__ieee754_pow+0x3e>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d13d      	bne.n	8006df0 <__ieee754_pow+0x188>
 8006d74:	4b51      	ldr	r3, [pc, #324]	; (8006ebc <__ieee754_pow+0x254>)
 8006d76:	4598      	cmp	r8, r3
 8006d78:	d1ea      	bne.n	8006d50 <__ieee754_pow+0xe8>
 8006d7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d82:	ea53 030a 	orrs.w	r3, r3, sl
 8006d86:	f000 8459 	beq.w	800763c <__ieee754_pow+0x9d4>
 8006d8a:	4b4f      	ldr	r3, [pc, #316]	; (8006ec8 <__ieee754_pow+0x260>)
 8006d8c:	429c      	cmp	r4, r3
 8006d8e:	dd08      	ble.n	8006da2 <__ieee754_pow+0x13a>
 8006d90:	f1b9 0f00 	cmp.w	r9, #0
 8006d94:	f2c0 8456 	blt.w	8007644 <__ieee754_pow+0x9dc>
 8006d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d9c:	e783      	b.n	8006ca6 <__ieee754_pow+0x3e>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e7e5      	b.n	8006d6e <__ieee754_pow+0x106>
 8006da2:	f1b9 0f00 	cmp.w	r9, #0
 8006da6:	f04f 0000 	mov.w	r0, #0
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	f6bf af7a 	bge.w	8006ca6 <__ieee754_pow+0x3e>
 8006db2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006db6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006dba:	e774      	b.n	8006ca6 <__ieee754_pow+0x3e>
 8006dbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006dc0:	d106      	bne.n	8006dd0 <__ieee754_pow+0x168>
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 fbc1 	bl	8000550 <__aeabi_dmul>
 8006dce:	e76a      	b.n	8006ca6 <__ieee754_pow+0x3e>
 8006dd0:	4b3e      	ldr	r3, [pc, #248]	; (8006ecc <__ieee754_pow+0x264>)
 8006dd2:	4599      	cmp	r9, r3
 8006dd4:	d10c      	bne.n	8006df0 <__ieee754_pow+0x188>
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	db0a      	blt.n	8006df0 <__ieee754_pow+0x188>
 8006dda:	ec47 6b10 	vmov	d0, r6, r7
 8006dde:	b009      	add	sp, #36	; 0x24
 8006de0:	ecbd 8b06 	vpop	{d8-d10}
 8006de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	f7ff bc92 	b.w	8006710 <__ieee754_sqrt>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	ec47 6b10 	vmov	d0, r6, r7
 8006df4:	f000 fe6a 	bl	8007acc <fabs>
 8006df8:	ec51 0b10 	vmov	r0, r1, d0
 8006dfc:	f1ba 0f00 	cmp.w	sl, #0
 8006e00:	d129      	bne.n	8006e56 <__ieee754_pow+0x1ee>
 8006e02:	b124      	cbz	r4, 8006e0e <__ieee754_pow+0x1a6>
 8006e04:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <__ieee754_pow+0x25c>)
 8006e06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d123      	bne.n	8006e56 <__ieee754_pow+0x1ee>
 8006e0e:	f1b9 0f00 	cmp.w	r9, #0
 8006e12:	da05      	bge.n	8006e20 <__ieee754_pow+0x1b8>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	2000      	movs	r0, #0
 8006e1a:	492a      	ldr	r1, [pc, #168]	; (8006ec4 <__ieee754_pow+0x25c>)
 8006e1c:	f7f9 fcc2 	bl	80007a4 <__aeabi_ddiv>
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	f6bf af40 	bge.w	8006ca6 <__ieee754_pow+0x3e>
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e30:	431c      	orrs	r4, r3
 8006e32:	d108      	bne.n	8006e46 <__ieee754_pow+0x1de>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f7f9 f9d0 	bl	80001e0 <__aeabi_dsub>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	e78f      	b.n	8006d66 <__ieee754_pow+0xfe>
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	f47f af2c 	bne.w	8006ca6 <__ieee754_pow+0x3e>
 8006e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e52:	4619      	mov	r1, r3
 8006e54:	e727      	b.n	8006ca6 <__ieee754_pow+0x3e>
 8006e56:	0feb      	lsrs	r3, r5, #31
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	9306      	str	r3, [sp, #24]
 8006e5c:	9a06      	ldr	r2, [sp, #24]
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	d102      	bne.n	8006e6a <__ieee754_pow+0x202>
 8006e64:	4632      	mov	r2, r6
 8006e66:	463b      	mov	r3, r7
 8006e68:	e7e6      	b.n	8006e38 <__ieee754_pow+0x1d0>
 8006e6a:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <__ieee754_pow+0x268>)
 8006e6c:	4598      	cmp	r8, r3
 8006e6e:	f340 80fb 	ble.w	8007068 <__ieee754_pow+0x400>
 8006e72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006e76:	4598      	cmp	r8, r3
 8006e78:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <__ieee754_pow+0x260>)
 8006e7a:	dd0c      	ble.n	8006e96 <__ieee754_pow+0x22e>
 8006e7c:	429c      	cmp	r4, r3
 8006e7e:	dc0f      	bgt.n	8006ea0 <__ieee754_pow+0x238>
 8006e80:	f1b9 0f00 	cmp.w	r9, #0
 8006e84:	da0f      	bge.n	8006ea6 <__ieee754_pow+0x23e>
 8006e86:	2000      	movs	r0, #0
 8006e88:	b009      	add	sp, #36	; 0x24
 8006e8a:	ecbd 8b06 	vpop	{d8-d10}
 8006e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e92:	f000 beca 	b.w	8007c2a <__math_oflow>
 8006e96:	429c      	cmp	r4, r3
 8006e98:	dbf2      	blt.n	8006e80 <__ieee754_pow+0x218>
 8006e9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <__ieee754_pow+0x25c>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	dd19      	ble.n	8006ed4 <__ieee754_pow+0x26c>
 8006ea0:	f1b9 0f00 	cmp.w	r9, #0
 8006ea4:	dcef      	bgt.n	8006e86 <__ieee754_pow+0x21e>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	b009      	add	sp, #36	; 0x24
 8006eaa:	ecbd 8b06 	vpop	{d8-d10}
 8006eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb2:	f000 beb1 	b.w	8007c18 <__math_uflow>
 8006eb6:	bf00      	nop
 8006eb8:	fff00000 	.word	0xfff00000
 8006ebc:	7ff00000 	.word	0x7ff00000
 8006ec0:	433fffff 	.word	0x433fffff
 8006ec4:	3ff00000 	.word	0x3ff00000
 8006ec8:	3fefffff 	.word	0x3fefffff
 8006ecc:	3fe00000 	.word	0x3fe00000
 8006ed0:	41e00000 	.word	0x41e00000
 8006ed4:	4b60      	ldr	r3, [pc, #384]	; (8007058 <__ieee754_pow+0x3f0>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f7f9 f982 	bl	80001e0 <__aeabi_dsub>
 8006edc:	a354      	add	r3, pc, #336	; (adr r3, 8007030 <__ieee754_pow+0x3c8>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	f7f9 fb33 	bl	8000550 <__aeabi_dmul>
 8006eea:	a353      	add	r3, pc, #332	; (adr r3, 8007038 <__ieee754_pow+0x3d0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	460f      	mov	r7, r1
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 fb2a 	bl	8000550 <__aeabi_dmul>
 8006efc:	4b57      	ldr	r3, [pc, #348]	; (800705c <__ieee754_pow+0x3f4>)
 8006efe:	4682      	mov	sl, r0
 8006f00:	468b      	mov	fp, r1
 8006f02:	2200      	movs	r2, #0
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 fb22 	bl	8000550 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	a14b      	add	r1, pc, #300	; (adr r1, 8007040 <__ieee754_pow+0x3d8>)
 8006f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f16:	f7f9 f963 	bl	80001e0 <__aeabi_dsub>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	f7f9 fb17 	bl	8000550 <__aeabi_dmul>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	2000      	movs	r0, #0
 8006f28:	494d      	ldr	r1, [pc, #308]	; (8007060 <__ieee754_pow+0x3f8>)
 8006f2a:	f7f9 f959 	bl	80001e0 <__aeabi_dsub>
 8006f2e:	4622      	mov	r2, r4
 8006f30:	4680      	mov	r8, r0
 8006f32:	4689      	mov	r9, r1
 8006f34:	462b      	mov	r3, r5
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 fb09 	bl	8000550 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 fb03 	bl	8000550 <__aeabi_dmul>
 8006f4a:	a33f      	add	r3, pc, #252	; (adr r3, 8007048 <__ieee754_pow+0x3e0>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f7f9 fafe 	bl	8000550 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4650      	mov	r0, sl
 8006f5a:	4659      	mov	r1, fp
 8006f5c:	f7f9 f940 	bl	80001e0 <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4680      	mov	r8, r0
 8006f66:	4689      	mov	r9, r1
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 f93a 	bl	80001e4 <__adddf3>
 8006f70:	2000      	movs	r0, #0
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	f7f9 f931 	bl	80001e0 <__aeabi_dsub>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 f92b 	bl	80001e0 <__aeabi_dsub>
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	9a06      	ldr	r2, [sp, #24]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	4682      	mov	sl, r0
 8006f94:	468b      	mov	fp, r1
 8006f96:	f040 81e7 	bne.w	8007368 <__ieee754_pow+0x700>
 8006f9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007050 <__ieee754_pow+0x3e8>
 8006f9e:	eeb0 8a47 	vmov.f32	s16, s14
 8006fa2:	eef0 8a67 	vmov.f32	s17, s15
 8006fa6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006faa:	2600      	movs	r6, #0
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb4:	f7f9 f914 	bl	80001e0 <__aeabi_dsub>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	462b      	mov	r3, r5
 8006fbc:	f7f9 fac8 	bl	8000550 <__aeabi_dmul>
 8006fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	4650      	mov	r0, sl
 8006fca:	4659      	mov	r1, fp
 8006fcc:	f7f9 fac0 	bl	8000550 <__aeabi_dmul>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 f904 	bl	80001e4 <__adddf3>
 8006fdc:	4632      	mov	r2, r6
 8006fde:	463b      	mov	r3, r7
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	4689      	mov	r9, r1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	f7f9 fab2 	bl	8000550 <__aeabi_dmul>
 8006fec:	460b      	mov	r3, r1
 8006fee:	4604      	mov	r4, r0
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	f7f9 f8f4 	bl	80001e4 <__adddf3>
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <__ieee754_pow+0x3fc>)
 8006ffe:	4299      	cmp	r1, r3
 8007000:	ec45 4b19 	vmov	d9, r4, r5
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	468b      	mov	fp, r1
 800700a:	f340 82f0 	ble.w	80075ee <__ieee754_pow+0x986>
 800700e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007012:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007016:	4303      	orrs	r3, r0
 8007018:	f000 81e4 	beq.w	80073e4 <__ieee754_pow+0x77c>
 800701c:	ec51 0b18 	vmov	r0, r1, d8
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	f7f9 fd06 	bl	8000a34 <__aeabi_dcmplt>
 8007028:	3800      	subs	r0, #0
 800702a:	bf18      	it	ne
 800702c:	2001      	movne	r0, #1
 800702e:	e72b      	b.n	8006e88 <__ieee754_pow+0x220>
 8007030:	60000000 	.word	0x60000000
 8007034:	3ff71547 	.word	0x3ff71547
 8007038:	f85ddf44 	.word	0xf85ddf44
 800703c:	3e54ae0b 	.word	0x3e54ae0b
 8007040:	55555555 	.word	0x55555555
 8007044:	3fd55555 	.word	0x3fd55555
 8007048:	652b82fe 	.word	0x652b82fe
 800704c:	3ff71547 	.word	0x3ff71547
 8007050:	00000000 	.word	0x00000000
 8007054:	bff00000 	.word	0xbff00000
 8007058:	3ff00000 	.word	0x3ff00000
 800705c:	3fd00000 	.word	0x3fd00000
 8007060:	3fe00000 	.word	0x3fe00000
 8007064:	408fffff 	.word	0x408fffff
 8007068:	4bd5      	ldr	r3, [pc, #852]	; (80073c0 <__ieee754_pow+0x758>)
 800706a:	402b      	ands	r3, r5
 800706c:	2200      	movs	r2, #0
 800706e:	b92b      	cbnz	r3, 800707c <__ieee754_pow+0x414>
 8007070:	4bd4      	ldr	r3, [pc, #848]	; (80073c4 <__ieee754_pow+0x75c>)
 8007072:	f7f9 fa6d 	bl	8000550 <__aeabi_dmul>
 8007076:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800707a:	460c      	mov	r4, r1
 800707c:	1523      	asrs	r3, r4, #20
 800707e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007082:	4413      	add	r3, r2
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	4bd0      	ldr	r3, [pc, #832]	; (80073c8 <__ieee754_pow+0x760>)
 8007088:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800708c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007090:	429c      	cmp	r4, r3
 8007092:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007096:	dd08      	ble.n	80070aa <__ieee754_pow+0x442>
 8007098:	4bcc      	ldr	r3, [pc, #816]	; (80073cc <__ieee754_pow+0x764>)
 800709a:	429c      	cmp	r4, r3
 800709c:	f340 8162 	ble.w	8007364 <__ieee754_pow+0x6fc>
 80070a0:	9b05      	ldr	r3, [sp, #20]
 80070a2:	3301      	adds	r3, #1
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070aa:	2400      	movs	r4, #0
 80070ac:	00e3      	lsls	r3, r4, #3
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	4bc7      	ldr	r3, [pc, #796]	; (80073d0 <__ieee754_pow+0x768>)
 80070b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070b6:	ed93 7b00 	vldr	d7, [r3]
 80070ba:	4629      	mov	r1, r5
 80070bc:	ec53 2b17 	vmov	r2, r3, d7
 80070c0:	eeb0 9a47 	vmov.f32	s18, s14
 80070c4:	eef0 9a67 	vmov.f32	s19, s15
 80070c8:	4682      	mov	sl, r0
 80070ca:	f7f9 f889 	bl	80001e0 <__aeabi_dsub>
 80070ce:	4652      	mov	r2, sl
 80070d0:	4606      	mov	r6, r0
 80070d2:	460f      	mov	r7, r1
 80070d4:	462b      	mov	r3, r5
 80070d6:	ec51 0b19 	vmov	r0, r1, d9
 80070da:	f7f9 f883 	bl	80001e4 <__adddf3>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	2000      	movs	r0, #0
 80070e4:	49bb      	ldr	r1, [pc, #748]	; (80073d4 <__ieee754_pow+0x76c>)
 80070e6:	f7f9 fb5d 	bl	80007a4 <__aeabi_ddiv>
 80070ea:	ec41 0b1a 	vmov	d10, r0, r1
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4630      	mov	r0, r6
 80070f4:	4639      	mov	r1, r7
 80070f6:	f7f9 fa2b 	bl	8000550 <__aeabi_dmul>
 80070fa:	2300      	movs	r3, #0
 80070fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007100:	9302      	str	r3, [sp, #8]
 8007102:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007106:	46ab      	mov	fp, r5
 8007108:	106d      	asrs	r5, r5, #1
 800710a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800710e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007112:	ec41 0b18 	vmov	d8, r0, r1
 8007116:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800711a:	2200      	movs	r2, #0
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	4614      	mov	r4, r2
 8007122:	461d      	mov	r5, r3
 8007124:	f7f9 fa14 	bl	8000550 <__aeabi_dmul>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4630      	mov	r0, r6
 800712e:	4639      	mov	r1, r7
 8007130:	f7f9 f856 	bl	80001e0 <__aeabi_dsub>
 8007134:	ec53 2b19 	vmov	r2, r3, d9
 8007138:	4606      	mov	r6, r0
 800713a:	460f      	mov	r7, r1
 800713c:	4620      	mov	r0, r4
 800713e:	4629      	mov	r1, r5
 8007140:	f7f9 f84e 	bl	80001e0 <__aeabi_dsub>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4650      	mov	r0, sl
 800714a:	4659      	mov	r1, fp
 800714c:	f7f9 f848 	bl	80001e0 <__aeabi_dsub>
 8007150:	4642      	mov	r2, r8
 8007152:	464b      	mov	r3, r9
 8007154:	f7f9 f9fc 	bl	8000550 <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4630      	mov	r0, r6
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 f83e 	bl	80001e0 <__aeabi_dsub>
 8007164:	ec53 2b1a 	vmov	r2, r3, d10
 8007168:	f7f9 f9f2 	bl	8000550 <__aeabi_dmul>
 800716c:	ec53 2b18 	vmov	r2, r3, d8
 8007170:	ec41 0b19 	vmov	d9, r0, r1
 8007174:	ec51 0b18 	vmov	r0, r1, d8
 8007178:	f7f9 f9ea 	bl	8000550 <__aeabi_dmul>
 800717c:	a37c      	add	r3, pc, #496	; (adr r3, 8007370 <__ieee754_pow+0x708>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	4604      	mov	r4, r0
 8007184:	460d      	mov	r5, r1
 8007186:	f7f9 f9e3 	bl	8000550 <__aeabi_dmul>
 800718a:	a37b      	add	r3, pc, #492	; (adr r3, 8007378 <__ieee754_pow+0x710>)
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f7f9 f828 	bl	80001e4 <__adddf3>
 8007194:	4622      	mov	r2, r4
 8007196:	462b      	mov	r3, r5
 8007198:	f7f9 f9da 	bl	8000550 <__aeabi_dmul>
 800719c:	a378      	add	r3, pc, #480	; (adr r3, 8007380 <__ieee754_pow+0x718>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f9 f81f 	bl	80001e4 <__adddf3>
 80071a6:	4622      	mov	r2, r4
 80071a8:	462b      	mov	r3, r5
 80071aa:	f7f9 f9d1 	bl	8000550 <__aeabi_dmul>
 80071ae:	a376      	add	r3, pc, #472	; (adr r3, 8007388 <__ieee754_pow+0x720>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f7f9 f816 	bl	80001e4 <__adddf3>
 80071b8:	4622      	mov	r2, r4
 80071ba:	462b      	mov	r3, r5
 80071bc:	f7f9 f9c8 	bl	8000550 <__aeabi_dmul>
 80071c0:	a373      	add	r3, pc, #460	; (adr r3, 8007390 <__ieee754_pow+0x728>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 f80d 	bl	80001e4 <__adddf3>
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	f7f9 f9bf 	bl	8000550 <__aeabi_dmul>
 80071d2:	a371      	add	r3, pc, #452	; (adr r3, 8007398 <__ieee754_pow+0x730>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 f804 	bl	80001e4 <__adddf3>
 80071dc:	4622      	mov	r2, r4
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	462b      	mov	r3, r5
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 f9b2 	bl	8000550 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 f9ac 	bl	8000550 <__aeabi_dmul>
 80071f8:	4642      	mov	r2, r8
 80071fa:	4604      	mov	r4, r0
 80071fc:	460d      	mov	r5, r1
 80071fe:	464b      	mov	r3, r9
 8007200:	ec51 0b18 	vmov	r0, r1, d8
 8007204:	f7f8 ffee 	bl	80001e4 <__adddf3>
 8007208:	ec53 2b19 	vmov	r2, r3, d9
 800720c:	f7f9 f9a0 	bl	8000550 <__aeabi_dmul>
 8007210:	4622      	mov	r2, r4
 8007212:	462b      	mov	r3, r5
 8007214:	f7f8 ffe6 	bl	80001e4 <__adddf3>
 8007218:	4642      	mov	r2, r8
 800721a:	4682      	mov	sl, r0
 800721c:	468b      	mov	fp, r1
 800721e:	464b      	mov	r3, r9
 8007220:	4640      	mov	r0, r8
 8007222:	4649      	mov	r1, r9
 8007224:	f7f9 f994 	bl	8000550 <__aeabi_dmul>
 8007228:	4b6b      	ldr	r3, [pc, #428]	; (80073d8 <__ieee754_pow+0x770>)
 800722a:	2200      	movs	r2, #0
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	f7f8 ffd8 	bl	80001e4 <__adddf3>
 8007234:	4652      	mov	r2, sl
 8007236:	465b      	mov	r3, fp
 8007238:	f7f8 ffd4 	bl	80001e4 <__adddf3>
 800723c:	2000      	movs	r0, #0
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 f981 	bl	8000550 <__aeabi_dmul>
 800724e:	4b62      	ldr	r3, [pc, #392]	; (80073d8 <__ieee754_pow+0x770>)
 8007250:	4680      	mov	r8, r0
 8007252:	4689      	mov	r9, r1
 8007254:	2200      	movs	r2, #0
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f8 ffc1 	bl	80001e0 <__aeabi_dsub>
 800725e:	4632      	mov	r2, r6
 8007260:	463b      	mov	r3, r7
 8007262:	f7f8 ffbd 	bl	80001e0 <__aeabi_dsub>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	f7f8 ffb7 	bl	80001e0 <__aeabi_dsub>
 8007272:	ec53 2b18 	vmov	r2, r3, d8
 8007276:	f7f9 f96b 	bl	8000550 <__aeabi_dmul>
 800727a:	4622      	mov	r2, r4
 800727c:	4606      	mov	r6, r0
 800727e:	460f      	mov	r7, r1
 8007280:	462b      	mov	r3, r5
 8007282:	ec51 0b19 	vmov	r0, r1, d9
 8007286:	f7f9 f963 	bl	8000550 <__aeabi_dmul>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4630      	mov	r0, r6
 8007290:	4639      	mov	r1, r7
 8007292:	f7f8 ffa7 	bl	80001e4 <__adddf3>
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4640      	mov	r0, r8
 80072a0:	4649      	mov	r1, r9
 80072a2:	f7f8 ff9f 	bl	80001e4 <__adddf3>
 80072a6:	a33e      	add	r3, pc, #248	; (adr r3, 80073a0 <__ieee754_pow+0x738>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	2000      	movs	r0, #0
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	f7f9 f94d 	bl	8000550 <__aeabi_dmul>
 80072b6:	4642      	mov	r2, r8
 80072b8:	ec41 0b18 	vmov	d8, r0, r1
 80072bc:	464b      	mov	r3, r9
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f8 ff8d 	bl	80001e0 <__aeabi_dsub>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f8 ff87 	bl	80001e0 <__aeabi_dsub>
 80072d2:	a335      	add	r3, pc, #212	; (adr r3, 80073a8 <__ieee754_pow+0x740>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f7f9 f93a 	bl	8000550 <__aeabi_dmul>
 80072dc:	a334      	add	r3, pc, #208	; (adr r3, 80073b0 <__ieee754_pow+0x748>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 f931 	bl	8000550 <__aeabi_dmul>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4630      	mov	r0, r6
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f8 ff75 	bl	80001e4 <__adddf3>
 80072fa:	9a07      	ldr	r2, [sp, #28]
 80072fc:	4b37      	ldr	r3, [pc, #220]	; (80073dc <__ieee754_pow+0x774>)
 80072fe:	4413      	add	r3, r2
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f7f8 ff6e 	bl	80001e4 <__adddf3>
 8007308:	4682      	mov	sl, r0
 800730a:	9805      	ldr	r0, [sp, #20]
 800730c:	468b      	mov	fp, r1
 800730e:	f7f9 f8b5 	bl	800047c <__aeabi_i2d>
 8007312:	9a07      	ldr	r2, [sp, #28]
 8007314:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <__ieee754_pow+0x778>)
 8007316:	4413      	add	r3, r2
 8007318:	e9d3 8900 	ldrd	r8, r9, [r3]
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	4652      	mov	r2, sl
 8007322:	465b      	mov	r3, fp
 8007324:	ec51 0b18 	vmov	r0, r1, d8
 8007328:	f7f8 ff5c 	bl	80001e4 <__adddf3>
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	f7f8 ff58 	bl	80001e4 <__adddf3>
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	f7f8 ff54 	bl	80001e4 <__adddf3>
 800733c:	2000      	movs	r0, #0
 800733e:	4632      	mov	r2, r6
 8007340:	463b      	mov	r3, r7
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	f7f8 ff4b 	bl	80001e0 <__aeabi_dsub>
 800734a:	4642      	mov	r2, r8
 800734c:	464b      	mov	r3, r9
 800734e:	f7f8 ff47 	bl	80001e0 <__aeabi_dsub>
 8007352:	ec53 2b18 	vmov	r2, r3, d8
 8007356:	f7f8 ff43 	bl	80001e0 <__aeabi_dsub>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4650      	mov	r0, sl
 8007360:	4659      	mov	r1, fp
 8007362:	e610      	b.n	8006f86 <__ieee754_pow+0x31e>
 8007364:	2401      	movs	r4, #1
 8007366:	e6a1      	b.n	80070ac <__ieee754_pow+0x444>
 8007368:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80073b8 <__ieee754_pow+0x750>
 800736c:	e617      	b.n	8006f9e <__ieee754_pow+0x336>
 800736e:	bf00      	nop
 8007370:	4a454eef 	.word	0x4a454eef
 8007374:	3fca7e28 	.word	0x3fca7e28
 8007378:	93c9db65 	.word	0x93c9db65
 800737c:	3fcd864a 	.word	0x3fcd864a
 8007380:	a91d4101 	.word	0xa91d4101
 8007384:	3fd17460 	.word	0x3fd17460
 8007388:	518f264d 	.word	0x518f264d
 800738c:	3fd55555 	.word	0x3fd55555
 8007390:	db6fabff 	.word	0xdb6fabff
 8007394:	3fdb6db6 	.word	0x3fdb6db6
 8007398:	33333303 	.word	0x33333303
 800739c:	3fe33333 	.word	0x3fe33333
 80073a0:	e0000000 	.word	0xe0000000
 80073a4:	3feec709 	.word	0x3feec709
 80073a8:	dc3a03fd 	.word	0xdc3a03fd
 80073ac:	3feec709 	.word	0x3feec709
 80073b0:	145b01f5 	.word	0x145b01f5
 80073b4:	be3e2fe0 	.word	0xbe3e2fe0
 80073b8:	00000000 	.word	0x00000000
 80073bc:	3ff00000 	.word	0x3ff00000
 80073c0:	7ff00000 	.word	0x7ff00000
 80073c4:	43400000 	.word	0x43400000
 80073c8:	0003988e 	.word	0x0003988e
 80073cc:	000bb679 	.word	0x000bb679
 80073d0:	08008418 	.word	0x08008418
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	40080000 	.word	0x40080000
 80073dc:	08008438 	.word	0x08008438
 80073e0:	08008428 	.word	0x08008428
 80073e4:	a3b3      	add	r3, pc, #716	; (adr r3, 80076b4 <__ieee754_pow+0xa4c>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	4640      	mov	r0, r8
 80073ec:	4649      	mov	r1, r9
 80073ee:	f7f8 fef9 	bl	80001e4 <__adddf3>
 80073f2:	4622      	mov	r2, r4
 80073f4:	ec41 0b1a 	vmov	d10, r0, r1
 80073f8:	462b      	mov	r3, r5
 80073fa:	4630      	mov	r0, r6
 80073fc:	4639      	mov	r1, r7
 80073fe:	f7f8 feef 	bl	80001e0 <__aeabi_dsub>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	ec51 0b1a 	vmov	r0, r1, d10
 800740a:	f7f9 fb31 	bl	8000a70 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	f47f ae04 	bne.w	800701c <__ieee754_pow+0x3b4>
 8007414:	4aa2      	ldr	r2, [pc, #648]	; (80076a0 <__ieee754_pow+0xa38>)
 8007416:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800741a:	4293      	cmp	r3, r2
 800741c:	f340 8107 	ble.w	800762e <__ieee754_pow+0x9c6>
 8007420:	151b      	asrs	r3, r3, #20
 8007422:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007426:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800742a:	fa4a fa03 	asr.w	sl, sl, r3
 800742e:	44da      	add	sl, fp
 8007430:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007434:	489b      	ldr	r0, [pc, #620]	; (80076a4 <__ieee754_pow+0xa3c>)
 8007436:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800743a:	4108      	asrs	r0, r1
 800743c:	ea00 030a 	and.w	r3, r0, sl
 8007440:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007444:	f1c1 0114 	rsb	r1, r1, #20
 8007448:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800744c:	fa4a fa01 	asr.w	sl, sl, r1
 8007450:	f1bb 0f00 	cmp.w	fp, #0
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	bfb8      	it	lt
 800745e:	f1ca 0a00 	rsblt	sl, sl, #0
 8007462:	f7f8 febd 	bl	80001e0 <__aeabi_dsub>
 8007466:	ec41 0b19 	vmov	d9, r0, r1
 800746a:	4642      	mov	r2, r8
 800746c:	464b      	mov	r3, r9
 800746e:	ec51 0b19 	vmov	r0, r1, d9
 8007472:	f7f8 feb7 	bl	80001e4 <__adddf3>
 8007476:	a37a      	add	r3, pc, #488	; (adr r3, 8007660 <__ieee754_pow+0x9f8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	2000      	movs	r0, #0
 800747e:	4604      	mov	r4, r0
 8007480:	460d      	mov	r5, r1
 8007482:	f7f9 f865 	bl	8000550 <__aeabi_dmul>
 8007486:	ec53 2b19 	vmov	r2, r3, d9
 800748a:	4606      	mov	r6, r0
 800748c:	460f      	mov	r7, r1
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	f7f8 fea5 	bl	80001e0 <__aeabi_dsub>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4640      	mov	r0, r8
 800749c:	4649      	mov	r1, r9
 800749e:	f7f8 fe9f 	bl	80001e0 <__aeabi_dsub>
 80074a2:	a371      	add	r3, pc, #452	; (adr r3, 8007668 <__ieee754_pow+0xa00>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f852 	bl	8000550 <__aeabi_dmul>
 80074ac:	a370      	add	r3, pc, #448	; (adr r3, 8007670 <__ieee754_pow+0xa08>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	4680      	mov	r8, r0
 80074b4:	4689      	mov	r9, r1
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 f849 	bl	8000550 <__aeabi_dmul>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f8 fe8d 	bl	80001e4 <__adddf3>
 80074ca:	4604      	mov	r4, r0
 80074cc:	460d      	mov	r5, r1
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f8 fe85 	bl	80001e4 <__adddf3>
 80074da:	4632      	mov	r2, r6
 80074dc:	463b      	mov	r3, r7
 80074de:	4680      	mov	r8, r0
 80074e0:	4689      	mov	r9, r1
 80074e2:	f7f8 fe7d 	bl	80001e0 <__aeabi_dsub>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4620      	mov	r0, r4
 80074ec:	4629      	mov	r1, r5
 80074ee:	f7f8 fe77 	bl	80001e0 <__aeabi_dsub>
 80074f2:	4642      	mov	r2, r8
 80074f4:	4606      	mov	r6, r0
 80074f6:	460f      	mov	r7, r1
 80074f8:	464b      	mov	r3, r9
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f7f9 f827 	bl	8000550 <__aeabi_dmul>
 8007502:	a35d      	add	r3, pc, #372	; (adr r3, 8007678 <__ieee754_pow+0xa10>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	f7f9 f820 	bl	8000550 <__aeabi_dmul>
 8007510:	a35b      	add	r3, pc, #364	; (adr r3, 8007680 <__ieee754_pow+0xa18>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f8 fe63 	bl	80001e0 <__aeabi_dsub>
 800751a:	4622      	mov	r2, r4
 800751c:	462b      	mov	r3, r5
 800751e:	f7f9 f817 	bl	8000550 <__aeabi_dmul>
 8007522:	a359      	add	r3, pc, #356	; (adr r3, 8007688 <__ieee754_pow+0xa20>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f8 fe5c 	bl	80001e4 <__adddf3>
 800752c:	4622      	mov	r2, r4
 800752e:	462b      	mov	r3, r5
 8007530:	f7f9 f80e 	bl	8000550 <__aeabi_dmul>
 8007534:	a356      	add	r3, pc, #344	; (adr r3, 8007690 <__ieee754_pow+0xa28>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f8 fe51 	bl	80001e0 <__aeabi_dsub>
 800753e:	4622      	mov	r2, r4
 8007540:	462b      	mov	r3, r5
 8007542:	f7f9 f805 	bl	8000550 <__aeabi_dmul>
 8007546:	a354      	add	r3, pc, #336	; (adr r3, 8007698 <__ieee754_pow+0xa30>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f7f8 fe4a 	bl	80001e4 <__adddf3>
 8007550:	4622      	mov	r2, r4
 8007552:	462b      	mov	r3, r5
 8007554:	f7f8 fffc 	bl	8000550 <__aeabi_dmul>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4640      	mov	r0, r8
 800755e:	4649      	mov	r1, r9
 8007560:	f7f8 fe3e 	bl	80001e0 <__aeabi_dsub>
 8007564:	4604      	mov	r4, r0
 8007566:	460d      	mov	r5, r1
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4640      	mov	r0, r8
 800756e:	4649      	mov	r1, r9
 8007570:	f7f8 ffee 	bl	8000550 <__aeabi_dmul>
 8007574:	2200      	movs	r2, #0
 8007576:	ec41 0b19 	vmov	d9, r0, r1
 800757a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 fe2d 	bl	80001e0 <__aeabi_dsub>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	ec51 0b19 	vmov	r0, r1, d9
 800758e:	f7f9 f909 	bl	80007a4 <__aeabi_ddiv>
 8007592:	4632      	mov	r2, r6
 8007594:	4604      	mov	r4, r0
 8007596:	460d      	mov	r5, r1
 8007598:	463b      	mov	r3, r7
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7f8 ffd7 	bl	8000550 <__aeabi_dmul>
 80075a2:	4632      	mov	r2, r6
 80075a4:	463b      	mov	r3, r7
 80075a6:	f7f8 fe1d 	bl	80001e4 <__adddf3>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f8 fe15 	bl	80001e0 <__aeabi_dsub>
 80075b6:	4642      	mov	r2, r8
 80075b8:	464b      	mov	r3, r9
 80075ba:	f7f8 fe11 	bl	80001e0 <__aeabi_dsub>
 80075be:	460b      	mov	r3, r1
 80075c0:	4602      	mov	r2, r0
 80075c2:	4939      	ldr	r1, [pc, #228]	; (80076a8 <__ieee754_pow+0xa40>)
 80075c4:	2000      	movs	r0, #0
 80075c6:	f7f8 fe0b 	bl	80001e0 <__aeabi_dsub>
 80075ca:	ec41 0b10 	vmov	d0, r0, r1
 80075ce:	ee10 3a90 	vmov	r3, s1
 80075d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80075d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075da:	da2b      	bge.n	8007634 <__ieee754_pow+0x9cc>
 80075dc:	4650      	mov	r0, sl
 80075de:	f000 fa7f 	bl	8007ae0 <scalbn>
 80075e2:	ec51 0b10 	vmov	r0, r1, d0
 80075e6:	ec53 2b18 	vmov	r2, r3, d8
 80075ea:	f7ff bbee 	b.w	8006dca <__ieee754_pow+0x162>
 80075ee:	4b2f      	ldr	r3, [pc, #188]	; (80076ac <__ieee754_pow+0xa44>)
 80075f0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80075f4:	429e      	cmp	r6, r3
 80075f6:	f77f af0d 	ble.w	8007414 <__ieee754_pow+0x7ac>
 80075fa:	4b2d      	ldr	r3, [pc, #180]	; (80076b0 <__ieee754_pow+0xa48>)
 80075fc:	440b      	add	r3, r1
 80075fe:	4303      	orrs	r3, r0
 8007600:	d009      	beq.n	8007616 <__ieee754_pow+0x9ae>
 8007602:	ec51 0b18 	vmov	r0, r1, d8
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	f7f9 fa13 	bl	8000a34 <__aeabi_dcmplt>
 800760e:	3800      	subs	r0, #0
 8007610:	bf18      	it	ne
 8007612:	2001      	movne	r0, #1
 8007614:	e448      	b.n	8006ea8 <__ieee754_pow+0x240>
 8007616:	4622      	mov	r2, r4
 8007618:	462b      	mov	r3, r5
 800761a:	f7f8 fde1 	bl	80001e0 <__aeabi_dsub>
 800761e:	4642      	mov	r2, r8
 8007620:	464b      	mov	r3, r9
 8007622:	f7f9 fa1b 	bl	8000a5c <__aeabi_dcmpge>
 8007626:	2800      	cmp	r0, #0
 8007628:	f43f aef4 	beq.w	8007414 <__ieee754_pow+0x7ac>
 800762c:	e7e9      	b.n	8007602 <__ieee754_pow+0x99a>
 800762e:	f04f 0a00 	mov.w	sl, #0
 8007632:	e71a      	b.n	800746a <__ieee754_pow+0x802>
 8007634:	ec51 0b10 	vmov	r0, r1, d0
 8007638:	4619      	mov	r1, r3
 800763a:	e7d4      	b.n	80075e6 <__ieee754_pow+0x97e>
 800763c:	491a      	ldr	r1, [pc, #104]	; (80076a8 <__ieee754_pow+0xa40>)
 800763e:	2000      	movs	r0, #0
 8007640:	f7ff bb31 	b.w	8006ca6 <__ieee754_pow+0x3e>
 8007644:	2000      	movs	r0, #0
 8007646:	2100      	movs	r1, #0
 8007648:	f7ff bb2d 	b.w	8006ca6 <__ieee754_pow+0x3e>
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7ff bb29 	b.w	8006ca6 <__ieee754_pow+0x3e>
 8007654:	9204      	str	r2, [sp, #16]
 8007656:	f7ff bb7b 	b.w	8006d50 <__ieee754_pow+0xe8>
 800765a:	2300      	movs	r3, #0
 800765c:	f7ff bb65 	b.w	8006d2a <__ieee754_pow+0xc2>
 8007660:	00000000 	.word	0x00000000
 8007664:	3fe62e43 	.word	0x3fe62e43
 8007668:	fefa39ef 	.word	0xfefa39ef
 800766c:	3fe62e42 	.word	0x3fe62e42
 8007670:	0ca86c39 	.word	0x0ca86c39
 8007674:	be205c61 	.word	0xbe205c61
 8007678:	72bea4d0 	.word	0x72bea4d0
 800767c:	3e663769 	.word	0x3e663769
 8007680:	c5d26bf1 	.word	0xc5d26bf1
 8007684:	3ebbbd41 	.word	0x3ebbbd41
 8007688:	af25de2c 	.word	0xaf25de2c
 800768c:	3f11566a 	.word	0x3f11566a
 8007690:	16bebd93 	.word	0x16bebd93
 8007694:	3f66c16c 	.word	0x3f66c16c
 8007698:	5555553e 	.word	0x5555553e
 800769c:	3fc55555 	.word	0x3fc55555
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	fff00000 	.word	0xfff00000
 80076a8:	3ff00000 	.word	0x3ff00000
 80076ac:	4090cbff 	.word	0x4090cbff
 80076b0:	3f6f3400 	.word	0x3f6f3400
 80076b4:	652b82fe 	.word	0x652b82fe
 80076b8:	3c971547 	.word	0x3c971547
 80076bc:	00000000 	.word	0x00000000

080076c0 <__ieee754_rem_pio2>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	ed2d 8b02 	vpush	{d8}
 80076c8:	ec55 4b10 	vmov	r4, r5, d0
 80076cc:	4bca      	ldr	r3, [pc, #808]	; (80079f8 <__ieee754_rem_pio2+0x338>)
 80076ce:	b08b      	sub	sp, #44	; 0x2c
 80076d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80076d4:	4598      	cmp	r8, r3
 80076d6:	4682      	mov	sl, r0
 80076d8:	9502      	str	r5, [sp, #8]
 80076da:	dc08      	bgt.n	80076ee <__ieee754_rem_pio2+0x2e>
 80076dc:	2200      	movs	r2, #0
 80076de:	2300      	movs	r3, #0
 80076e0:	ed80 0b00 	vstr	d0, [r0]
 80076e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80076e8:	f04f 0b00 	mov.w	fp, #0
 80076ec:	e028      	b.n	8007740 <__ieee754_rem_pio2+0x80>
 80076ee:	4bc3      	ldr	r3, [pc, #780]	; (80079fc <__ieee754_rem_pio2+0x33c>)
 80076f0:	4598      	cmp	r8, r3
 80076f2:	dc78      	bgt.n	80077e6 <__ieee754_rem_pio2+0x126>
 80076f4:	9b02      	ldr	r3, [sp, #8]
 80076f6:	4ec2      	ldr	r6, [pc, #776]	; (8007a00 <__ieee754_rem_pio2+0x340>)
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	ee10 0a10 	vmov	r0, s0
 80076fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x300>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	4629      	mov	r1, r5
 8007706:	dd39      	ble.n	800777c <__ieee754_rem_pio2+0xbc>
 8007708:	f7f8 fd6a 	bl	80001e0 <__aeabi_dsub>
 800770c:	45b0      	cmp	r8, r6
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	d01b      	beq.n	800774c <__ieee754_rem_pio2+0x8c>
 8007714:	a3ac      	add	r3, pc, #688	; (adr r3, 80079c8 <__ieee754_rem_pio2+0x308>)
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f7f8 fd61 	bl	80001e0 <__aeabi_dsub>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	e9ca 2300 	strd	r2, r3, [sl]
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	f7f8 fd59 	bl	80001e0 <__aeabi_dsub>
 800772e:	a3a6      	add	r3, pc, #664	; (adr r3, 80079c8 <__ieee754_rem_pio2+0x308>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f7f8 fd54 	bl	80001e0 <__aeabi_dsub>
 8007738:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800773c:	f04f 0b01 	mov.w	fp, #1
 8007740:	4658      	mov	r0, fp
 8007742:	b00b      	add	sp, #44	; 0x2c
 8007744:	ecbd 8b02 	vpop	{d8}
 8007748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774c:	a3a0      	add	r3, pc, #640	; (adr r3, 80079d0 <__ieee754_rem_pio2+0x310>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f7f8 fd45 	bl	80001e0 <__aeabi_dsub>
 8007756:	a3a0      	add	r3, pc, #640	; (adr r3, 80079d8 <__ieee754_rem_pio2+0x318>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f7f8 fd3e 	bl	80001e0 <__aeabi_dsub>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	e9ca 2300 	strd	r2, r3, [sl]
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 fd36 	bl	80001e0 <__aeabi_dsub>
 8007774:	a398      	add	r3, pc, #608	; (adr r3, 80079d8 <__ieee754_rem_pio2+0x318>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	e7db      	b.n	8007734 <__ieee754_rem_pio2+0x74>
 800777c:	f7f8 fd32 	bl	80001e4 <__adddf3>
 8007780:	45b0      	cmp	r8, r6
 8007782:	4604      	mov	r4, r0
 8007784:	460d      	mov	r5, r1
 8007786:	d016      	beq.n	80077b6 <__ieee754_rem_pio2+0xf6>
 8007788:	a38f      	add	r3, pc, #572	; (adr r3, 80079c8 <__ieee754_rem_pio2+0x308>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 fd29 	bl	80001e4 <__adddf3>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e9ca 2300 	strd	r2, r3, [sl]
 800779a:	4620      	mov	r0, r4
 800779c:	4629      	mov	r1, r5
 800779e:	f7f8 fd1f 	bl	80001e0 <__aeabi_dsub>
 80077a2:	a389      	add	r3, pc, #548	; (adr r3, 80079c8 <__ieee754_rem_pio2+0x308>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fd1c 	bl	80001e4 <__adddf3>
 80077ac:	f04f 3bff 	mov.w	fp, #4294967295
 80077b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077b4:	e7c4      	b.n	8007740 <__ieee754_rem_pio2+0x80>
 80077b6:	a386      	add	r3, pc, #536	; (adr r3, 80079d0 <__ieee754_rem_pio2+0x310>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 fd12 	bl	80001e4 <__adddf3>
 80077c0:	a385      	add	r3, pc, #532	; (adr r3, 80079d8 <__ieee754_rem_pio2+0x318>)
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	4604      	mov	r4, r0
 80077c8:	460d      	mov	r5, r1
 80077ca:	f7f8 fd0b 	bl	80001e4 <__adddf3>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	e9ca 2300 	strd	r2, r3, [sl]
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f8 fd01 	bl	80001e0 <__aeabi_dsub>
 80077de:	a37e      	add	r3, pc, #504	; (adr r3, 80079d8 <__ieee754_rem_pio2+0x318>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	e7e0      	b.n	80077a8 <__ieee754_rem_pio2+0xe8>
 80077e6:	4b87      	ldr	r3, [pc, #540]	; (8007a04 <__ieee754_rem_pio2+0x344>)
 80077e8:	4598      	cmp	r8, r3
 80077ea:	f300 80d8 	bgt.w	800799e <__ieee754_rem_pio2+0x2de>
 80077ee:	f000 f96d 	bl	8007acc <fabs>
 80077f2:	ec55 4b10 	vmov	r4, r5, d0
 80077f6:	ee10 0a10 	vmov	r0, s0
 80077fa:	a379      	add	r3, pc, #484	; (adr r3, 80079e0 <__ieee754_rem_pio2+0x320>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	4629      	mov	r1, r5
 8007802:	f7f8 fea5 	bl	8000550 <__aeabi_dmul>
 8007806:	4b80      	ldr	r3, [pc, #512]	; (8007a08 <__ieee754_rem_pio2+0x348>)
 8007808:	2200      	movs	r2, #0
 800780a:	f7f8 fceb 	bl	80001e4 <__adddf3>
 800780e:	f7f9 f94f 	bl	8000ab0 <__aeabi_d2iz>
 8007812:	4683      	mov	fp, r0
 8007814:	f7f8 fe32 	bl	800047c <__aeabi_i2d>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	ec43 2b18 	vmov	d8, r2, r3
 8007820:	a367      	add	r3, pc, #412	; (adr r3, 80079c0 <__ieee754_rem_pio2+0x300>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fe93 	bl	8000550 <__aeabi_dmul>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4620      	mov	r0, r4
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 fcd5 	bl	80001e0 <__aeabi_dsub>
 8007836:	a364      	add	r3, pc, #400	; (adr r3, 80079c8 <__ieee754_rem_pio2+0x308>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	4606      	mov	r6, r0
 800783e:	460f      	mov	r7, r1
 8007840:	ec51 0b18 	vmov	r0, r1, d8
 8007844:	f7f8 fe84 	bl	8000550 <__aeabi_dmul>
 8007848:	f1bb 0f1f 	cmp.w	fp, #31
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	dc0d      	bgt.n	800786e <__ieee754_rem_pio2+0x1ae>
 8007852:	4b6e      	ldr	r3, [pc, #440]	; (8007a0c <__ieee754_rem_pio2+0x34c>)
 8007854:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	4543      	cmp	r3, r8
 800785e:	d006      	beq.n	800786e <__ieee754_rem_pio2+0x1ae>
 8007860:	4622      	mov	r2, r4
 8007862:	462b      	mov	r3, r5
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f7f8 fcba 	bl	80001e0 <__aeabi_dsub>
 800786c:	e00e      	b.n	800788c <__ieee754_rem_pio2+0x1cc>
 800786e:	462b      	mov	r3, r5
 8007870:	4622      	mov	r2, r4
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f8 fcb3 	bl	80001e0 <__aeabi_dsub>
 800787a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007884:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007888:	2b10      	cmp	r3, #16
 800788a:	dc02      	bgt.n	8007892 <__ieee754_rem_pio2+0x1d2>
 800788c:	e9ca 0100 	strd	r0, r1, [sl]
 8007890:	e039      	b.n	8007906 <__ieee754_rem_pio2+0x246>
 8007892:	a34f      	add	r3, pc, #316	; (adr r3, 80079d0 <__ieee754_rem_pio2+0x310>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	ec51 0b18 	vmov	r0, r1, d8
 800789c:	f7f8 fe58 	bl	8000550 <__aeabi_dmul>
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f8 fc98 	bl	80001e0 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4680      	mov	r8, r0
 80078b6:	4689      	mov	r9, r1
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f8 fc90 	bl	80001e0 <__aeabi_dsub>
 80078c0:	4622      	mov	r2, r4
 80078c2:	462b      	mov	r3, r5
 80078c4:	f7f8 fc8c 	bl	80001e0 <__aeabi_dsub>
 80078c8:	a343      	add	r3, pc, #268	; (adr r3, 80079d8 <__ieee754_rem_pio2+0x318>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	4604      	mov	r4, r0
 80078d0:	460d      	mov	r5, r1
 80078d2:	ec51 0b18 	vmov	r0, r1, d8
 80078d6:	f7f8 fe3b 	bl	8000550 <__aeabi_dmul>
 80078da:	4622      	mov	r2, r4
 80078dc:	462b      	mov	r3, r5
 80078de:	f7f8 fc7f 	bl	80001e0 <__aeabi_dsub>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f8 fc77 	bl	80001e0 <__aeabi_dsub>
 80078f2:	9a03      	ldr	r2, [sp, #12]
 80078f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b31      	cmp	r3, #49	; 0x31
 80078fc:	dc24      	bgt.n	8007948 <__ieee754_rem_pio2+0x288>
 80078fe:	e9ca 0100 	strd	r0, r1, [sl]
 8007902:	4646      	mov	r6, r8
 8007904:	464f      	mov	r7, r9
 8007906:	e9da 8900 	ldrd	r8, r9, [sl]
 800790a:	4630      	mov	r0, r6
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	4639      	mov	r1, r7
 8007912:	f7f8 fc65 	bl	80001e0 <__aeabi_dsub>
 8007916:	462b      	mov	r3, r5
 8007918:	4622      	mov	r2, r4
 800791a:	f7f8 fc61 	bl	80001e0 <__aeabi_dsub>
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007926:	f6bf af0b 	bge.w	8007740 <__ieee754_rem_pio2+0x80>
 800792a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800792e:	f8ca 3004 	str.w	r3, [sl, #4]
 8007932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007936:	f8ca 8000 	str.w	r8, [sl]
 800793a:	f8ca 0008 	str.w	r0, [sl, #8]
 800793e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007942:	f1cb 0b00 	rsb	fp, fp, #0
 8007946:	e6fb      	b.n	8007740 <__ieee754_rem_pio2+0x80>
 8007948:	a327      	add	r3, pc, #156	; (adr r3, 80079e8 <__ieee754_rem_pio2+0x328>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	ec51 0b18 	vmov	r0, r1, d8
 8007952:	f7f8 fdfd 	bl	8000550 <__aeabi_dmul>
 8007956:	4604      	mov	r4, r0
 8007958:	460d      	mov	r5, r1
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f8 fc3d 	bl	80001e0 <__aeabi_dsub>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4606      	mov	r6, r0
 800796c:	460f      	mov	r7, r1
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	f7f8 fc35 	bl	80001e0 <__aeabi_dsub>
 8007976:	4622      	mov	r2, r4
 8007978:	462b      	mov	r3, r5
 800797a:	f7f8 fc31 	bl	80001e0 <__aeabi_dsub>
 800797e:	a31c      	add	r3, pc, #112	; (adr r3, 80079f0 <__ieee754_rem_pio2+0x330>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	ec51 0b18 	vmov	r0, r1, d8
 800798c:	f7f8 fde0 	bl	8000550 <__aeabi_dmul>
 8007990:	4622      	mov	r2, r4
 8007992:	462b      	mov	r3, r5
 8007994:	f7f8 fc24 	bl	80001e0 <__aeabi_dsub>
 8007998:	4604      	mov	r4, r0
 800799a:	460d      	mov	r5, r1
 800799c:	e760      	b.n	8007860 <__ieee754_rem_pio2+0x1a0>
 800799e:	4b1c      	ldr	r3, [pc, #112]	; (8007a10 <__ieee754_rem_pio2+0x350>)
 80079a0:	4598      	cmp	r8, r3
 80079a2:	dd37      	ble.n	8007a14 <__ieee754_rem_pio2+0x354>
 80079a4:	ee10 2a10 	vmov	r2, s0
 80079a8:	462b      	mov	r3, r5
 80079aa:	4620      	mov	r0, r4
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7f8 fc17 	bl	80001e0 <__aeabi_dsub>
 80079b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079b6:	e9ca 0100 	strd	r0, r1, [sl]
 80079ba:	e695      	b.n	80076e8 <__ieee754_rem_pio2+0x28>
 80079bc:	f3af 8000 	nop.w
 80079c0:	54400000 	.word	0x54400000
 80079c4:	3ff921fb 	.word	0x3ff921fb
 80079c8:	1a626331 	.word	0x1a626331
 80079cc:	3dd0b461 	.word	0x3dd0b461
 80079d0:	1a600000 	.word	0x1a600000
 80079d4:	3dd0b461 	.word	0x3dd0b461
 80079d8:	2e037073 	.word	0x2e037073
 80079dc:	3ba3198a 	.word	0x3ba3198a
 80079e0:	6dc9c883 	.word	0x6dc9c883
 80079e4:	3fe45f30 	.word	0x3fe45f30
 80079e8:	2e000000 	.word	0x2e000000
 80079ec:	3ba3198a 	.word	0x3ba3198a
 80079f0:	252049c1 	.word	0x252049c1
 80079f4:	397b839a 	.word	0x397b839a
 80079f8:	3fe921fb 	.word	0x3fe921fb
 80079fc:	4002d97b 	.word	0x4002d97b
 8007a00:	3ff921fb 	.word	0x3ff921fb
 8007a04:	413921fb 	.word	0x413921fb
 8007a08:	3fe00000 	.word	0x3fe00000
 8007a0c:	08008448 	.word	0x08008448
 8007a10:	7fefffff 	.word	0x7fefffff
 8007a14:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007a18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007a1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007a20:	4620      	mov	r0, r4
 8007a22:	460d      	mov	r5, r1
 8007a24:	f7f9 f844 	bl	8000ab0 <__aeabi_d2iz>
 8007a28:	f7f8 fd28 	bl	800047c <__aeabi_i2d>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a38:	f7f8 fbd2 	bl	80001e0 <__aeabi_dsub>
 8007a3c:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <__ieee754_rem_pio2+0x404>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f7f8 fd86 	bl	8000550 <__aeabi_dmul>
 8007a44:	460d      	mov	r5, r1
 8007a46:	4604      	mov	r4, r0
 8007a48:	f7f9 f832 	bl	8000ab0 <__aeabi_d2iz>
 8007a4c:	f7f8 fd16 	bl	800047c <__aeabi_i2d>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a5c:	f7f8 fbc0 	bl	80001e0 <__aeabi_dsub>
 8007a60:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <__ieee754_rem_pio2+0x404>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	f7f8 fd74 	bl	8000550 <__aeabi_dmul>
 8007a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007a70:	2703      	movs	r7, #3
 8007a72:	2400      	movs	r4, #0
 8007a74:	2500      	movs	r5, #0
 8007a76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	46b9      	mov	r9, r7
 8007a80:	3f01      	subs	r7, #1
 8007a82:	f7f8 ffcd 	bl	8000a20 <__aeabi_dcmpeq>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d1f5      	bne.n	8007a76 <__ieee754_rem_pio2+0x3b6>
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <__ieee754_rem_pio2+0x408>)
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2302      	movs	r3, #2
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4632      	mov	r2, r6
 8007a94:	464b      	mov	r3, r9
 8007a96:	4651      	mov	r1, sl
 8007a98:	a804      	add	r0, sp, #16
 8007a9a:	f000 f8d1 	bl	8007c40 <__kernel_rem_pio2>
 8007a9e:	9b02      	ldr	r3, [sp, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	f6bf ae4c 	bge.w	8007740 <__ieee754_rem_pio2+0x80>
 8007aa8:	e9da 2100 	ldrd	r2, r1, [sl]
 8007aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ab0:	e9ca 2300 	strd	r2, r3, [sl]
 8007ab4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007ab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007abc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007ac0:	e73f      	b.n	8007942 <__ieee754_rem_pio2+0x282>
 8007ac2:	bf00      	nop
 8007ac4:	41700000 	.word	0x41700000
 8007ac8:	080084c8 	.word	0x080084c8

08007acc <fabs>:
 8007acc:	ec51 0b10 	vmov	r0, r1, d0
 8007ad0:	ee10 2a10 	vmov	r2, s0
 8007ad4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ad8:	ec43 2b10 	vmov	d0, r2, r3
 8007adc:	4770      	bx	lr
	...

08007ae0 <scalbn>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	ec55 4b10 	vmov	r4, r5, d0
 8007ae6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007aea:	4606      	mov	r6, r0
 8007aec:	462b      	mov	r3, r5
 8007aee:	b999      	cbnz	r1, 8007b18 <scalbn+0x38>
 8007af0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007af4:	4323      	orrs	r3, r4
 8007af6:	d03f      	beq.n	8007b78 <scalbn+0x98>
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <scalbn+0xf0>)
 8007afa:	4629      	mov	r1, r5
 8007afc:	ee10 0a10 	vmov	r0, s0
 8007b00:	2200      	movs	r2, #0
 8007b02:	f7f8 fd25 	bl	8000550 <__aeabi_dmul>
 8007b06:	4b33      	ldr	r3, [pc, #204]	; (8007bd4 <scalbn+0xf4>)
 8007b08:	429e      	cmp	r6, r3
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	da10      	bge.n	8007b32 <scalbn+0x52>
 8007b10:	a327      	add	r3, pc, #156	; (adr r3, 8007bb0 <scalbn+0xd0>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	e01f      	b.n	8007b58 <scalbn+0x78>
 8007b18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007b1c:	4291      	cmp	r1, r2
 8007b1e:	d10c      	bne.n	8007b3a <scalbn+0x5a>
 8007b20:	ee10 2a10 	vmov	r2, s0
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 fb5c 	bl	80001e4 <__adddf3>
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	460d      	mov	r5, r1
 8007b30:	e022      	b.n	8007b78 <scalbn+0x98>
 8007b32:	460b      	mov	r3, r1
 8007b34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007b38:	3936      	subs	r1, #54	; 0x36
 8007b3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007b3e:	4296      	cmp	r6, r2
 8007b40:	dd0d      	ble.n	8007b5e <scalbn+0x7e>
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	a11c      	add	r1, pc, #112	; (adr r1, 8007bb8 <scalbn+0xd8>)
 8007b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4a:	da02      	bge.n	8007b52 <scalbn+0x72>
 8007b4c:	a11c      	add	r1, pc, #112	; (adr r1, 8007bc0 <scalbn+0xe0>)
 8007b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b52:	a319      	add	r3, pc, #100	; (adr r3, 8007bb8 <scalbn+0xd8>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fcfa 	bl	8000550 <__aeabi_dmul>
 8007b5c:	e7e6      	b.n	8007b2c <scalbn+0x4c>
 8007b5e:	1872      	adds	r2, r6, r1
 8007b60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007b64:	428a      	cmp	r2, r1
 8007b66:	dcec      	bgt.n	8007b42 <scalbn+0x62>
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	dd08      	ble.n	8007b7e <scalbn+0x9e>
 8007b6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007b78:	ec45 4b10 	vmov	d0, r4, r5
 8007b7c:	bd70      	pop	{r4, r5, r6, pc}
 8007b7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007b82:	da08      	bge.n	8007b96 <scalbn+0xb6>
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	a10a      	add	r1, pc, #40	; (adr r1, 8007bb0 <scalbn+0xd0>)
 8007b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b8c:	dac0      	bge.n	8007b10 <scalbn+0x30>
 8007b8e:	a10e      	add	r1, pc, #56	; (adr r1, 8007bc8 <scalbn+0xe8>)
 8007b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b94:	e7bc      	b.n	8007b10 <scalbn+0x30>
 8007b96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b9a:	3236      	adds	r2, #54	; 0x36
 8007b9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ba0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <scalbn+0xf8>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	e7d5      	b.n	8007b58 <scalbn+0x78>
 8007bac:	f3af 8000 	nop.w
 8007bb0:	c2f8f359 	.word	0xc2f8f359
 8007bb4:	01a56e1f 	.word	0x01a56e1f
 8007bb8:	8800759c 	.word	0x8800759c
 8007bbc:	7e37e43c 	.word	0x7e37e43c
 8007bc0:	8800759c 	.word	0x8800759c
 8007bc4:	fe37e43c 	.word	0xfe37e43c
 8007bc8:	c2f8f359 	.word	0xc2f8f359
 8007bcc:	81a56e1f 	.word	0x81a56e1f
 8007bd0:	43500000 	.word	0x43500000
 8007bd4:	ffff3cb0 	.word	0xffff3cb0
 8007bd8:	3c900000 	.word	0x3c900000

08007bdc <with_errno>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4604      	mov	r4, r0
 8007be0:	460d      	mov	r5, r1
 8007be2:	4616      	mov	r6, r2
 8007be4:	f7fe fc16 	bl	8006414 <__errno>
 8007be8:	4629      	mov	r1, r5
 8007bea:	6006      	str	r6, [r0, #0]
 8007bec:	4620      	mov	r0, r4
 8007bee:	bd70      	pop	{r4, r5, r6, pc}

08007bf0 <xflow>:
 8007bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bf2:	4614      	mov	r4, r2
 8007bf4:	461d      	mov	r5, r3
 8007bf6:	b108      	cbz	r0, 8007bfc <xflow+0xc>
 8007bf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8007c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 fca2 	bl	8000550 <__aeabi_dmul>
 8007c0c:	2222      	movs	r2, #34	; 0x22
 8007c0e:	b003      	add	sp, #12
 8007c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c14:	f7ff bfe2 	b.w	8007bdc <with_errno>

08007c18 <__math_uflow>:
 8007c18:	b508      	push	{r3, lr}
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c20:	f7ff ffe6 	bl	8007bf0 <xflow>
 8007c24:	ec41 0b10 	vmov	d0, r0, r1
 8007c28:	bd08      	pop	{r3, pc}

08007c2a <__math_oflow>:
 8007c2a:	b508      	push	{r3, lr}
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007c32:	f7ff ffdd 	bl	8007bf0 <xflow>
 8007c36:	ec41 0b10 	vmov	d0, r0, r1
 8007c3a:	bd08      	pop	{r3, pc}
 8007c3c:	0000      	movs	r0, r0
	...

08007c40 <__kernel_rem_pio2>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	ed2d 8b02 	vpush	{d8}
 8007c48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007c4c:	f112 0f14 	cmn.w	r2, #20
 8007c50:	9306      	str	r3, [sp, #24]
 8007c52:	9104      	str	r1, [sp, #16]
 8007c54:	4bc2      	ldr	r3, [pc, #776]	; (8007f60 <__kernel_rem_pio2+0x320>)
 8007c56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007c58:	9009      	str	r0, [sp, #36]	; 0x24
 8007c5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	9b06      	ldr	r3, [sp, #24]
 8007c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c66:	bfa8      	it	ge
 8007c68:	1ed4      	subge	r4, r2, #3
 8007c6a:	9305      	str	r3, [sp, #20]
 8007c6c:	bfb2      	itee	lt
 8007c6e:	2400      	movlt	r4, #0
 8007c70:	2318      	movge	r3, #24
 8007c72:	fb94 f4f3 	sdivge	r4, r4, r3
 8007c76:	f06f 0317 	mvn.w	r3, #23
 8007c7a:	fb04 3303 	mla	r3, r4, r3, r3
 8007c7e:	eb03 0a02 	add.w	sl, r3, r2
 8007c82:	9b00      	ldr	r3, [sp, #0]
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007f50 <__kernel_rem_pio2+0x310>
 8007c8a:	eb03 0802 	add.w	r8, r3, r2
 8007c8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007c90:	1aa7      	subs	r7, r4, r2
 8007c92:	ae20      	add	r6, sp, #128	; 0x80
 8007c94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007c98:	2500      	movs	r5, #0
 8007c9a:	4545      	cmp	r5, r8
 8007c9c:	dd13      	ble.n	8007cc6 <__kernel_rem_pio2+0x86>
 8007c9e:	9b06      	ldr	r3, [sp, #24]
 8007ca0:	aa20      	add	r2, sp, #128	; 0x80
 8007ca2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007ca6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007caa:	f04f 0800 	mov.w	r8, #0
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	4598      	cmp	r8, r3
 8007cb2:	dc31      	bgt.n	8007d18 <__kernel_rem_pio2+0xd8>
 8007cb4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007f50 <__kernel_rem_pio2+0x310>
 8007cb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007cbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cc0:	462f      	mov	r7, r5
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	e01b      	b.n	8007cfe <__kernel_rem_pio2+0xbe>
 8007cc6:	42ef      	cmn	r7, r5
 8007cc8:	d407      	bmi.n	8007cda <__kernel_rem_pio2+0x9a>
 8007cca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007cce:	f7f8 fbd5 	bl	800047c <__aeabi_i2d>
 8007cd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	e7df      	b.n	8007c9a <__kernel_rem_pio2+0x5a>
 8007cda:	ec51 0b18 	vmov	r0, r1, d8
 8007cde:	e7f8      	b.n	8007cd2 <__kernel_rem_pio2+0x92>
 8007ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007ce8:	f7f8 fc32 	bl	8000550 <__aeabi_dmul>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf4:	f7f8 fa76 	bl	80001e4 <__adddf3>
 8007cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	9b05      	ldr	r3, [sp, #20]
 8007d00:	429e      	cmp	r6, r3
 8007d02:	f1a7 0708 	sub.w	r7, r7, #8
 8007d06:	ddeb      	ble.n	8007ce0 <__kernel_rem_pio2+0xa0>
 8007d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d0c:	f108 0801 	add.w	r8, r8, #1
 8007d10:	ecab 7b02 	vstmia	fp!, {d7}
 8007d14:	3508      	adds	r5, #8
 8007d16:	e7ca      	b.n	8007cae <__kernel_rem_pio2+0x6e>
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	aa0c      	add	r2, sp, #48	; 0x30
 8007d1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d22:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007d24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007d28:	9c00      	ldr	r4, [sp, #0]
 8007d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d2c:	00e3      	lsls	r3, r4, #3
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	ab98      	add	r3, sp, #608	; 0x260
 8007d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007d3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007d3e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007d44:	46c3      	mov	fp, r8
 8007d46:	46a1      	mov	r9, r4
 8007d48:	f1b9 0f00 	cmp.w	r9, #0
 8007d4c:	f1a5 0508 	sub.w	r5, r5, #8
 8007d50:	dc77      	bgt.n	8007e42 <__kernel_rem_pio2+0x202>
 8007d52:	ec47 6b10 	vmov	d0, r6, r7
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7ff fec2 	bl	8007ae0 <scalbn>
 8007d5c:	ec57 6b10 	vmov	r6, r7, d0
 8007d60:	2200      	movs	r2, #0
 8007d62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007d66:	ee10 0a10 	vmov	r0, s0
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 fbf0 	bl	8000550 <__aeabi_dmul>
 8007d70:	ec41 0b10 	vmov	d0, r0, r1
 8007d74:	f000 fab4 	bl	80082e0 <floor>
 8007d78:	4b7a      	ldr	r3, [pc, #488]	; (8007f64 <__kernel_rem_pio2+0x324>)
 8007d7a:	ec51 0b10 	vmov	r0, r1, d0
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f7f8 fbe6 	bl	8000550 <__aeabi_dmul>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fa28 	bl	80001e0 <__aeabi_dsub>
 8007d90:	460f      	mov	r7, r1
 8007d92:	4606      	mov	r6, r0
 8007d94:	f7f8 fe8c 	bl	8000ab0 <__aeabi_d2iz>
 8007d98:	9002      	str	r0, [sp, #8]
 8007d9a:	f7f8 fb6f 	bl	800047c <__aeabi_i2d>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fa1b 	bl	80001e0 <__aeabi_dsub>
 8007daa:	f1ba 0f00 	cmp.w	sl, #0
 8007dae:	4606      	mov	r6, r0
 8007db0:	460f      	mov	r7, r1
 8007db2:	dd6d      	ble.n	8007e90 <__kernel_rem_pio2+0x250>
 8007db4:	1e61      	subs	r1, r4, #1
 8007db6:	ab0c      	add	r3, sp, #48	; 0x30
 8007db8:	9d02      	ldr	r5, [sp, #8]
 8007dba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dbe:	f1ca 0018 	rsb	r0, sl, #24
 8007dc2:	fa43 f200 	asr.w	r2, r3, r0
 8007dc6:	4415      	add	r5, r2
 8007dc8:	4082      	lsls	r2, r0
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	aa0c      	add	r2, sp, #48	; 0x30
 8007dce:	9502      	str	r5, [sp, #8]
 8007dd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007dd4:	f1ca 0217 	rsb	r2, sl, #23
 8007dd8:	fa43 fb02 	asr.w	fp, r3, r2
 8007ddc:	f1bb 0f00 	cmp.w	fp, #0
 8007de0:	dd65      	ble.n	8007eae <__kernel_rem_pio2+0x26e>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	3301      	adds	r3, #1
 8007de8:	9302      	str	r3, [sp, #8]
 8007dea:	4615      	mov	r5, r2
 8007dec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007df0:	4294      	cmp	r4, r2
 8007df2:	f300 809f 	bgt.w	8007f34 <__kernel_rem_pio2+0x2f4>
 8007df6:	f1ba 0f00 	cmp.w	sl, #0
 8007dfa:	dd07      	ble.n	8007e0c <__kernel_rem_pio2+0x1cc>
 8007dfc:	f1ba 0f01 	cmp.w	sl, #1
 8007e00:	f000 80c1 	beq.w	8007f86 <__kernel_rem_pio2+0x346>
 8007e04:	f1ba 0f02 	cmp.w	sl, #2
 8007e08:	f000 80c7 	beq.w	8007f9a <__kernel_rem_pio2+0x35a>
 8007e0c:	f1bb 0f02 	cmp.w	fp, #2
 8007e10:	d14d      	bne.n	8007eae <__kernel_rem_pio2+0x26e>
 8007e12:	4632      	mov	r2, r6
 8007e14:	463b      	mov	r3, r7
 8007e16:	4954      	ldr	r1, [pc, #336]	; (8007f68 <__kernel_rem_pio2+0x328>)
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f7f8 f9e1 	bl	80001e0 <__aeabi_dsub>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	2d00      	cmp	r5, #0
 8007e24:	d043      	beq.n	8007eae <__kernel_rem_pio2+0x26e>
 8007e26:	4650      	mov	r0, sl
 8007e28:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007f58 <__kernel_rem_pio2+0x318>
 8007e2c:	f7ff fe58 	bl	8007ae0 <scalbn>
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	ec53 2b10 	vmov	r2, r3, d0
 8007e38:	f7f8 f9d2 	bl	80001e0 <__aeabi_dsub>
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	e035      	b.n	8007eae <__kernel_rem_pio2+0x26e>
 8007e42:	4b4a      	ldr	r3, [pc, #296]	; (8007f6c <__kernel_rem_pio2+0x32c>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	4630      	mov	r0, r6
 8007e48:	4639      	mov	r1, r7
 8007e4a:	f7f8 fb81 	bl	8000550 <__aeabi_dmul>
 8007e4e:	f7f8 fe2f 	bl	8000ab0 <__aeabi_d2iz>
 8007e52:	f7f8 fb13 	bl	800047c <__aeabi_i2d>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	ec43 2b18 	vmov	d8, r2, r3
 8007e5e:	4b44      	ldr	r3, [pc, #272]	; (8007f70 <__kernel_rem_pio2+0x330>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7f8 fb75 	bl	8000550 <__aeabi_dmul>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	f7f8 f9b7 	bl	80001e0 <__aeabi_dsub>
 8007e72:	f7f8 fe1d 	bl	8000ab0 <__aeabi_d2iz>
 8007e76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e7a:	f84b 0b04 	str.w	r0, [fp], #4
 8007e7e:	ec51 0b18 	vmov	r0, r1, d8
 8007e82:	f7f8 f9af 	bl	80001e4 <__adddf3>
 8007e86:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	e75b      	b.n	8007d48 <__kernel_rem_pio2+0x108>
 8007e90:	d106      	bne.n	8007ea0 <__kernel_rem_pio2+0x260>
 8007e92:	1e63      	subs	r3, r4, #1
 8007e94:	aa0c      	add	r2, sp, #48	; 0x30
 8007e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007e9e:	e79d      	b.n	8007ddc <__kernel_rem_pio2+0x19c>
 8007ea0:	4b34      	ldr	r3, [pc, #208]	; (8007f74 <__kernel_rem_pio2+0x334>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f7f8 fdda 	bl	8000a5c <__aeabi_dcmpge>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d140      	bne.n	8007f2e <__kernel_rem_pio2+0x2ee>
 8007eac:	4683      	mov	fp, r0
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	f7f8 fdb3 	bl	8000a20 <__aeabi_dcmpeq>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f000 80c1 	beq.w	8008042 <__kernel_rem_pio2+0x402>
 8007ec0:	1e65      	subs	r5, r4, #1
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	9900      	ldr	r1, [sp, #0]
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	da6d      	bge.n	8007fa8 <__kernel_rem_pio2+0x368>
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	f000 808a 	beq.w	8007fe6 <__kernel_rem_pio2+0x3a6>
 8007ed2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ed4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007ed8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80ae 	beq.w	800803e <__kernel_rem_pio2+0x3fe>
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007f58 <__kernel_rem_pio2+0x318>
 8007ee8:	f7ff fdfa 	bl	8007ae0 <scalbn>
 8007eec:	1c6b      	adds	r3, r5, #1
 8007eee:	00da      	lsls	r2, r3, #3
 8007ef0:	9205      	str	r2, [sp, #20]
 8007ef2:	ec57 6b10 	vmov	r6, r7, d0
 8007ef6:	aa70      	add	r2, sp, #448	; 0x1c0
 8007ef8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007f6c <__kernel_rem_pio2+0x32c>
 8007efc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007f00:	462c      	mov	r4, r5
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	f280 80d4 	bge.w	80080b4 <__kernel_rem_pio2+0x474>
 8007f0c:	462c      	mov	r4, r5
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	f2c0 8102 	blt.w	8008118 <__kernel_rem_pio2+0x4d8>
 8007f14:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <__kernel_rem_pio2+0x338>)
 8007f16:	461e      	mov	r6, r3
 8007f18:	ab70      	add	r3, sp, #448	; 0x1c0
 8007f1a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007f1e:	1b2b      	subs	r3, r5, r4
 8007f20:	f04f 0900 	mov.w	r9, #0
 8007f24:	f04f 0a00 	mov.w	sl, #0
 8007f28:	2700      	movs	r7, #0
 8007f2a:	9306      	str	r3, [sp, #24]
 8007f2c:	e0e6      	b.n	80080fc <__kernel_rem_pio2+0x4bc>
 8007f2e:	f04f 0b02 	mov.w	fp, #2
 8007f32:	e756      	b.n	8007de2 <__kernel_rem_pio2+0x1a2>
 8007f34:	f8d8 3000 	ldr.w	r3, [r8]
 8007f38:	bb05      	cbnz	r5, 8007f7c <__kernel_rem_pio2+0x33c>
 8007f3a:	b123      	cbz	r3, 8007f46 <__kernel_rem_pio2+0x306>
 8007f3c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007f40:	f8c8 3000 	str.w	r3, [r8]
 8007f44:	2301      	movs	r3, #1
 8007f46:	3201      	adds	r2, #1
 8007f48:	f108 0804 	add.w	r8, r8, #4
 8007f4c:	461d      	mov	r5, r3
 8007f4e:	e74f      	b.n	8007df0 <__kernel_rem_pio2+0x1b0>
	...
 8007f5c:	3ff00000 	.word	0x3ff00000
 8007f60:	08008610 	.word	0x08008610
 8007f64:	40200000 	.word	0x40200000
 8007f68:	3ff00000 	.word	0x3ff00000
 8007f6c:	3e700000 	.word	0x3e700000
 8007f70:	41700000 	.word	0x41700000
 8007f74:	3fe00000 	.word	0x3fe00000
 8007f78:	080085d0 	.word	0x080085d0
 8007f7c:	1acb      	subs	r3, r1, r3
 8007f7e:	f8c8 3000 	str.w	r3, [r8]
 8007f82:	462b      	mov	r3, r5
 8007f84:	e7df      	b.n	8007f46 <__kernel_rem_pio2+0x306>
 8007f86:	1e62      	subs	r2, r4, #1
 8007f88:	ab0c      	add	r3, sp, #48	; 0x30
 8007f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007f92:	a90c      	add	r1, sp, #48	; 0x30
 8007f94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007f98:	e738      	b.n	8007e0c <__kernel_rem_pio2+0x1cc>
 8007f9a:	1e62      	subs	r2, r4, #1
 8007f9c:	ab0c      	add	r3, sp, #48	; 0x30
 8007f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007fa6:	e7f4      	b.n	8007f92 <__kernel_rem_pio2+0x352>
 8007fa8:	a90c      	add	r1, sp, #48	; 0x30
 8007faa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	e788      	b.n	8007ec6 <__kernel_rem_pio2+0x286>
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	d0fa      	beq.n	8007fb4 <__kernel_rem_pio2+0x374>
 8007fbe:	9a08      	ldr	r2, [sp, #32]
 8007fc0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007fc4:	446a      	add	r2, sp
 8007fc6:	3a98      	subs	r2, #152	; 0x98
 8007fc8:	9208      	str	r2, [sp, #32]
 8007fca:	9a06      	ldr	r2, [sp, #24]
 8007fcc:	a920      	add	r1, sp, #128	; 0x80
 8007fce:	18a2      	adds	r2, r4, r2
 8007fd0:	18e3      	adds	r3, r4, r3
 8007fd2:	f104 0801 	add.w	r8, r4, #1
 8007fd6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007fda:	9302      	str	r3, [sp, #8]
 8007fdc:	9b02      	ldr	r3, [sp, #8]
 8007fde:	4543      	cmp	r3, r8
 8007fe0:	da04      	bge.n	8007fec <__kernel_rem_pio2+0x3ac>
 8007fe2:	461c      	mov	r4, r3
 8007fe4:	e6a2      	b.n	8007d2c <__kernel_rem_pio2+0xec>
 8007fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e7e4      	b.n	8007fb6 <__kernel_rem_pio2+0x376>
 8007fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ff2:	f7f8 fa43 	bl	800047c <__aeabi_i2d>
 8007ff6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	46ab      	mov	fp, r5
 8007ffe:	461c      	mov	r4, r3
 8008000:	f04f 0900 	mov.w	r9, #0
 8008004:	2600      	movs	r6, #0
 8008006:	2700      	movs	r7, #0
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	4599      	cmp	r9, r3
 800800c:	dd06      	ble.n	800801c <__kernel_rem_pio2+0x3dc>
 800800e:	9b08      	ldr	r3, [sp, #32]
 8008010:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008014:	f108 0801 	add.w	r8, r8, #1
 8008018:	9308      	str	r3, [sp, #32]
 800801a:	e7df      	b.n	8007fdc <__kernel_rem_pio2+0x39c>
 800801c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008020:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008024:	f7f8 fa94 	bl	8000550 <__aeabi_dmul>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4630      	mov	r0, r6
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 f8d8 	bl	80001e4 <__adddf3>
 8008034:	f109 0901 	add.w	r9, r9, #1
 8008038:	4606      	mov	r6, r0
 800803a:	460f      	mov	r7, r1
 800803c:	e7e4      	b.n	8008008 <__kernel_rem_pio2+0x3c8>
 800803e:	3d01      	subs	r5, #1
 8008040:	e747      	b.n	8007ed2 <__kernel_rem_pio2+0x292>
 8008042:	ec47 6b10 	vmov	d0, r6, r7
 8008046:	f1ca 0000 	rsb	r0, sl, #0
 800804a:	f7ff fd49 	bl	8007ae0 <scalbn>
 800804e:	ec57 6b10 	vmov	r6, r7, d0
 8008052:	4ba0      	ldr	r3, [pc, #640]	; (80082d4 <__kernel_rem_pio2+0x694>)
 8008054:	ee10 0a10 	vmov	r0, s0
 8008058:	2200      	movs	r2, #0
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fcfe 	bl	8000a5c <__aeabi_dcmpge>
 8008060:	b1f8      	cbz	r0, 80080a2 <__kernel_rem_pio2+0x462>
 8008062:	4b9d      	ldr	r3, [pc, #628]	; (80082d8 <__kernel_rem_pio2+0x698>)
 8008064:	2200      	movs	r2, #0
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 fa71 	bl	8000550 <__aeabi_dmul>
 800806e:	f7f8 fd1f 	bl	8000ab0 <__aeabi_d2iz>
 8008072:	4680      	mov	r8, r0
 8008074:	f7f8 fa02 	bl	800047c <__aeabi_i2d>
 8008078:	4b96      	ldr	r3, [pc, #600]	; (80082d4 <__kernel_rem_pio2+0x694>)
 800807a:	2200      	movs	r2, #0
 800807c:	f7f8 fa68 	bl	8000550 <__aeabi_dmul>
 8008080:	460b      	mov	r3, r1
 8008082:	4602      	mov	r2, r0
 8008084:	4639      	mov	r1, r7
 8008086:	4630      	mov	r0, r6
 8008088:	f7f8 f8aa 	bl	80001e0 <__aeabi_dsub>
 800808c:	f7f8 fd10 	bl	8000ab0 <__aeabi_d2iz>
 8008090:	1c65      	adds	r5, r4, #1
 8008092:	ab0c      	add	r3, sp, #48	; 0x30
 8008094:	f10a 0a18 	add.w	sl, sl, #24
 8008098:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800809c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80080a0:	e71f      	b.n	8007ee2 <__kernel_rem_pio2+0x2a2>
 80080a2:	4630      	mov	r0, r6
 80080a4:	4639      	mov	r1, r7
 80080a6:	f7f8 fd03 	bl	8000ab0 <__aeabi_d2iz>
 80080aa:	ab0c      	add	r3, sp, #48	; 0x30
 80080ac:	4625      	mov	r5, r4
 80080ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80080b2:	e716      	b.n	8007ee2 <__kernel_rem_pio2+0x2a2>
 80080b4:	ab0c      	add	r3, sp, #48	; 0x30
 80080b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80080ba:	f7f8 f9df 	bl	800047c <__aeabi_i2d>
 80080be:	4632      	mov	r2, r6
 80080c0:	463b      	mov	r3, r7
 80080c2:	f7f8 fa45 	bl	8000550 <__aeabi_dmul>
 80080c6:	4642      	mov	r2, r8
 80080c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80080cc:	464b      	mov	r3, r9
 80080ce:	4630      	mov	r0, r6
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 fa3d 	bl	8000550 <__aeabi_dmul>
 80080d6:	3c01      	subs	r4, #1
 80080d8:	4606      	mov	r6, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	e713      	b.n	8007f06 <__kernel_rem_pio2+0x2c6>
 80080de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80080e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80080e6:	f7f8 fa33 	bl	8000550 <__aeabi_dmul>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4648      	mov	r0, r9
 80080f0:	4651      	mov	r1, sl
 80080f2:	f7f8 f877 	bl	80001e4 <__adddf3>
 80080f6:	3701      	adds	r7, #1
 80080f8:	4681      	mov	r9, r0
 80080fa:	468a      	mov	sl, r1
 80080fc:	9b00      	ldr	r3, [sp, #0]
 80080fe:	429f      	cmp	r7, r3
 8008100:	dc02      	bgt.n	8008108 <__kernel_rem_pio2+0x4c8>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	429f      	cmp	r7, r3
 8008106:	ddea      	ble.n	80080de <__kernel_rem_pio2+0x49e>
 8008108:	9a06      	ldr	r2, [sp, #24]
 800810a:	ab48      	add	r3, sp, #288	; 0x120
 800810c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008110:	e9c6 9a00 	strd	r9, sl, [r6]
 8008114:	3c01      	subs	r4, #1
 8008116:	e6fa      	b.n	8007f0e <__kernel_rem_pio2+0x2ce>
 8008118:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800811a:	2b02      	cmp	r3, #2
 800811c:	dc0b      	bgt.n	8008136 <__kernel_rem_pio2+0x4f6>
 800811e:	2b00      	cmp	r3, #0
 8008120:	dc39      	bgt.n	8008196 <__kernel_rem_pio2+0x556>
 8008122:	d05d      	beq.n	80081e0 <__kernel_rem_pio2+0x5a0>
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	f003 0007 	and.w	r0, r3, #7
 800812a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800812e:	ecbd 8b02 	vpop	{d8}
 8008132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008136:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008138:	2b03      	cmp	r3, #3
 800813a:	d1f3      	bne.n	8008124 <__kernel_rem_pio2+0x4e4>
 800813c:	9b05      	ldr	r3, [sp, #20]
 800813e:	9500      	str	r5, [sp, #0]
 8008140:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008144:	eb0d 0403 	add.w	r4, sp, r3
 8008148:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800814c:	46a2      	mov	sl, r4
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f1aa 0a08 	sub.w	sl, sl, #8
 8008156:	dc69      	bgt.n	800822c <__kernel_rem_pio2+0x5ec>
 8008158:	46aa      	mov	sl, r5
 800815a:	f1ba 0f01 	cmp.w	sl, #1
 800815e:	f1a4 0408 	sub.w	r4, r4, #8
 8008162:	f300 8083 	bgt.w	800826c <__kernel_rem_pio2+0x62c>
 8008166:	9c05      	ldr	r4, [sp, #20]
 8008168:	ab48      	add	r3, sp, #288	; 0x120
 800816a:	441c      	add	r4, r3
 800816c:	2000      	movs	r0, #0
 800816e:	2100      	movs	r1, #0
 8008170:	2d01      	cmp	r5, #1
 8008172:	f300 809a 	bgt.w	80082aa <__kernel_rem_pio2+0x66a>
 8008176:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800817a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800817e:	f1bb 0f00 	cmp.w	fp, #0
 8008182:	f040 8098 	bne.w	80082b6 <__kernel_rem_pio2+0x676>
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	e9c3 7800 	strd	r7, r8, [r3]
 800818c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008190:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008194:	e7c6      	b.n	8008124 <__kernel_rem_pio2+0x4e4>
 8008196:	9e05      	ldr	r6, [sp, #20]
 8008198:	ab48      	add	r3, sp, #288	; 0x120
 800819a:	441e      	add	r6, r3
 800819c:	462c      	mov	r4, r5
 800819e:	2000      	movs	r0, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	da33      	bge.n	800820e <__kernel_rem_pio2+0x5ce>
 80081a6:	f1bb 0f00 	cmp.w	fp, #0
 80081aa:	d036      	beq.n	800821a <__kernel_rem_pio2+0x5da>
 80081ac:	4602      	mov	r2, r0
 80081ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081b2:	9c04      	ldr	r4, [sp, #16]
 80081b4:	e9c4 2300 	strd	r2, r3, [r4]
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80081c0:	f7f8 f80e 	bl	80001e0 <__aeabi_dsub>
 80081c4:	ae4a      	add	r6, sp, #296	; 0x128
 80081c6:	2401      	movs	r4, #1
 80081c8:	42a5      	cmp	r5, r4
 80081ca:	da29      	bge.n	8008220 <__kernel_rem_pio2+0x5e0>
 80081cc:	f1bb 0f00 	cmp.w	fp, #0
 80081d0:	d002      	beq.n	80081d8 <__kernel_rem_pio2+0x598>
 80081d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081d6:	4619      	mov	r1, r3
 80081d8:	9b04      	ldr	r3, [sp, #16]
 80081da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80081de:	e7a1      	b.n	8008124 <__kernel_rem_pio2+0x4e4>
 80081e0:	9c05      	ldr	r4, [sp, #20]
 80081e2:	ab48      	add	r3, sp, #288	; 0x120
 80081e4:	441c      	add	r4, r3
 80081e6:	2000      	movs	r0, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	da09      	bge.n	8008202 <__kernel_rem_pio2+0x5c2>
 80081ee:	f1bb 0f00 	cmp.w	fp, #0
 80081f2:	d002      	beq.n	80081fa <__kernel_rem_pio2+0x5ba>
 80081f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081f8:	4619      	mov	r1, r3
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	e9c3 0100 	strd	r0, r1, [r3]
 8008200:	e790      	b.n	8008124 <__kernel_rem_pio2+0x4e4>
 8008202:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008206:	f7f7 ffed 	bl	80001e4 <__adddf3>
 800820a:	3d01      	subs	r5, #1
 800820c:	e7ed      	b.n	80081ea <__kernel_rem_pio2+0x5aa>
 800820e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008212:	f7f7 ffe7 	bl	80001e4 <__adddf3>
 8008216:	3c01      	subs	r4, #1
 8008218:	e7c3      	b.n	80081a2 <__kernel_rem_pio2+0x562>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	e7c8      	b.n	80081b2 <__kernel_rem_pio2+0x572>
 8008220:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008224:	f7f7 ffde 	bl	80001e4 <__adddf3>
 8008228:	3401      	adds	r4, #1
 800822a:	e7cd      	b.n	80081c8 <__kernel_rem_pio2+0x588>
 800822c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008230:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	3b01      	subs	r3, #1
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	4632      	mov	r2, r6
 800823c:	463b      	mov	r3, r7
 800823e:	4640      	mov	r0, r8
 8008240:	4649      	mov	r1, r9
 8008242:	f7f7 ffcf 	bl	80001e4 <__adddf3>
 8008246:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4640      	mov	r0, r8
 8008250:	4649      	mov	r1, r9
 8008252:	f7f7 ffc5 	bl	80001e0 <__aeabi_dsub>
 8008256:	4632      	mov	r2, r6
 8008258:	463b      	mov	r3, r7
 800825a:	f7f7 ffc3 	bl	80001e4 <__adddf3>
 800825e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008262:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008266:	ed8a 7b00 	vstr	d7, [sl]
 800826a:	e770      	b.n	800814e <__kernel_rem_pio2+0x50e>
 800826c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008270:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008274:	4640      	mov	r0, r8
 8008276:	4632      	mov	r2, r6
 8008278:	463b      	mov	r3, r7
 800827a:	4649      	mov	r1, r9
 800827c:	f7f7 ffb2 	bl	80001e4 <__adddf3>
 8008280:	e9cd 0100 	strd	r0, r1, [sp]
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f7 ffa8 	bl	80001e0 <__aeabi_dsub>
 8008290:	4632      	mov	r2, r6
 8008292:	463b      	mov	r3, r7
 8008294:	f7f7 ffa6 	bl	80001e4 <__adddf3>
 8008298:	ed9d 7b00 	vldr	d7, [sp]
 800829c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80082a0:	ed84 7b00 	vstr	d7, [r4]
 80082a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082a8:	e757      	b.n	800815a <__kernel_rem_pio2+0x51a>
 80082aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082ae:	f7f7 ff99 	bl	80001e4 <__adddf3>
 80082b2:	3d01      	subs	r5, #1
 80082b4:	e75c      	b.n	8008170 <__kernel_rem_pio2+0x530>
 80082b6:	9b04      	ldr	r3, [sp, #16]
 80082b8:	9a04      	ldr	r2, [sp, #16]
 80082ba:	601f      	str	r7, [r3, #0]
 80082bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80082c0:	605c      	str	r4, [r3, #4]
 80082c2:	609d      	str	r5, [r3, #8]
 80082c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80082c8:	60d3      	str	r3, [r2, #12]
 80082ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ce:	6110      	str	r0, [r2, #16]
 80082d0:	6153      	str	r3, [r2, #20]
 80082d2:	e727      	b.n	8008124 <__kernel_rem_pio2+0x4e4>
 80082d4:	41700000 	.word	0x41700000
 80082d8:	3e700000 	.word	0x3e700000
 80082dc:	00000000 	.word	0x00000000

080082e0 <floor>:
 80082e0:	ec51 0b10 	vmov	r0, r1, d0
 80082e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80082f0:	2e13      	cmp	r6, #19
 80082f2:	ee10 5a10 	vmov	r5, s0
 80082f6:	ee10 8a10 	vmov	r8, s0
 80082fa:	460c      	mov	r4, r1
 80082fc:	dc31      	bgt.n	8008362 <floor+0x82>
 80082fe:	2e00      	cmp	r6, #0
 8008300:	da14      	bge.n	800832c <floor+0x4c>
 8008302:	a333      	add	r3, pc, #204	; (adr r3, 80083d0 <floor+0xf0>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f7 ff6c 	bl	80001e4 <__adddf3>
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	f7f8 fbae 	bl	8000a70 <__aeabi_dcmpgt>
 8008314:	b138      	cbz	r0, 8008326 <floor+0x46>
 8008316:	2c00      	cmp	r4, #0
 8008318:	da53      	bge.n	80083c2 <floor+0xe2>
 800831a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800831e:	4325      	orrs	r5, r4
 8008320:	d052      	beq.n	80083c8 <floor+0xe8>
 8008322:	4c2d      	ldr	r4, [pc, #180]	; (80083d8 <floor+0xf8>)
 8008324:	2500      	movs	r5, #0
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	e024      	b.n	8008376 <floor+0x96>
 800832c:	4f2b      	ldr	r7, [pc, #172]	; (80083dc <floor+0xfc>)
 800832e:	4137      	asrs	r7, r6
 8008330:	ea01 0307 	and.w	r3, r1, r7
 8008334:	4303      	orrs	r3, r0
 8008336:	d01e      	beq.n	8008376 <floor+0x96>
 8008338:	a325      	add	r3, pc, #148	; (adr r3, 80083d0 <floor+0xf0>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ff51 	bl	80001e4 <__adddf3>
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	f7f8 fb93 	bl	8000a70 <__aeabi_dcmpgt>
 800834a:	2800      	cmp	r0, #0
 800834c:	d0eb      	beq.n	8008326 <floor+0x46>
 800834e:	2c00      	cmp	r4, #0
 8008350:	bfbe      	ittt	lt
 8008352:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008356:	4133      	asrlt	r3, r6
 8008358:	18e4      	addlt	r4, r4, r3
 800835a:	ea24 0407 	bic.w	r4, r4, r7
 800835e:	2500      	movs	r5, #0
 8008360:	e7e1      	b.n	8008326 <floor+0x46>
 8008362:	2e33      	cmp	r6, #51	; 0x33
 8008364:	dd0b      	ble.n	800837e <floor+0x9e>
 8008366:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800836a:	d104      	bne.n	8008376 <floor+0x96>
 800836c:	ee10 2a10 	vmov	r2, s0
 8008370:	460b      	mov	r3, r1
 8008372:	f7f7 ff37 	bl	80001e4 <__adddf3>
 8008376:	ec41 0b10 	vmov	d0, r0, r1
 800837a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008382:	f04f 37ff 	mov.w	r7, #4294967295
 8008386:	40df      	lsrs	r7, r3
 8008388:	4238      	tst	r0, r7
 800838a:	d0f4      	beq.n	8008376 <floor+0x96>
 800838c:	a310      	add	r3, pc, #64	; (adr r3, 80083d0 <floor+0xf0>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f7 ff27 	bl	80001e4 <__adddf3>
 8008396:	2200      	movs	r2, #0
 8008398:	2300      	movs	r3, #0
 800839a:	f7f8 fb69 	bl	8000a70 <__aeabi_dcmpgt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d0c1      	beq.n	8008326 <floor+0x46>
 80083a2:	2c00      	cmp	r4, #0
 80083a4:	da0a      	bge.n	80083bc <floor+0xdc>
 80083a6:	2e14      	cmp	r6, #20
 80083a8:	d101      	bne.n	80083ae <floor+0xce>
 80083aa:	3401      	adds	r4, #1
 80083ac:	e006      	b.n	80083bc <floor+0xdc>
 80083ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80083b2:	2301      	movs	r3, #1
 80083b4:	40b3      	lsls	r3, r6
 80083b6:	441d      	add	r5, r3
 80083b8:	45a8      	cmp	r8, r5
 80083ba:	d8f6      	bhi.n	80083aa <floor+0xca>
 80083bc:	ea25 0507 	bic.w	r5, r5, r7
 80083c0:	e7b1      	b.n	8008326 <floor+0x46>
 80083c2:	2500      	movs	r5, #0
 80083c4:	462c      	mov	r4, r5
 80083c6:	e7ae      	b.n	8008326 <floor+0x46>
 80083c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80083cc:	e7ab      	b.n	8008326 <floor+0x46>
 80083ce:	bf00      	nop
 80083d0:	8800759c 	.word	0x8800759c
 80083d4:	7e37e43c 	.word	0x7e37e43c
 80083d8:	bff00000 	.word	0xbff00000
 80083dc:	000fffff 	.word	0x000fffff

080083e0 <_init>:
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	bf00      	nop
 80083e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e6:	bc08      	pop	{r3}
 80083e8:	469e      	mov	lr, r3
 80083ea:	4770      	bx	lr

080083ec <_fini>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	bf00      	nop
 80083f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f2:	bc08      	pop	{r3}
 80083f4:	469e      	mov	lr, r3
 80083f6:	4770      	bx	lr
